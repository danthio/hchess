import tkinter as t 
import random
import time
import datetime
from PIL import Image, ImageTk
import math
from stockfish import Stockfish

difficulty=1

#https://stockfishchess.org
import os
cwd = os.getcwd()

cwd2=""
c=cwd.split("\\")

for i in c:
	cwd2+=i

	cwd2+="/"




stockfish = Stockfish(path=cwd2+"stockfish-windows-x86-64-avx2/stockfish/stockfish-windows-x86-64-avx2.exe"
	,depth=difficulty, parameters={"Threads": 2, "Minimum Thinking Time": 30,"Skill Level": difficulty})




images = []  # to hold the newly created image

def create_rectangle(can,x1, y1, x2, y2, **kwargs):
	global images
	if 'alpha' in kwargs:
		alpha = int(kwargs.pop('alpha') * 255)
		fill = kwargs.pop('fill')
		fill = root.winfo_rgb(fill) + (alpha,)
		image = Image.new('RGBA', (x2-x1, y2-y1), fill)
		images.append(ImageTk.PhotoImage(image))
		can.create_image(x1, y1, image=images[-1], anchor='nw')

def draw_pawn2(col,x,y,cc):
	global can2,st

	#col,x,y,cc

	sz=82.5

	x1=x
	y1=y
	x2=x+82.5
	y2=y+82.5


	if col==0:
		col="#ffffff"
		col2="#333333"
	elif col==1:
		col="#333333"
		col2="#333333"


	cc.create_oval(x1+(sz/2)-10,y1+5, x2-(sz/2)+10,y1+25 ,fill=col,outline=col2,width=1 )
	cc.create_oval(x1+(sz/2)-15,y1+25-3, x2-(sz/2)+15,y1+55-3 ,fill=col,outline=col2,width=1 )
	cc.create_arc(x1+(sz/2)-25,y1+55-6, x2-(sz/2)+25,y1+105-6,start=0,extent=180,fill=col,outline=col2,width=1 )


	cc.create_oval(x1+(sz/2)-10+6-1,y1+5+13, x2-(sz/2)+10-6+1,y1+25-12+13 ,fill=col,outline=col,width=1 )

	cc.create_oval(x1+(sz/2)-10+5-1,y1+5+39, x2-(sz/2)+10-5+1,y1+25-8+39 ,fill=col,outline=col,width=1 )



def draw_queenx(col,x,y,ccc):

	x1,y1=x,y
	x2,y2=x+38.75,y+38.75

	sz=38.75

	if col==0:
		col="#ffffff"
		col2="#333333"
	elif col==1:
		col="#333333"
		col2="#ffffff"





	ccc.create_polygon(x1+(sz/2)+(-5-15-15+5)*0.4696969697,y1+20*0.4696969697, x1+15*0.4696969697,y2-25*0.4696969697, x1+(15+10.5*5)*0.4696969697,y2-25*0.4696969697,
		x2-(sz/2)+(5+15+15-5)*0.4696969697,y1+20*0.4696969697, x1+(15+10.5*4)*0.4696969697,y2+(-25-5)*0.4696969697, x2-(sz/2)+(5+15-5)*0.4696969697,y1+15*0.4696969697, x1+(15+10.5*3)*0.4696969697,y2+(-25-10)*0.4696969697,
		x1+(sz/2)+(-5+5)*0.4696969697,y1+(5+5)*0.4696969697, x1+(15+10.5*2)*0.4696969697,y2+(-25-10)*0.4696969697, x1+(sz/2)+(-5-15+5)*0.4696969697,y1+15*0.4696969697, x1+(15+10.5)*0.4696969697,y2+(-25-5)*0.4696969697,
		x1+(sz/2)+(-5-15-15+5)*0.4696969697,y1+20*0.4696969697, fill=col,outline=col2,width=1)
	

	ccc.create_polygon(x1+15*0.4696969697,y2-25*0.4696969697, x1+(15+5)*0.4696969697,y2+(-25+5)*0.4696969697, x1+(15-5+10.5*5)*0.4696969697,y2+(-25+5)*0.4696969697, x1+(15+10.5*5)*0.4696969697,y2-25*0.4696969697,fill=col,outline=col2,width=1)
	ccc.create_rectangle(x1+(15+5)*0.4696969697,y2+(-25+5)*0.4696969697, x1+(15-5+10.5*5)*0.4696969697,y2+(-25+5+5)*0.4696969697,fill=col,outline=col2,width=1)
	ccc.create_polygon(x1+(15+5)*0.4696969697,y2+(-25+10)*0.4696969697,  x1+15*0.4696969697,y2+(-25+10+5)*0.4696969697,  x1+(15+5)*0.4696969697,y2+(-25+10+5+5)*0.4696969697, 
		x1+(15-5+10.5*5)*0.4696969697,y2+(-25+10+5+5)*0.4696969697, x1+(15+10.5*5)*0.4696969697,y2+(-25+10+5)*0.4696969697, x1+(15-5+10.5*5)*0.4696969697,y2+(-25+10)*0.4696969697,fill=col,outline=col2,width=1)

	ccc.create_oval(x1+(sz/2)-5*0.4696969697,y1+5*0.4696969697,x2-(sz/2)+5*0.4696969697,y1+15*0.4696969697,fill=col,outline=col2,width=1)
	ccc.create_oval(x1+(sz/2)+(-5-15)*0.4696969697,y1+10*0.4696969697,x1+(sz/2)+(-5-5)*0.4696969697,y1+20*0.4696969697,fill=col,outline=col2,width=1)
	ccc.create_oval(x1+(sz/2)+(-5-15-15)*0.4696969697,y1+15*0.4696969697,x1+(sz/2)+(-5-5-15)*0.4696969697,y1+25*0.4696969697,fill=col,outline=col2,width=1)

	ccc.create_oval(x2-(sz/2)+(5+15)*0.4696969697,y1+10*0.4696969697,x2-(sz/2)+(5+5)*0.4696969697,y1+20*0.4696969697,fill=col,outline=col2,width=1)
	ccc.create_oval(x2-(sz/2)+(5+15+15)*0.4696969697,y1+15*0.4696969697,x2-(sz/2)+(5+5+15)*0.4696969697,y1+25*0.4696969697,fill=col,outline=col2,width=1)



def draw_rookx(col,x,y,ccc):

	x1,y1=x,y
	x2,y2=x+38.75,y+38.75

	sz=38.75


	if col==0:
		col="#ffffff"
		col2="#333333"
	elif col==1:
		col="#333333"
		col2="#ffffff"


	ccc.create_polygon(x1+(sz/2),y1+5*0.4696969697,x1+(sz/2)-7*0.4696969697,y1+5*0.4696969697, x1+(sz/2)-7*0.4696969697,y1+(5+5)*0.4696969697, x1+(sz/2)+(-7-14+5)*0.4696969697,y1+(5+5)*0.4696969697,
	 x1+(sz/2)+(-7-14+5)*0.4696969697,y1+5*0.4696969697,  x1+(sz/2)+(-7-14-14+5)*0.4696969697,y1+5*0.4696969697, x1+(sz/2)+(-7-14-14+5)*0.4696969697,y1+(5+10)*0.4696969697, x2-(sz/2)+(7+14+14-5)*0.4696969697,y1+(5+10)*0.4696969697,
	 x2-(sz/2)+(7+14+14-5)*0.4696969697,y1+5*0.4696969697,x2-(sz/2)+(7+14-5)*0.4696969697,y1+5*0.4696969697,x2-(sz/2)+(7+14-5)*0.4696969697,y1+(5+5)*0.4696969697,x2-(sz/2)+7*0.4696969697,y1+(5+5)*0.4696969697,x2-(sz/2)+7*0.4696969697,y1+5*0.4696969697,
	 x1+(sz/2),y1+5*0.4696969697,fill=col,outline=col2,width=1)

	ccc.create_polygon(x1+(sz/2)+(-7-14-14+5)*0.4696969697,y1+(5+10)*0.4696969697, x1+(sz/2)+(-7-14-14+5+5+2)*0.4696969697,y1+(5+10+5+3-3)*0.4696969697,
		x2-(sz/2)+(7+14+14-5-5-2)*0.4696969697,y1+(5+10+5+3-3)*0.4696969697,x2-(sz/2)+(7+14+14-5)*0.4696969697,y1+(5+10)*0.4696969697, fill=col,outline=col2,width=1)

	ccc.create_rectangle(x1+(sz/2)+(-7-14-10+5+2)*0.4696969697,y1+(5+10+5+3-3)*0.4696969697, x2-(sz/2)+(7+14+10-5-2)*0.4696969697,y2+(-5-5-5-5-3+3)*0.4696969697,fill=col,outline=col2,width=1)

	ccc.create_polygon(x1+(sz/2)+(-7-14-14+5)*0.4696969697,y2+(-5-5-5)*0.4696969697, x1+(sz/2)+(-7-14-14+5+5+2)*0.4696969697,y2+(-5-5-5-5-3+3)*0.4696969697,
		x2-(sz/2)+(7+14+10-5-2)*0.4696969697,y2+(-5-5-5-5-3+3)*0.4696969697, x2-(sz/2)+(7+14+14-5)*0.4696969697,y2+(-5-5-5)*0.4696969697 ,fill=col,outline=col2,width=1)

	ccc.create_polygon(x2-(sz/2)+(7+14+10)*0.4696969697,y2+(-5-5-5)*0.4696969697, x2-(sz/2)+(7+14+10)*0.4696969697,y2+(-5-5)*0.4696969697,
		x1+(sz/2)+(-7-14-10)*0.4696969697,y2+(-5-5)*0.4696969697,x1+(sz/2)+(-7-14-10)*0.4696969697,y2+(-5-5-5)*0.4696969697,x2-(sz/2)+(7+14+10)*0.4696969697,y2+(-5-5-5)*0.4696969697,fill=col,outline=col2,width=1)

	ccc.create_polygon(x1+(sz/2)+(-7-14-14)*0.4696969697,y2-5*0.4696969697, x1+(sz/2)+(-7-14-14-3+3)*0.4696969697,y2+(-5-5)*0.4696969697,
		x2-(sz/2)+(7+14+14)*0.4696969697,y2+(-5-5)*0.4696969697, x2-(sz/2)+(7+14+14)*0.4696969697,y2-5*0.4696969697,x1+(sz/2)+(-7-14-14)*0.4696969697,y2-5*0.4696969697,fill=col,outline=col2,width=1)


def draw_pawnx(col,x,y,ccc):

	x1,y1=x,y
	x2,y2=x+38.75,y+38.75

	sz=38.75

	if col==0:
		col="#ffffff"
		col2="#333333"
	elif col==1:
		col="#333333"
		col2="#ffffff"


	ccc.create_oval(x1+(sz/2)-10*0.4696969697,y1+5*0.4696969697, x2-(sz/2)+10*0.4696969697,y1+25*0.4696969697 ,fill=col,outline=col2,width=1 )
	ccc.create_oval(x1+(sz/2)-15*0.4696969697,y1+(25-3)*0.4696969697, x2-(sz/2)+15*0.4696969697,y1+(55-3)*0.4696969697 ,fill=col,outline=col2,width=1 )
	ccc.create_arc(x1+(sz/2)-25*0.4696969697,y1+(55-6)*0.4696969697, x2-(sz/2)+25*0.4696969697,y1+(105-6)*0.4696969697,start=0,extent=180,fill=col,outline=col2,width=1 )
	
	ccc.create_oval(x1+(sz/2)+(-10+6)*0.4696969697-1,y1+(5+13)*0.4696969697, x2-(sz/2)+(10-6)*0.4696969697+1,y1+(25-12+13)*0.4696969697 ,fill=col,outline=col,width=1 )
	ccc.create_oval(x1+(sz/2)+(-10+5)*0.4696969697-1,y1+(5+39)*0.4696969697, x2-(sz/2)+(10-5)*0.4696969697+1,y1+(25-8+39)*0.4696969697 ,fill=col,outline=col,width=1 )



def draw_bishopx(col,x,y,ccc):

	x1,y1=x,y
	x2,y2=x+38.75,y+38.75

	if col==0:
		col="#ffffff"
		col2="#333333"
	elif col==1:
		col="#333333"
		col2="#ffffff"


	ar1_=[x1+4.615168539325843, y1+37.79213483146067, x1+4.441011235955056, y1+37.70505617977528, x1+4.353932584269662, y1+37.61797752808988, x1+4.26685393258427, y1+37.5308988764045, x1+4.092696629213483, y1+37.443820224719104, x1+4.00561797752809, y1+37.35674157303371, x1+3.9185393258426964, y1+37.26966292134831, x1+3.8314606741573036, y1+37.18258426966292, x1+3.7443820224719104, y1+37.09550561797753, x1+3.657303370786517, y1+37.008426966292134, x1+3.5702247191011236, y1+36.921348314606746, x1+3.48314606741573, y1+36.83426966292135, x1+3.396067415730337, y1+36.747191011235955, x1+3.308988764044944, y1+36.66011235955056, x1+3.2219101123595513, y1+36.573033707865164, x1+3.134831460674157, y1+36.485955056179776, x1+3.047752808988764, y1+36.39887640449438, x1+2.960674157303371, y1+36.311797752808985, x1+2.8735955056179776, y1+36.224719101123604, x1+2.7865168539325844, y1+36.137640449438194, x1+2.6994382022471908, y1+36.05056179775281, x1+2.612359550561798, y1+35.96348314606741, x1+2.5252808988764044, y1+35.87640449438202, x1+2.4382022471910116, y1+35.789325842696634, x1+2.3511235955056176, y1+35.70224719101123, x1+2.2640449438202253, y1+35.61516853932584, x1+2.176966292134831, y1+35.52808988764045, x1+2.0898876404494384, y1+35.44101123595505, x1+2.002808988764045, y1+35.353932584269664, x1+1.9157303370786518, y1+35.26685393258427, x1+1.8286516853932584, y1+35.17977528089888, x1+1.741573033707865, y1+35.092696629213485, x1+1.741573033707865, y1+35.00561797752809, x1+1.654494382022472, y1+34.918539325842694, x1+1.5674157303370786, y1+34.8314606741573, x1+1.4803370786516854, y1+34.74438202247191, x1+1.4803370786516854, y1+34.657303370786515, x1+1.4803370786516854, y1+34.57022471910113, x1+1.4803370786516854, y1+34.48314606741573, x1+1.5674157303370786, y1+34.396067415730336, x1+1.5674157303370786, y1+34.30898876404495, x1+1.654494382022472, y1+34.221910112359545, x1+1.654494382022472, y1+34.13483146067416, x1+1.741573033707865, y1+34.04775280898877, x1+1.8286516853932584, y1+33.960674157303366, x1+1.9157303370786518, y1+33.873595505617985, x1+2.002808988764045, y1+33.786516853932575, x1+2.176966292134831, y1+33.69943820224719, x1+2.2640449438202253, y1+33.6123595505618, x1+2.3511235955056176, y1+33.52528089887641, x1+2.4382022471910116, y1+33.438202247191015, x1+2.5252808988764044, y1+33.35112359550562, x1+2.6994382022471908, y1+33.26404494382023, x1+2.7865168539325844, y1+33.17696629213483, x1+2.960674157303371, y1+33.08988764044944, x1+3.047752808988764, y1+33.002808988764045, x1+3.134831460674157, y1+32.91573033707865, x1+3.308988764044944, y1+32.82865168539326, x1+3.396067415730337, y1+32.741573033707866, x1+3.5702247191011236, y1+32.65449438202247, x1+3.7443820224719104, y1+32.567415730337075, x1+3.8314606741573036, y1+32.48033707865169, x1+4.00561797752809, y1+32.39325842696629, x1+4.179775280898877, y1+32.306179775280896, x1+4.353932584269662, y1+32.21910112359551, x1+4.5280898876404505, y1+32.13202247191012, x1+4.702247191011235, y1+32.04494382022472, x1+4.876404494382023, y1+31.957865168539325, x1+5.137640449438203, y1+31.870786516853933, x1+5.311797752808989, y1+31.78370786516854, x1+5.573033707865169, y1+31.696629213483146, x1+5.747191011235955, y1+31.60955056179775, x1+6.008426966292135, y1+31.522471910112362, x1+6.269662921348314, y1+31.435393258426963, x1+6.617977528089888, y1+31.34831460674157, x1+6.96629213483146, y1+31.26123595505618, x1+7.314606741573034, y1+31.17415730337079, x1+7.662921348314607, y1+31.087078651685392, x1+8.27247191011236, y1+31.0, x1+9.40449438202247, y1+30.912921348314608, x1+14.71629213483146, y1+30.82584269662921, x1+15.151685393258427, y1+30.73876404494382, x1+15.5, y1+30.65168539325843, x1+15.761235955056181, y1+30.56460674157303, x1+16.02247191011236, y1+30.477528089887645, x1+16.196629213483146, y1+30.39044943820225, x1+16.370786516853933, y1+30.303370786516854, x1+16.54494382022472, y1+30.21629213483146, x1+16.632022471910116, y1+30.129213483146067, x1+16.719101123595507, y1+30.042134831460675, x1+16.370786516853933, y1+29.955056179775283, x1+16.02247191011236, y1+29.867977528089888, x1+15.674157303370785, y1+29.780898876404493, x1+15.325842696629215, y1+29.693820224719097, x1+15.064606741573034, y1+29.606741573033705, x1+14.803370786516853, y1+29.519662921348313, x1+14.542134831460675, y1+29.43258426966292, x1+14.280898876404494, y1+29.345505617977526, x1+14.019662921348313, y1+29.258426966292134, x1+13.758426966292134, y1+29.171348314606735, x1+13.584269662921349, y1+29.08426966292135, x1+13.323033707865168, y1+28.997191011235955, x1+13.14887640449438, y1+28.91011235955056, x1+12.974719101123595, y1+28.82303370786517, x1+12.80056179775281, y1+28.73595505617978, x1+12.539325842696629, y1+28.648876404494388, x1+12.365168539325843, y1+28.56179775280899, x1+12.191011235955056, y1+28.474719101123593, x1+12.01685393258427, y1+28.3876404494382, x1+11.842696629213483, y1+28.30056179775281, x1+11.668539325842696, y1+28.213483146067418, x1+11.581460674157302, y1+28.126404494382026, x1+11.407303370786515, y1+28.039325842696627, x1+11.320224719101123, y1+27.952247191011235, x1+11.233146067415731, y1+27.86516853932584, x1+11.233146067415731, y1+27.778089887640448, x1+11.146067415730338, y1+27.691011235955056, x1+11.146067415730338, y1+27.603932584269668, x1+11.146067415730338, y1+27.51685393258427, x1+11.146067415730338, y1+27.429775280898877, x1+11.146067415730338, y1+27.342696629213478, x1+11.146067415730338, y1+27.255617977528093, x1+11.146067415730338, y1+27.168539325842698, x1+11.233146067415731, y1+27.081460674157302, x1+11.233146067415731, y1+26.994382022471907, x1+11.233146067415731, y1+26.907303370786522, x1+11.233146067415731, y1+26.820224719101123, x1+11.233146067415731, y1+26.73314606741573, x1+11.320224719101123, y1+26.646067415730336, x1+11.320224719101123, y1+26.558988764044944, x1+11.320224719101123, y1+26.471910112359552, x1+11.320224719101123, y1+26.38483146067416, x1+11.407303370786515, y1+26.29775280898876, x1+11.407303370786515, y1+26.21067415730337, x1+11.407303370786515, y1+26.123595505617974, x1+11.407303370786515, y1+26.036516853932582, x1+11.49438202247191, y1+25.94943820224719, x1+11.49438202247191, y1+25.8623595505618, x1+11.49438202247191, y1+25.77528089887641, x1+11.49438202247191, y1+25.68820224719101, x1+11.581460674157302, y1+25.60112359550562, x1+11.581460674157302, y1+25.51404494382022, x1+11.581460674157302, y1+25.42696629213483, x1+11.581460674157302, y1+25.33988764044944, x1+11.668539325842696, y1+25.25280898876405, x1+11.668539325842696, y1+25.16573033707865, x1+11.668539325842696, y1+25.078651685393258, x1+11.668539325842696, y1+24.991573033707866, x1+11.75561797752809, y1+24.904494382022474, x1+11.75561797752809, y1+24.81741573033708, x1+11.75561797752809, y1+24.730337078651687, x1+11.75561797752809, y1+24.643258426966295, x1+11.75561797752809, y1+24.5561797752809, x1+11.842696629213483, y1+24.469101123595504, x1+11.842696629213483, y1+24.382022471910112, x1+11.842696629213483, y1+24.29494382022472, x1+11.929775280898875, y1+24.207865168539325, x1+11.929775280898875, y1+24.120786516853933, x1+11.929775280898875, y1+24.03370786516854, x1+11.929775280898875, y1+23.946629213483146, x1+11.929775280898875, y1+23.85955056179775, x1+12.01685393258427, y1+23.77247191011236, x1+12.01685393258427, y1+23.685393258426966, x1+12.01685393258427, y1+23.598314606741575, x1+12.01685393258427, y1+23.51123595505618, x1+12.103932584269662, y1+23.42415730337079, x1+12.103932584269662, y1+23.337078651685392, x1+12.103932584269662, y1+23.25, x1+12.103932584269662, y1+23.162921348314605, x1+12.191011235955056, y1+23.075842696629216, x1+12.191011235955056, y1+22.98876404494382, x1+12.191011235955056, y1+22.90168539325843, x1+12.191011235955056, y1+22.81460674157303, x1+12.103932584269662, y1+22.72752808988764, x1+12.01685393258427, y1+22.640449438202246, x1+11.929775280898875, y1+22.553370786516854, x1+11.842696629213483, y1+22.466292134831463, x1+11.668539325842696, y1+22.37921348314607, x1+11.581460674157302, y1+22.292134831460675, x1+11.49438202247191, y1+22.20505617977528, x1+11.407303370786515, y1+22.117977528089884, x1+11.233146067415731, y1+22.030898876404493, x1+11.146067415730338, y1+21.9438202247191, x1+11.058988764044942, y1+21.856741573033712, x1+10.97191011235955, y1+21.769662921348317, x1+10.884831460674159, y1+21.68258426966292, x1+10.797752808988763, y1+21.595505617977526, x1+10.710674157303371, y1+21.508426966292134, x1+10.710674157303371, y1+21.421348314606742, x1+10.623595505617978, y1+21.33426966292135, x1+10.536516853932582, y1+21.247191011235955, x1+10.449438202247192, y1+21.160112359550563, x1+10.362359550561797, y1+21.073033707865164, x1+10.362359550561797, y1+20.985955056179773, x1+10.275280898876407, y1+20.898876404494384, x1+10.188202247191011, y1+20.81179775280899, x1+10.101123595505618, y1+20.724719101123593, x1+10.101123595505618, y1+20.637640449438205, x1+10.014044943820227, y1+20.550561797752813, x1+10.014044943820227, y1+20.463483146067414, x1+9.926966292134832, y1+20.376404494382022, x1+9.839887640449437, y1+20.289325842696627, x1+9.839887640449437, y1+20.202247191011235, x1+9.752808988764047, y1+20.115168539325843, x1+9.752808988764047, y1+20.028089887640455, x1+9.665730337078651, y1+19.941011235955056, x1+9.665730337078651, y1+19.853932584269664, x1+9.578651685393258, y1+19.76685393258427, x1+9.578651685393258, y1+19.679775280898873, x1+9.491573033707866, y1+19.592696629213485, x1+9.491573033707866, y1+19.505617977528093, x1+9.40449438202247, y1+19.418539325842698, x1+9.40449438202247, y1+19.331460674157302, x1+9.40449438202247, y1+19.24438202247191, x1+9.317415730337078, y1+19.157303370786515, x1+9.317415730337078, y1+19.070224719101127, x1+9.317415730337078, y1+18.98314606741573, x1+9.230337078651687, y1+18.896067415730336, x1+9.230337078651687, y1+18.80898876404494, x1+9.230337078651687, y1+18.721910112359552, x1+9.143258426966291, y1+18.634831460674157, x1+9.143258426966291, y1+18.547752808988765, x1+9.143258426966291, y1+18.460674157303373, x1+9.056179775280901, y1+18.373595505617978, x1+9.056179775280901, y1+18.286516853932582, x1+9.056179775280901, y1+18.19943820224719, x1+9.056179775280901, y1+18.112359550561802, x1+8.969101123595506, y1+18.025280898876407, x1+8.969101123595506, y1+17.93820224719101, x1+8.969101123595506, y1+17.851123595505616, x1+8.969101123595506, y1+17.764044943820224, x1+8.969101123595506, y1+17.676966292134832, x1+8.969101123595506, y1+17.58988764044944, x1+8.969101123595506, y1+17.502808988764045, x1+8.969101123595506, y1+17.41573033707865, x1+8.969101123595506, y1+17.328651685393258, x1+8.969101123595506, y1+17.241573033707866, x1+8.969101123595506, y1+17.154494382022474, x1+8.969101123595506, y1+17.06741573033708, x1+8.882022471910112, y1+16.980337078651683, x1+8.882022471910112, y1+16.893258426966288, x1+8.882022471910112, y1+16.8061797752809, x1+8.882022471910112, y1+16.719101123595507, x1+8.882022471910112, y1+16.632022471910116, x1+8.882022471910112, y1+16.54494382022472, x1+8.882022471910112, y1+16.457865168539325, x1+8.969101123595506, y1+16.370786516853933, x1+8.969101123595506, y1+16.283707865168537, x1+8.969101123595506, y1+16.196629213483146, x1+8.969101123595506, y1+16.109550561797754, x1+8.969101123595506, y1+16.02247191011236, x1+8.969101123595506, y1+15.935393258426966, x1+8.969101123595506, y1+15.848314606741573, x1+8.969101123595506, y1+15.761235955056181, x1+8.969101123595506, y1+15.674157303370785, x1+8.969101123595506, y1+15.587078651685395, x1+8.969101123595506, y1+15.5, x1+9.056179775280901, y1+15.412921348314605, x1+9.056179775280901, y1+15.325842696629215, x1+9.056179775280901, y1+15.238764044943823, x1+9.056179775280901, y1+15.151685393258427, x1+9.056179775280901, y1+15.064606741573034, x1+9.143258426966291, y1+14.977528089887642, x1+9.143258426966291, y1+14.890449438202246, x1+9.143258426966291, y1+14.803370786516853, x1+9.143258426966291, y1+14.71629213483146, x1+9.230337078651687, y1+14.629213483146067, x1+9.230337078651687, y1+14.542134831460675, x1+9.230337078651687, y1+14.45505617977528, x1+9.317415730337078, y1+14.36797752808989, x1+9.317415730337078, y1+14.280898876404494, x1+9.40449438202247, y1+14.1938202247191, x1+9.40449438202247, y1+14.106741573033709, x1+9.40449438202247, y1+14.019662921348313, x1+9.491573033707866, y1+13.93258426966292, x1+9.491573033707866, y1+13.845505617977528, x1+9.578651685393258, y1+13.758426966292134, x1+9.578651685393258, y1+13.671348314606739, x1+9.665730337078651, y1+13.584269662921349, x1+9.665730337078651, y1+13.497191011235953, x1+9.752808988764047, y1+13.410112359550562, x1+9.752808988764047, y1+13.323033707865168, x1+9.839887640449437, y1+13.235955056179776, x1+9.839887640449437, y1+13.14887640449438, x1+9.926966292134832, y1+13.061797752808987, x1+9.926966292134832, y1+12.974719101123595, x1+10.014044943820227, y1+12.887640449438205, x1+10.014044943820227, y1+12.80056179775281, x1+10.101123595505618, y1+12.713483146067414, x1+10.188202247191011, y1+12.626404494382024, x1+10.188202247191011, y1+12.539325842696629, x1+10.275280898876407, y1+12.452247191011237, x1+10.362359550561797, y1+12.365168539325843, x1+10.362359550561797, y1+12.27808988764045, x1+10.449438202247192, y1+12.191011235955056, x1+10.536516853932582, y1+12.103932584269662, x1+10.623595505617978, y1+12.01685393258427, x1+10.623595505617978, y1+11.929775280898875, x1+10.710674157303371, y1+11.842696629213483, x1+10.797752808988763, y1+11.75561797752809, x1+10.884831460674159, y1+11.668539325842696, x1+10.97191011235955, y1+11.581460674157302, x1+10.97191011235955, y1+11.49438202247191, x1+11.058988764044942, y1+11.407303370786515, x1+11.146067415730338, y1+11.320224719101123, x1+11.233146067415731, y1+11.233146067415731, x1+11.320224719101123, y1+11.146067415730338, x1+11.407303370786515, y1+11.058988764044942, x1+11.49438202247191, y1+10.97191011235955, x1+11.581460674157302, y1+10.884831460674159, x1+11.668539325842696, y1+10.797752808988763, x1+11.75561797752809, y1+10.710674157303371, x1+11.842696629213483, y1+10.623595505617978, x1+12.01685393258427, y1+10.536516853932582, x1+12.103932584269662, y1+10.449438202247192, x1+12.191011235955056, y1+10.362359550561797, x1+12.27808988764045, y1+10.275280898876407, x1+12.365168539325843, y1+10.188202247191011, x1+12.452247191011237, y1+10.101123595505618, x1+12.626404494382024, y1+10.014044943820227, x1+12.713483146067414, y1+9.926966292134832, x1+12.80056179775281, y1+9.839887640449437, x1+12.887640449438205, y1+9.752808988764047, x1+13.061797752808987, y1+9.665730337078651, x1+13.14887640449438, y1+9.578651685393258, x1+13.235955056179776, y1+9.491573033707866, x1+13.410112359550562, y1+9.40449438202247, x1+13.497191011235953, y1+9.317415730337078, x1+13.584269662921349, y1+9.230337078651687, x1+13.758426966292134, y1+9.143258426966291, x1+13.845505617977528, y1+9.056179775280901, x1+13.93258426966292, y1+8.969101123595506, x1+14.019662921348313, y1+8.882022471910112, x1+14.1938202247191, y1+8.79494382022472, x1+14.280898876404494, y1+8.707865168539325, x1+14.45505617977528, y1+8.620786516853933, x1+14.542134831460675, y1+8.53370786516854, x1+14.629213483146067, y1+8.446629213483144, x1+14.803370786516853, y1+8.359550561797754, x1+14.890449438202246, y1+8.27247191011236, x1+15.064606741573034, y1+8.185393258426966, x1+15.151685393258427, y1+8.098314606741573, x1+15.238764044943823, y1+8.01123595505618, x1+15.412921348314605, y1+7.924157303370786, x1+15.5, y1+7.837078651685393, x1+15.674157303370785, y1+7.75, x1+15.761235955056181, y1+7.662921348314607, x1+15.848314606741573, y1+7.575842696629214, x1+16.02247191011236, y1+7.488764044943821, x1+16.109550561797754, y1+7.401685393258426, x1+16.283707865168537, y1+7.314606741573034, x1+16.370786516853933, y1+7.22752808988764, x1+16.457865168539325, y1+7.140449438202247, x1+16.632022471910116, y1+7.0533707865168545, x1+16.719101123595507, y1+6.96629213483146, x1+16.8061797752809, y1+6.879213483146067, x1+16.980337078651683, y1+6.792134831460674, x1+17.06741573033708, y1+6.705056179775281, x1+17.154494382022474, y1+6.617977528089888, x1+17.328651685393258, y1+6.5308988764044935, x1+17.41573033707865, y1+6.4438202247191025, x1+17.502808988764045, y1+6.356741573033707, x1+17.676966292134832, y1+6.269662921348314, x1+17.764044943820224, y1+6.182584269662922, x1+17.764044943820224, y1+6.095505617977528, x1+17.764044943820224, y1+6.008426966292135, x1+17.676966292134832, y1+5.921348314606742, x1+17.58988764044944, y1+5.834269662921348, x1+17.502808988764045, y1+5.747191011235955, x1+17.41573033707865, y1+5.660112359550562, x1+17.328651685393258, y1+5.573033707865169, x1+17.241573033707866, y1+5.485955056179775, x1+17.154494382022474, y1+5.3988764044943816, x1+17.06741573033708, y1+5.311797752808989, x1+17.06741573033708, y1+5.224719101123596, x1+16.980337078651683, y1+5.137640449438203, x1+16.893258426966288, y1+5.050561797752809, x1+16.893258426966288, y1+4.963483146067416, x1+16.8061797752809, y1+4.876404494382023, x1+16.8061797752809, y1+4.789325842696629, x1+16.719101123595507, y1+4.702247191011235, x1+16.719101123595507, y1+4.615168539325843, x1+16.719101123595507, y1+4.5280898876404505, x1+16.632022471910116, y1+4.441011235955056, x1+16.632022471910116, y1+4.353932584269662, x1+16.632022471910116, y1+4.26685393258427, x1+16.632022471910116, y1+4.179775280898877, x1+16.54494382022472, y1+4.092696629213483, x1+16.54494382022472, y1+4.00561797752809, x1+16.54494382022472, y1+3.9185393258426964, x1+16.54494382022472, y1+3.8314606741573036, x1+16.54494382022472, y1+3.7443820224719104, x1+16.54494382022472, y1+3.657303370786517, x1+16.54494382022472, y1+3.5702247191011236, x1+16.54494382022472, y1+3.48314606741573, x1+16.54494382022472, y1+3.396067415730337, x1+16.54494382022472, y1+3.308988764044944, x1+16.54494382022472, y1+3.2219101123595513, x1+16.632022471910116, y1+3.134831460674157, x1+16.632022471910116, y1+3.047752808988764, x1+16.632022471910116, y1+2.960674157303371, x1+16.632022471910116, y1+2.8735955056179776, x1+16.632022471910116, y1+2.7865168539325844, x1+16.719101123595507, y1+2.6994382022471908, x1+16.719101123595507, y1+2.612359550561798, x1+16.8061797752809, y1+2.5252808988764044, x1+16.8061797752809, y1+2.4382022471910116, x1+16.893258426966288, y1+2.3511235955056176, x1+16.893258426966288, y1+2.2640449438202253, x1+16.980337078651683, y1+2.176966292134831, x1+16.980337078651683, y1+2.0898876404494384, x1+17.06741573033708, y1+2.002808988764045, x1+17.154494382022474, y1+1.9157303370786518, x1+17.241573033707866, y1+1.8286516853932584, x1+17.328651685393258, y1+1.741573033707865, x1+17.41573033707865, y1+1.654494382022472, x1+17.502808988764045, y1+1.5674157303370786, x1+17.58988764044944, y1+1.4803370786516854, x1+17.676966292134832, y1+1.3932584269662922, x1+17.851123595505616, y1+1.306179775280899, x1+18.025280898876407, y1+1.2191011235955058, x1+18.112359550561802, y1+1.1320224719101126, x1+18.286516853932582, y1+1.0449438202247192, x1+18.547752808988765, y1+0.9578651685393259, x1+18.98314606741573, y1+0.8707865168539325, x1+19.418539325842698, y1+0.8707865168539325, x1+19.679775280898873, y1+0.8707865168539325, x1+20.115168539325843, y1+0.9578651685393259, x1+20.463483146067414, y1+1.1320224719101126, x1+20.637640449438205, y1+1.2191011235955058, x1+20.724719101123593, y1+1.306179775280899, x1+20.898876404494384, y1+1.3932584269662922, x1+20.985955056179773, y1+1.4803370786516854, x1+21.073033707865164, y1+1.5674157303370786, x1+21.160112359550563, y1+1.654494382022472, x1+21.247191011235955, y1+1.741573033707865, x1+21.33426966292135, y1+1.8286516853932584, x1+21.421348314606742, y1+1.9157303370786518, x1+21.508426966292134, y1+2.002808988764045, x1+21.595505617977526, y1+2.0898876404494384, x1+21.595505617977526, y1+2.176966292134831, x1+21.68258426966292, y1+2.2640449438202253, x1+21.68258426966292, y1+2.3511235955056176, x1+21.769662921348317, y1+2.4382022471910116, x1+21.769662921348317, y1+2.5252808988764044, x1+21.856741573033712, y1+2.612359550561798, x1+21.856741573033712, y1+2.6994382022471908, x1+21.9438202247191, y1+2.7865168539325844, x1+21.9438202247191, y1+2.8735955056179776, x1+21.9438202247191, y1+2.960674157303371, x1+21.9438202247191, y1+3.047752808988764, x1+22.030898876404493, y1+3.134831460674157, x1+22.030898876404493, y1+3.2219101123595513, x1+22.030898876404493, y1+3.308988764044944, x1+22.030898876404493, y1+3.396067415730337, x1+22.030898876404493, y1+3.48314606741573, x1+22.030898876404493, y1+3.5702247191011236, x1+22.030898876404493, y1+3.657303370786517, x1+22.030898876404493, y1+3.7443820224719104, x1+22.030898876404493, y1+3.8314606741573036, x1+22.030898876404493, y1+3.9185393258426964, x1+22.030898876404493, y1+4.00561797752809, x1+22.030898876404493, y1+4.092696629213483, x1+22.030898876404493, y1+4.179775280898877, x1+22.030898876404493, y1+4.26685393258427, x1+21.9438202247191, y1+4.353932584269662, x1+21.9438202247191, y1+4.441011235955056, x1+21.9438202247191, y1+4.5280898876404505, x1+21.856741573033712, y1+4.615168539325843, x1+21.856741573033712, y1+4.702247191011235, x1+21.769662921348317, y1+4.789325842696629, x1+21.769662921348317, y1+4.876404494382023, x1+21.68258426966292, y1+4.963483146067416, x1+21.68258426966292, y1+5.050561797752809, x1+21.595505617977526, y1+5.137640449438203, x1+21.508426966292134, y1+5.224719101123596, x1+21.508426966292134, y1+5.311797752808989, x1+21.421348314606742, y1+5.3988764044943816, x1+21.33426966292135, y1+5.485955056179775, x1+21.247191011235955, y1+5.573033707865169, x1+21.160112359550563, y1+5.660112359550562, x1+21.073033707865164, y1+5.747191011235955, x1+20.985955056179773, y1+5.834269662921348, x1+20.898876404494384, y1+5.921348314606742, x1+20.898876404494384, y1+6.008426966292135, x1+20.81179775280899, y1+6.095505617977528, x1+20.81179775280899, y1+6.182584269662922, x1+20.985955056179773, y1+6.269662921348314, x1+21.073033707865164, y1+6.356741573033707, x1+21.160112359550563, y1+6.4438202247191025, x1+21.33426966292135, y1+6.5308988764044935, x1+21.421348314606742, y1+6.617977528089888, x1+21.508426966292134, y1+6.705056179775281, x1+21.595505617977526, y1+6.792134831460674, x1+21.769662921348317, y1+6.879213483146067, x1+21.856741573033712, y1+6.96629213483146, x1+21.9438202247191, y1+7.0533707865168545, x1+22.117977528089884, y1+7.140449438202247, x1+22.20505617977528, y1+7.22752808988764, x1+22.37921348314607, y1+7.314606741573034, x1+22.466292134831463, y1+7.401685393258426, x1+22.553370786516854, y1+7.488764044943821, x1+22.72752808988764, y1+7.575842696629214, x1+22.81460674157303, y1+7.662921348314607, x1+22.98876404494382, y1+7.75, x1+23.075842696629216, y1+7.837078651685393, x1+23.162921348314605, y1+7.924157303370786, x1+23.337078651685392, y1+8.01123595505618, x1+23.42415730337079, y1+8.098314606741573, x1+23.598314606741575, y1+8.185393258426966, x1+23.685393258426966, y1+8.27247191011236, x1+23.77247191011236, y1+8.359550561797754, x1+23.946629213483146, y1+8.446629213483144, x1+24.03370786516854, y1+8.53370786516854, x1+24.120786516853933, y1+8.620786516853933, x1+24.29494382022472, y1+8.707865168539325, x1+24.382022471910112, y1+8.79494382022472, x1+24.5561797752809, y1+8.882022471910112, x1+24.643258426966295, y1+8.969101123595506, x1+24.730337078651687, y1+9.056179775280901, x1+24.904494382022474, y1+9.143258426966291, x1+24.991573033707866, y1+9.230337078651687, x1+25.078651685393258, y1+9.317415730337078, x1+25.25280898876405, y1+9.40449438202247, x1+25.33988764044944, y1+9.491573033707866, x1+25.42696629213483, y1+9.578651685393258, x1+25.51404494382022, y1+9.665730337078651, x1+25.68820224719101, y1+9.752808988764047, x1+25.77528089887641, y1+9.839887640449437, x1+25.8623595505618, y1+9.926966292134832, x1+25.94943820224719, y1+10.014044943820227, x1+26.123595505617974, y1+10.101123595505618, x1+26.21067415730337, y1+10.188202247191011, x1+26.29775280898876, y1+10.275280898876407, x1+26.38483146067416, y1+10.362359550561797, x1+26.471910112359552, y1+10.449438202247192, x1+26.558988764044944, y1+10.536516853932582, x1+26.73314606741573, y1+10.623595505617978, x1+26.820224719101123, y1+10.710674157303371, x1+26.907303370786522, y1+10.797752808988763, x1+26.994382022471907, y1+10.884831460674159, x1+27.081460674157302, y1+10.97191011235955, x1+27.168539325842698, y1+11.058988764044942, x1+27.255617977528093, y1+11.146067415730338, x1+27.342696629213478, y1+11.233146067415731, x1+27.429775280898877, y1+11.320224719101123, x1+27.51685393258427, y1+11.407303370786515, x1+27.603932584269668, y1+11.49438202247191, x1+27.691011235955056, y1+11.581460674157302, x1+27.778089887640448, y1+11.668539325842696, x1+27.778089887640448, y1+11.75561797752809, x1+27.86516853932584, y1+11.842696629213483, x1+27.952247191011235, y1+11.929775280898875, x1+28.039325842696627, y1+12.01685393258427, x1+28.039325842696627, y1+12.103932584269662, x1+28.126404494382026, y1+12.191011235955056, x1+28.213483146067418, y1+12.27808988764045, x1+28.30056179775281, y1+12.365168539325843, x1+28.30056179775281, y1+12.452247191011237, x1+28.3876404494382, y1+12.539325842696629, x1+28.474719101123593, y1+12.626404494382024, x1+28.474719101123593, y1+12.713483146067414, x1+28.56179775280899, y1+12.80056179775281, x1+28.56179775280899, y1+12.887640449438205, x1+28.648876404494388, y1+12.974719101123595, x1+28.648876404494388, y1+13.061797752808987, x1+28.73595505617978, y1+13.14887640449438, x1+28.82303370786517, y1+13.235955056179776, x1+28.82303370786517, y1+13.323033707865168, x1+28.91011235955056, y1+13.410112359550562, x1+28.91011235955056, y1+13.497191011235953, x1+28.997191011235955, y1+13.584269662921349, x1+28.997191011235955, y1+13.671348314606739, x1+28.997191011235955, y1+13.758426966292134, x1+29.08426966292135, y1+13.845505617977528, x1+29.08426966292135, y1+13.93258426966292, x1+29.171348314606735, y1+14.019662921348313, x1+29.171348314606735, y1+14.106741573033709, x1+29.258426966292134, y1+14.1938202247191, x1+29.258426966292134, y1+14.280898876404494, x1+29.258426966292134, y1+14.36797752808989, x1+29.345505617977526, y1+14.45505617977528, x1+29.345505617977526, y1+14.542134831460675, x1+29.345505617977526, y1+14.629213483146067, x1+29.43258426966292, y1+14.71629213483146, x1+29.43258426966292, y1+14.803370786516853, x1+29.43258426966292, y1+14.890449438202246, x1+29.519662921348313, y1+14.977528089887642, x1+29.519662921348313, y1+15.064606741573034, x1+29.519662921348313, y1+15.151685393258427, x1+29.519662921348313, y1+15.238764044943823, x1+29.519662921348313, y1+15.325842696629215, x1+29.606741573033705, y1+15.412921348314605, x1+29.606741573033705, y1+15.5, x1+29.606741573033705, y1+15.587078651685395, x1+29.606741573033705, y1+15.674157303370785, x1+29.606741573033705, y1+15.761235955056181, x1+29.606741573033705, y1+15.848314606741573, x1+29.606741573033705, y1+15.935393258426966, x1+29.606741573033705, y1+16.02247191011236, x1+29.606741573033705, y1+16.109550561797754, x1+29.693820224719097, y1+16.196629213483146, x1+29.693820224719097, y1+16.283707865168537, x1+29.693820224719097, y1+16.370786516853933, x1+29.693820224719097, y1+16.457865168539325, x1+29.693820224719097, y1+16.54494382022472, x1+29.693820224719097, y1+16.632022471910116, x1+29.693820224719097, y1+16.719101123595507, x1+29.693820224719097, y1+16.8061797752809, x1+29.693820224719097, y1+16.893258426966288, x1+29.693820224719097, y1+16.980337078651683, x1+29.693820224719097, y1+17.06741573033708, x1+29.693820224719097, y1+17.154494382022474, x1+29.693820224719097, y1+17.241573033707866, x1+29.693820224719097, y1+17.328651685393258, x1+29.693820224719097, y1+17.41573033707865, x1+29.606741573033705, y1+17.502808988764045, x1+29.606741573033705, y1+17.58988764044944, x1+29.606741573033705, y1+17.676966292134832, x1+29.606741573033705, y1+17.764044943820224, x1+29.606741573033705, y1+17.851123595505616, x1+29.606741573033705, y1+17.93820224719101, x1+29.606741573033705, y1+18.025280898876407, x1+29.606741573033705, y1+18.112359550561802, x1+29.519662921348313, y1+18.19943820224719, x1+29.519662921348313, y1+18.286516853932582, x1+29.519662921348313, y1+18.373595505617978, x1+29.519662921348313, y1+18.460674157303373, x1+29.43258426966292, y1+18.547752808988765, x1+29.43258426966292, y1+18.634831460674157, x1+29.43258426966292, y1+18.721910112359552, x1+29.345505617977526, y1+18.80898876404494, x1+29.345505617977526, y1+18.896067415730336, x1+29.345505617977526, y1+18.98314606741573, x1+29.258426966292134, y1+19.070224719101127, x1+29.258426966292134, y1+19.157303370786515, x1+29.171348314606735, y1+19.24438202247191, x1+29.171348314606735, y1+19.331460674157302, x1+29.171348314606735, y1+19.418539325842698, x1+29.08426966292135, y1+19.505617977528093, x1+29.08426966292135, y1+19.592696629213485, x1+28.997191011235955, y1+19.679775280898873, x1+28.997191011235955, y1+19.76685393258427, x1+28.91011235955056, y1+19.853932584269664, x1+28.91011235955056, y1+19.941011235955056, x1+28.82303370786517, y1+20.028089887640455, x1+28.82303370786517, y1+20.115168539325843, x1+28.73595505617978, y1+20.202247191011235, x1+28.73595505617978, y1+20.289325842696627, x1+28.648876404494388, y1+20.376404494382022, x1+28.648876404494388, y1+20.463483146067414, x1+28.56179775280899, y1+20.550561797752813, x1+28.474719101123593, y1+20.637640449438205, x1+28.474719101123593, y1+20.724719101123593, x1+28.3876404494382, y1+20.81179775280899, x1+28.30056179775281, y1+20.898876404494384, x1+28.30056179775281, y1+20.985955056179773, x1+28.213483146067418, y1+21.073033707865164, x1+28.126404494382026, y1+21.160112359550563, x1+28.039325842696627, y1+21.247191011235955, x1+28.039325842696627, y1+21.33426966292135, x1+27.952247191011235, y1+21.421348314606742, x1+27.86516853932584, y1+21.508426966292134, x1+27.778089887640448, y1+21.595505617977526, x1+27.691011235955056, y1+21.68258426966292, x1+27.603932584269668, y1+21.769662921348317, x1+27.51685393258427, y1+21.856741573033712, x1+27.429775280898877, y1+21.9438202247191, x1+27.342696629213478, y1+22.030898876404493, x1+27.255617977528093, y1+22.117977528089884, x1+27.081460674157302, y1+22.20505617977528, x1+26.994382022471907, y1+22.292134831460675, x1+26.907303370786522, y1+22.37921348314607, x1+26.820224719101123, y1+22.466292134831463, x1+26.646067415730336, y1+22.553370786516854, x1+26.558988764044944, y1+22.640449438202246, x1+26.471910112359552, y1+22.72752808988764, x1+26.38483146067416, y1+22.81460674157303, x1+26.38483146067416, y1+22.90168539325843, x1+26.38483146067416, y1+22.98876404494382, x1+26.471910112359552, y1+23.075842696629216, x1+26.471910112359552, y1+23.162921348314605, x1+26.471910112359552, y1+23.25, x1+26.471910112359552, y1+23.337078651685392, x1+26.558988764044944, y1+23.42415730337079, x1+26.558988764044944, y1+23.51123595505618, x1+26.558988764044944, y1+23.598314606741575, x1+26.558988764044944, y1+23.685393258426966, x1+26.558988764044944, y1+23.77247191011236, x1+26.646067415730336, y1+23.85955056179775, x1+26.646067415730336, y1+23.946629213483146, x1+26.646067415730336, y1+24.03370786516854, x1+26.646067415730336, y1+24.120786516853933, x1+26.73314606741573, y1+24.207865168539325, x1+26.73314606741573, y1+24.29494382022472, x1+26.73314606741573, y1+24.382022471910112, x1+26.73314606741573, y1+24.469101123595504, x1+26.820224719101123, y1+24.5561797752809, x1+26.820224719101123, y1+24.643258426966295, x1+26.820224719101123, y1+24.730337078651687, x1+26.820224719101123, y1+24.81741573033708, x1+26.907303370786522, y1+24.904494382022474, x1+26.907303370786522, y1+24.991573033707866, x1+26.907303370786522, y1+25.078651685393258, x1+26.907303370786522, y1+25.16573033707865, x1+26.994382022471907, y1+25.25280898876405, x1+26.994382022471907, y1+25.33988764044944, x1+26.994382022471907, y1+25.42696629213483, x1+26.994382022471907, y1+25.51404494382022, x1+27.081460674157302, y1+25.60112359550562, x1+27.081460674157302, y1+25.68820224719101, x1+27.081460674157302, y1+25.77528089887641, x1+27.081460674157302, y1+25.8623595505618, x1+27.168539325842698, y1+25.94943820224719, x1+27.168539325842698, y1+26.036516853932582, x1+27.168539325842698, y1+26.123595505617974, x1+27.168539325842698, y1+26.21067415730337, x1+27.255617977528093, y1+26.29775280898876, x1+27.255617977528093, y1+26.38483146067416, x1+27.255617977528093, y1+26.471910112359552, x1+27.255617977528093, y1+26.558988764044944, x1+27.342696629213478, y1+26.646067415730336, x1+27.342696629213478, y1+26.73314606741573, x1+27.342696629213478, y1+26.820224719101123, x1+27.342696629213478, y1+26.907303370786522, x1+27.342696629213478, y1+26.994382022471907, x1+27.429775280898877, y1+27.081460674157302, x1+27.429775280898877, y1+27.168539325842698, x1+27.429775280898877, y1+27.255617977528093, x1+27.429775280898877, y1+27.342696629213478, x1+27.429775280898877, y1+27.429775280898877, x1+27.429775280898877, y1+27.51685393258427, x1+27.429775280898877, y1+27.603932584269668, x1+27.429775280898877, y1+27.691011235955056, x1+27.342696629213478, y1+27.778089887640448, x1+27.342696629213478, y1+27.86516853932584, x1+27.255617977528093, y1+27.952247191011235, x1+27.168539325842698, y1+28.039325842696627, x1+26.994382022471907, y1+28.126404494382026, x1+26.907303370786522, y1+28.213483146067418, x1+26.73314606741573, y1+28.30056179775281, x1+26.558988764044944, y1+28.3876404494382, x1+26.38483146067416, y1+28.474719101123593, x1+26.21067415730337, y1+28.56179775280899, x1+26.036516853932582, y1+28.648876404494388, x1+25.8623595505618, y1+28.73595505617978, x1+25.60112359550562, y1+28.82303370786517, x1+25.42696629213483, y1+28.91011235955056, x1+25.25280898876405, y1+28.997191011235955, x1+24.991573033707866, y1+29.08426966292135, x1+24.81741573033708, y1+29.171348314606735, x1+24.5561797752809, y1+29.258426966292134, x1+24.382022471910112, y1+29.345505617977526, x1+24.120786516853933, y1+29.43258426966292, x1+23.77247191011236, y1+29.519662921348313, x1+23.51123595505618, y1+29.606741573033705, x1+23.25, y1+29.693820224719097, x1+22.90168539325843, y1+29.780898876404493, x1+22.553370786516854, y1+29.867977528089888, x1+22.20505617977528, y1+29.955056179775283, x1+21.856741573033712, y1+30.042134831460675, x1+21.9438202247191, y1+30.129213483146067, x1+22.117977528089884, y1+30.21629213483146, x1+22.20505617977528, y1+30.303370786516854, x1+22.37921348314607, y1+30.39044943820225, x1+22.553370786516854, y1+30.477528089887645, x1+22.81460674157303, y1+30.56460674157303, x1+23.075842696629216, y1+30.65168539325843, x1+23.42415730337079, y1+30.73876404494382, x1+23.946629213483146, y1+30.82584269662921, x1+29.258426966292134, y1+30.912921348314608, x1+30.303370786516854, y1+31.0, x1+30.912921348314608, y1+31.087078651685392, x1+31.26123595505618, y1+31.17415730337079, x1+31.696629213483146, y1+31.26123595505618, x1+31.957865168539325, y1+31.34831460674157, x1+32.306179775280896, y1+31.435393258426963, x1+32.567415730337075, y1+31.522471910112362, x1+32.82865168539326, y1+31.60955056179775, x1+33.08988764044944, y1+31.696629213483146, x1+33.26404494382023, y1+31.78370786516854, x1+33.438202247191015, y1+31.870786516853933, x1+33.69943820224719, y1+31.957865168539325, x1+33.873595505617985, y1+32.04494382022472, x1+34.04775280898877, y1+32.13202247191012, x1+34.221910112359545, y1+32.21910112359551, x1+34.396067415730336, y1+32.306179775280896, x1+34.57022471910113, y1+32.39325842696629, x1+34.74438202247191, y1+32.48033707865169, x1+34.8314606741573, y1+32.567415730337075, x1+35.00561797752809, y1+32.65449438202247, x1+35.17977528089888, y1+32.741573033707866, x1+35.26685393258427, y1+32.82865168539326, x1+35.44101123595505, y1+32.91573033707865, x1+35.52808988764045, y1+33.002808988764045, x1+35.70224719101123, y1+33.08988764044944, x1+35.789325842696634, y1+33.17696629213483, x1+35.87640449438202, y1+33.26404494382023, x1+36.05056179775281, y1+33.35112359550562, x1+36.137640449438194, y1+33.438202247191015, x1+36.224719101123604, y1+33.52528089887641, x1+36.39887640449438, y1+33.6123595505618, x1+36.485955056179776, y1+33.69943820224719, x1+36.573033707865164, y1+33.786516853932575, x1+36.66011235955056, y1+33.873595505617985, x1+36.747191011235955, y1+33.960674157303366, x1+36.83426966292135, y1+34.04775280898877, x1+36.921348314606746, y1+34.13483146067416, x1+37.008426966292134, y1+34.221910112359545, x1+37.008426966292134, y1+34.30898876404495, x1+37.09550561797753, y1+34.396067415730336, x1+37.09550561797753, y1+34.48314606741573, x1+37.09550561797753, y1+34.57022471910113, x1+37.09550561797753, y1+34.657303370786515, x1+37.09550561797753, y1+34.74438202247191, x1+37.008426966292134, y1+34.8314606741573, x1+37.008426966292134, y1+34.918539325842694, x1+36.921348314606746, y1+35.00561797752809, x1+36.83426966292135, y1+35.092696629213485, x1+36.747191011235955, y1+35.17977528089888, x1+36.66011235955056, y1+35.26685393258427, x1+36.573033707865164, y1+35.353932584269664, x1+36.485955056179776, y1+35.44101123595505, x1+36.39887640449438, y1+35.52808988764045, x1+36.311797752808985, y1+35.61516853932584, x1+36.224719101123604, y1+35.70224719101123, x1+36.137640449438194, y1+35.789325842696634, x1+36.05056179775281, y1+35.87640449438202, x1+35.96348314606741, y1+35.96348314606741, x1+35.87640449438202, y1+36.05056179775281, x1+35.789325842696634, y1+36.137640449438194, x1+35.70224719101123, y1+36.224719101123604, x1+35.61516853932584, y1+36.311797752808985, x1+35.52808988764045, y1+36.39887640449438, x1+35.44101123595505, y1+36.485955056179776, x1+35.353932584269664, y1+36.573033707865164, x1+35.26685393258427, y1+36.66011235955056, x1+35.17977528089888, y1+36.747191011235955, x1+35.092696629213485, y1+36.83426966292135, x1+35.00561797752809, y1+36.921348314606746, x1+34.918539325842694, y1+37.008426966292134, x1+34.8314606741573, y1+37.09550561797753, x1+34.74438202247191, y1+37.18258426966292, x1+34.657303370786515, y1+37.26966292134831, x1+34.57022471910113, y1+37.35674157303371, x1+34.48314606741573, y1+37.443820224719104, x1+34.396067415730336, y1+37.5308988764045, x1+34.30898876404495, y1+37.61797752808988, x1+34.13483146067416, y1+37.70505617977528, x1+34.04775280898877, y1+37.79213483146067, x1+34.04775280898877, y1+37.79213483146067, x1+33.960674157303366, y1+37.79213483146067, x1+33.873595505617985, y1+37.79213483146067, x1+33.786516853932575, y1+37.79213483146067, x1+33.69943820224719, y1+37.70505617977528, x1+33.6123595505618, y1+37.70505617977528, x1+33.52528089887641, y1+37.61797752808988, x1+33.438202247191015, y1+37.5308988764045, x1+33.35112359550562, y1+37.5308988764045, x1+33.26404494382023, y1+37.443820224719104, x1+33.17696629213483, y1+37.35674157303371, x1+33.08988764044944, y1+37.35674157303371, x1+33.002808988764045, y1+37.26966292134831, x1+32.91573033707865, y1+37.18258426966292, x1+32.82865168539326, y1+37.09550561797753, x1+32.741573033707866, y1+37.09550561797753, x1+32.65449438202247, y1+37.008426966292134, x1+32.567415730337075, y1+36.921348314606746, x1+32.48033707865169, y1+36.921348314606746, x1+32.39325842696629, y1+36.83426966292135, x1+32.306179775280896, y1+36.747191011235955, x1+32.21910112359551, y1+36.747191011235955, x1+32.13202247191012, y1+36.66011235955056, x1+32.04494382022472, y1+36.66011235955056, x1+31.957865168539325, y1+36.573033707865164, x1+31.870786516853933, y1+36.573033707865164, x1+31.78370786516854, y1+36.485955056179776, x1+31.696629213483146, y1+36.39887640449438, x1+31.60955056179775, y1+36.39887640449438, x1+31.522471910112362, y1+36.39887640449438, x1+31.435393258426963, y1+36.311797752808985, x1+31.34831460674157, y1+36.311797752808985, x1+31.26123595505618, y1+36.224719101123604, x1+31.17415730337079, y1+36.224719101123604, x1+31.087078651685392, y1+36.137640449438194, x1+31.0, y1+36.137640449438194, x1+30.912921348314608, y1+36.05056179775281, x1+30.82584269662921, y1+36.05056179775281, x1+30.73876404494382, y1+36.05056179775281, x1+30.65168539325843, y1+35.96348314606741, x1+30.56460674157303, y1+35.96348314606741, x1+30.477528089887645, y1+35.87640449438202, x1+30.39044943820225, y1+35.87640449438202, x1+30.303370786516854, y1+35.87640449438202, x1+30.21629213483146, y1+35.87640449438202, x1+30.129213483146067, y1+35.789325842696634, x1+30.042134831460675, y1+35.789325842696634, x1+29.955056179775283, y1+35.789325842696634, x1+29.867977528089888, y1+35.70224719101123, x1+29.780898876404493, y1+35.70224719101123, x1+29.693820224719097, y1+35.70224719101123, x1+29.606741573033705, y1+35.70224719101123, x1+29.519662921348313, y1+35.70224719101123, x1+29.43258426966292, y1+35.70224719101123, x1+29.345505617977526, y1+35.61516853932584, x1+29.258426966292134, y1+35.61516853932584, x1+29.171348314606735, y1+35.61516853932584, x1+29.08426966292135, y1+35.61516853932584, x1+28.997191011235955, y1+35.61516853932584, x1+28.91011235955056, y1+35.61516853932584, x1+28.82303370786517, y1+35.52808988764045, x1+28.73595505617978, y1+35.52808988764045, x1+28.648876404494388, y1+35.52808988764045, x1+28.56179775280899, y1+35.52808988764045, x1+28.474719101123593, y1+35.52808988764045, x1+28.3876404494382, y1+35.52808988764045, x1+28.30056179775281, y1+35.52808988764045, x1+28.213483146067418, y1+35.52808988764045, x1+28.126404494382026, y1+35.52808988764045, x1+28.039325842696627, y1+35.44101123595505, x1+27.952247191011235, y1+35.44101123595505, x1+27.86516853932584, y1+35.44101123595505, x1+27.778089887640448, y1+35.44101123595505, x1+27.691011235955056, y1+35.44101123595505, x1+27.603932584269668, y1+35.44101123595505, x1+27.51685393258427, y1+35.44101123595505, x1+27.429775280898877, y1+35.44101123595505, x1+27.342696629213478, y1+35.44101123595505, x1+27.255617977528093, y1+35.44101123595505, x1+27.168539325842698, y1+35.44101123595505, x1+27.081460674157302, y1+35.44101123595505, x1+26.994382022471907, y1+35.44101123595505, x1+26.907303370786522, y1+35.44101123595505, x1+26.820224719101123, y1+35.44101123595505, x1+26.73314606741573, y1+35.353932584269664, x1+26.646067415730336, y1+35.353932584269664, x1+26.558988764044944, y1+35.353932584269664, x1+26.471910112359552, y1+35.353932584269664, x1+26.38483146067416, y1+35.353932584269664, x1+26.29775280898876, y1+35.353932584269664, x1+26.21067415730337, y1+35.353932584269664, x1+26.123595505617974, y1+35.353932584269664, x1+26.036516853932582, y1+35.353932584269664, x1+25.94943820224719, y1+35.353932584269664, x1+25.8623595505618, y1+35.353932584269664, x1+25.77528089887641, y1+35.353932584269664, x1+25.68820224719101, y1+35.353932584269664, x1+25.60112359550562, y1+35.353932584269664, x1+25.51404494382022, y1+35.353932584269664, x1+25.42696629213483, y1+35.353932584269664, x1+25.33988764044944, y1+35.353932584269664, x1+25.25280898876405, y1+35.26685393258427, x1+25.16573033707865, y1+35.26685393258427, x1+25.078651685393258, y1+35.26685393258427, x1+24.991573033707866, y1+35.26685393258427, x1+24.904494382022474, y1+35.26685393258427, x1+24.81741573033708, y1+35.26685393258427, x1+24.730337078651687, y1+35.26685393258427, x1+24.643258426966295, y1+35.26685393258427, x1+24.5561797752809, y1+35.26685393258427, x1+24.469101123595504, y1+35.26685393258427, x1+24.382022471910112, y1+35.26685393258427, x1+24.29494382022472, y1+35.26685393258427, x1+24.207865168539325, y1+35.26685393258427, x1+24.120786516853933, y1+35.26685393258427, x1+24.03370786516854, y1+35.26685393258427, x1+23.946629213483146, y1+35.26685393258427, x1+23.85955056179775, y1+35.17977528089888, x1+23.77247191011236, y1+35.17977528089888, x1+23.685393258426966, y1+35.17977528089888, x1+23.598314606741575, y1+35.17977528089888, x1+23.51123595505618, y1+35.17977528089888, x1+23.42415730337079, y1+35.17977528089888, x1+23.337078651685392, y1+35.17977528089888, x1+23.25, y1+35.17977528089888, x1+23.162921348314605, y1+35.092696629213485, x1+23.075842696629216, y1+35.092696629213485, x1+22.98876404494382, y1+35.092696629213485, x1+22.90168539325843, y1+35.092696629213485, x1+22.81460674157303, y1+35.092696629213485, x1+22.72752808988764, y1+35.092696629213485, x1+22.640449438202246, y1+35.092696629213485, x1+22.553370786516854, y1+35.00561797752809, x1+22.466292134831463, y1+35.00561797752809, x1+22.37921348314607, y1+35.00561797752809, x1+22.292134831460675, y1+35.00561797752809, x1+22.20505617977528, y1+34.918539325842694, x1+22.117977528089884, y1+34.918539325842694, x1+22.030898876404493, y1+34.918539325842694, x1+21.9438202247191, y1+34.918539325842694, x1+21.856741573033712, y1+34.918539325842694, x1+21.769662921348317, y1+34.8314606741573, x1+21.68258426966292, y1+34.8314606741573, x1+21.595505617977526, y1+34.8314606741573, x1+21.508426966292134, y1+34.74438202247191, x1+21.421348314606742, y1+34.74438202247191, x1+21.33426966292135, y1+34.74438202247191, x1+21.247191011235955, y1+34.657303370786515, x1+21.160112359550563, y1+34.657303370786515, x1+21.073033707865164, y1+34.657303370786515, x1+20.985955056179773, y1+34.57022471910113, x1+20.898876404494384, y1+34.57022471910113, x1+20.81179775280899, y1+34.48314606741573, x1+20.724719101123593, y1+34.48314606741573, x1+20.637640449438205, y1+34.48314606741573, x1+20.550561797752813, y1+34.396067415730336, x1+20.463483146067414, y1+34.396067415730336, x1+20.376404494382022, y1+34.30898876404495, x1+20.289325842696627, y1+34.30898876404495, x1+20.202247191011235, y1+34.221910112359545, x1+20.115168539325843, y1+34.221910112359545, x1+20.028089887640455, y1+34.13483146067416, x1+19.941011235955056, y1+34.13483146067416, x1+19.853932584269664, y1+34.04775280898877, x1+19.76685393258427, y1+34.04775280898877, x1+19.679775280898873, y1+33.960674157303366, x1+19.592696629213485, y1+33.960674157303366, x1+19.505617977528093, y1+33.873595505617985, x1+19.418539325842698, y1+33.873595505617985, x1+19.331460674157302, y1+33.786516853932575, x1+19.24438202247191, y1+33.786516853932575, x1+19.157303370786515, y1+33.873595505617985, x1+19.070224719101127, y1+33.873595505617985, x1+18.98314606741573, y1+33.960674157303366, x1+18.896067415730336, y1+33.960674157303366, x1+18.80898876404494, y1+34.04775280898877, x1+18.721910112359552, y1+34.04775280898877, x1+18.634831460674157, y1+34.13483146067416, x1+18.547752808988765, y1+34.13483146067416, x1+18.460674157303373, y1+34.221910112359545, x1+18.373595505617978, y1+34.221910112359545, x1+18.286516853932582, y1+34.30898876404495, x1+18.19943820224719, y1+34.30898876404495, x1+18.112359550561802, y1+34.396067415730336, x1+18.025280898876407, y1+34.396067415730336, x1+17.93820224719101, y1+34.48314606741573, x1+17.851123595505616, y1+34.48314606741573, x1+17.764044943820224, y1+34.48314606741573, x1+17.676966292134832, y1+34.57022471910113, x1+17.58988764044944, y1+34.57022471910113, x1+17.502808988764045, y1+34.657303370786515, x1+17.41573033707865, y1+34.657303370786515, x1+17.328651685393258, y1+34.657303370786515, x1+17.241573033707866, y1+34.74438202247191, x1+17.154494382022474, y1+34.74438202247191, x1+17.06741573033708, y1+34.74438202247191, x1+16.980337078651683, y1+34.8314606741573, x1+16.893258426966288, y1+34.8314606741573, x1+16.8061797752809, y1+34.8314606741573, x1+16.719101123595507, y1+34.918539325842694, x1+16.632022471910116, y1+34.918539325842694, x1+16.54494382022472, y1+34.918539325842694, x1+16.457865168539325, y1+34.918539325842694, x1+16.370786516853933, y1+35.00561797752809, x1+16.283707865168537, y1+35.00561797752809, x1+16.196629213483146, y1+35.00561797752809, x1+16.109550561797754, y1+35.00561797752809, x1+16.02247191011236, y1+35.00561797752809, x1+15.935393258426966, y1+35.092696629213485, x1+15.848314606741573, y1+35.092696629213485, x1+15.761235955056181, y1+35.092696629213485, x1+15.674157303370785, y1+35.092696629213485, x1+15.587078651685395, y1+35.092696629213485, x1+15.5, y1+35.092696629213485, x1+15.412921348314605, y1+35.17977528089888, x1+15.325842696629215, y1+35.17977528089888, x1+15.238764044943823, y1+35.17977528089888, x1+15.151685393258427, y1+35.17977528089888, x1+15.064606741573034, y1+35.17977528089888, x1+14.977528089887642, y1+35.17977528089888, x1+14.890449438202246, y1+35.17977528089888, x1+14.803370786516853, y1+35.17977528089888, x1+14.71629213483146, y1+35.17977528089888, x1+14.629213483146067, y1+35.26685393258427, x1+14.542134831460675, y1+35.26685393258427, x1+14.45505617977528, y1+35.26685393258427, x1+14.36797752808989, y1+35.26685393258427, x1+14.280898876404494, y1+35.26685393258427, x1+14.1938202247191, y1+35.26685393258427, x1+14.106741573033709, y1+35.26685393258427, x1+14.019662921348313, y1+35.26685393258427, x1+13.93258426966292, y1+35.26685393258427, x1+13.845505617977528, y1+35.26685393258427, x1+13.758426966292134, y1+35.26685393258427, x1+13.671348314606739, y1+35.26685393258427, x1+13.584269662921349, y1+35.26685393258427, x1+13.497191011235953, y1+35.26685393258427, x1+13.410112359550562, y1+35.26685393258427, x1+13.323033707865168, y1+35.26685393258427, x1+13.235955056179776, y1+35.353932584269664, x1+13.14887640449438, y1+35.353932584269664, x1+13.061797752808987, y1+35.353932584269664, x1+12.974719101123595, y1+35.353932584269664, x1+12.887640449438205, y1+35.353932584269664, x1+12.80056179775281, y1+35.353932584269664, x1+12.713483146067414, y1+35.353932584269664, x1+12.626404494382024, y1+35.353932584269664, x1+12.539325842696629, y1+35.353932584269664, x1+12.452247191011237, y1+35.353932584269664, x1+12.365168539325843, y1+35.353932584269664, x1+12.27808988764045, y1+35.353932584269664, x1+12.191011235955056, y1+35.353932584269664, x1+12.103932584269662, y1+35.353932584269664, x1+12.01685393258427, y1+35.353932584269664, x1+11.929775280898875, y1+35.353932584269664, x1+11.842696629213483, y1+35.353932584269664, x1+11.75561797752809, y1+35.44101123595505, x1+11.668539325842696, y1+35.44101123595505, x1+11.581460674157302, y1+35.44101123595505, x1+11.49438202247191, y1+35.44101123595505, x1+11.407303370786515, y1+35.44101123595505, x1+11.320224719101123, y1+35.44101123595505, x1+11.233146067415731, y1+35.44101123595505, x1+11.146067415730338, y1+35.44101123595505, x1+11.058988764044942, y1+35.44101123595505, x1+10.97191011235955, y1+35.44101123595505, x1+10.884831460674159, y1+35.44101123595505, x1+10.797752808988763, y1+35.44101123595505, x1+10.710674157303371, y1+35.44101123595505, x1+10.623595505617978, y1+35.44101123595505, x1+10.536516853932582, y1+35.44101123595505, x1+10.449438202247192, y1+35.52808988764045, x1+10.362359550561797, y1+35.52808988764045, x1+10.275280898876407, y1+35.52808988764045, x1+10.188202247191011, y1+35.52808988764045, x1+10.101123595505618, y1+35.52808988764045, x1+10.014044943820227, y1+35.52808988764045, x1+9.926966292134832, y1+35.52808988764045, x1+9.839887640449437, y1+35.52808988764045, x1+9.752808988764047, y1+35.52808988764045, x1+9.665730337078651, y1+35.61516853932584, x1+9.578651685393258, y1+35.61516853932584, x1+9.491573033707866, y1+35.61516853932584, x1+9.40449438202247, y1+35.61516853932584, x1+9.317415730337078, y1+35.61516853932584, x1+9.230337078651687, y1+35.61516853932584, x1+9.143258426966291, y1+35.70224719101123, x1+9.056179775280901, y1+35.70224719101123, x1+8.969101123595506, y1+35.70224719101123, x1+8.882022471910112, y1+35.70224719101123, x1+8.79494382022472, y1+35.70224719101123, x1+8.707865168539325, y1+35.789325842696634, x1+8.620786516853933, y1+35.789325842696634, x1+8.53370786516854, y1+35.789325842696634, x1+8.446629213483144, y1+35.789325842696634, x1+8.359550561797754, y1+35.87640449438202, x1+8.27247191011236, y1+35.87640449438202, x1+8.185393258426966, y1+35.87640449438202, x1+8.098314606741573, y1+35.87640449438202, x1+8.01123595505618, y1+35.96348314606741, x1+7.924157303370786, y1+35.96348314606741, x1+7.837078651685393, y1+36.05056179775281, x1+7.75, y1+36.05056179775281, x1+7.662921348314607, y1+36.05056179775281, x1+7.575842696629214, y1+36.137640449438194, x1+7.488764044943821, y1+36.137640449438194, x1+7.401685393258426, y1+36.224719101123604, x1+7.314606741573034, y1+36.224719101123604, x1+7.22752808988764, y1+36.311797752808985, x1+7.140449438202247, y1+36.311797752808985, x1+7.0533707865168545, y1+36.39887640449438, x1+6.96629213483146, y1+36.39887640449438, x1+6.879213483146067, y1+36.485955056179776, x1+6.792134831460674, y1+36.485955056179776, x1+6.705056179775281, y1+36.573033707865164, x1+6.617977528089888, y1+36.573033707865164, x1+6.5308988764044935, y1+36.66011235955056, x1+6.4438202247191025, y1+36.66011235955056, x1+6.356741573033707, y1+36.747191011235955, x1+6.269662921348314, y1+36.747191011235955, x1+6.182584269662922, y1+36.83426966292135, x1+6.095505617977528, y1+36.921348314606746, x1+6.008426966292135, y1+36.921348314606746, x1+5.921348314606742, y1+37.008426966292134, x1+5.834269662921348, y1+37.09550561797753, x1+5.747191011235955, y1+37.09550561797753, x1+5.660112359550562, y1+37.18258426966292, x1+5.573033707865169, y1+37.26966292134831, x1+5.485955056179775, y1+37.35674157303371, x1+5.3988764044943816, y1+37.35674157303371, x1+5.311797752808989, y1+37.443820224719104, x1+5.224719101123596, y1+37.5308988764045, x1+5.137640449438203, y1+37.5308988764045, x1+5.050561797752809, y1+37.61797752808988, x1+4.963483146067416, y1+37.70505617977528, x1+4.876404494382023, y1+37.70505617977528, x1+4.789325842696629, y1+37.79213483146067, x1+4.702247191011235, y1+37.79213483146067, x1+4.615168539325843, y1+37.79213483146067]
	ar2_=[x1+16.632022471910116, y1+30.042134831460675, x1+17.58988764044944, y1+30.21629213483146, x1+18.460674157303373, y1+30.303370786516854, x1+19.592696629213485, y1+30.303370786516854, x1+20.724719101123593, y1+30.21629213483146, x1+21.508426966292134, y1+30.129213483146067, x1+22.466292134831463, y1+29.867977528089888]
	ar3_=[x1+11.146067415730338, y1+27.778089887640448, x1+12.365168539325843, y1+26.994382022471907, x1+13.584269662921349, y1+26.29775280898876, x1+14.803370786516853, y1+25.68820224719101, x1+16.370786516853933, y1+25.078651685393258, x1+18.19943820224719, y1+24.730337078651687, x1+20.202247191011235, y1+24.730337078651687, x1+21.769662921348317, y1+24.904494382022474, x1+23.162921348314605, y1+25.33988764044944, x1+24.643258426966295, y1+25.94943820224719, x1+26.036516853932582, y1+26.646067415730336, x1+26.994382022471907, y1+27.255617977528093, x1+27.51685393258427, y1+27.691011235955056]
	ar4_=[x1+12.191011235955056, y1+22.81460674157303, x1+13.323033707865168, y1+22.117977528089884, x1+14.45505617977528, y1+21.508426966292134, x1+15.935393258426966, y1+20.898876404494384, x1+17.676966292134832, y1+20.550561797752813, x1+20.289325842696627, y1+20.550561797752813, x1+22.37921348314607, y1+20.985955056179773, x1+24.03370786516854, y1+21.508426966292134, x1+25.42696629213483, y1+22.117977528089884, x1+26.471910112359552, y1+22.81460674157303]
	ar5_=[x1+15.848314606741573, y1+14.45505617977528, x1+22.81460674157303, y1+14.45505617977528]
	ar6_=[x1+19.331460674157302, y1+10.97191011235955, x1+19.331460674157302, y1+17.93820224719101]




	ccc.create_polygon(ar1_,fill=col,outline=col2,width=1)
	ccc.create_line(ar2_,fill=col2,width=1)
	ccc.create_line(ar3_,fill=col2,width=1)
	ccc.create_line(ar4_,fill=col2,width=1)
	ccc.create_line(ar5_,fill=col2,width=1)
	ccc.create_line(ar6_,fill=col2,width=1)



def draw_knightx(col,x,y,ccc):

	x1,y1=x,y
	x2,y2=x+38.75,y+38.75

	if col==0:
		col="#ffffff"
		col2="#333333"
	elif col==1:
		col="#333333"
		col2="#ffffff"

	ar11_=[x1+11.159999999999998, y1+35.80533333300001, x1+11.159999999999998, y1+34.72, x1+11.159999999999998, y1+33.86753333330001, x1+11.315333333000001, y1+33.17333333000001, x1+11.469999999999997, y1+32.705, x1+11.8575, y1+32.00749999999999, x1+12.09, y1+31.619999999999997, x1+12.6325, y1+30.922533333300003, x1+13.097533333300002, y1+30.3025, x1+13.562499999999998, y1+29.759999999999998, x1+14.415333333000001, y1+29.0625, x1+15.809999999999999, y1+27.589999999999996, x1+16.3525, y1+26.97, x1+16.817533333300003, y1+26.272533333300004, x1+17.1275, y1+25.807499999999997, x1+17.36, y1+25.342499999999998, x1+17.5925, y1+24.7225, x1+17.825, y1+24.18, x1+18.057499999999997, y1+23.1725, x1+18.289999999999996, y1+21.7, x1+18.212533333300002, y1+20.6925, x1+18.212533333300002, y1+19.84, x1+18.212533333300002, y1+19.375, x1+18.135, y1+19.064999999999998, x1+17.36, y1+19.607499999999998, x1+16.74, y1+19.994999999999997, x1+16.042499999999997, y1+20.382533333300004, x1+15.4225, y1+20.773333333333333, x1+14.647499999999999, y1+21.1575, x1+13.8725, y1+21.545, x1+13.485, y1+21.777533333300003, x1+12.9425, y1+22.087533333300002, x1+12.3225, y1+22.474999999999998, x1+11.625, y1+22.939999999999994, x1+11.159999999999998, y1+23.25, x1+10.695333333000002, y1+23.7925, x1+10.385333333000002, y1+24.2575, x1+10.075333333000001, y1+24.7225, x1+9.842533333300001, y1+25.1875, x1+9.455, y1+25.962533333300002, x1+9.144999999999998, y1+26.582533333300003, x1+8.602533333300001, y1+27.357499999999998, x1+7.982499999999999, y1+27.977499999999996, x1+7.6725, y1+28.132499999999997, x1+6.9753333333333335, y1+28.442533333300003, x1+6.4325, y1+28.365333333000002, x1+6.045, y1+28.132499999999997, x1+5.8125, y1+27.667499999999997, x1+5.8125, y1+27.202533333300004, x1+5.8125, y1+27.124999999999996, x1+4.882499999999999, y1+27.202533333300004, x1+4.495, y1+27.124999999999996, x1+3.6425, y1+26.814999999999998, x1+2.6353333333333332, y1+25.962533333300002, x1+2.17, y1+25.265, x1+1.8599999999999999, y1+24.335333333000004, x1+1.8599999999999999, y1+23.482499999999995, x1+2.0925, y1+22.087533333300002, x1+2.48, y1+21.083333333333332, x1+2.945, y1+20.305, x1+3.875, y1+18.91, x1+4.6499999999999995, y1+17.67, x1+5.5024999999999995, y1+16.3525, x1+5.8125, y1+15.732533333300002, x1+6.045, y1+14.8025, x1+6.2775, y1+14.027499999999998, x1+6.2775, y1+12.9425, x1+6.2, y1+12.787533333300001, x1+6.2, y1+11.7025, x1+6.513333333333332, y1+11.159999999999998, x1+6.9753333333333335, y1+10.543333333333331, x1+7.5175, y1+9.997499999999999, x1+8.525, y1+9.0675, x1+8.99, y1+8.4475, x1+9.377533333300001, y1+7.904999999999999, x1+8.9125, y1+2.945, x1+13.794999999999998, y1+5.89, x1+16.6625, y1+2.8674999999999993, x1+18.677533333300002, y1+7.0525, x1+19.529999999999998, y1+6.9753333333333335, x1+20.153333333333332, y1+6.82, x1+20.847533333300004, y1+6.82, x1+21.777533333300003, y1+6.897499999999999, x1+22.633333333333333, y1+7.0525, x1+23.482499999999995, y1+7.285, x1+24.18, y1+7.4399999999999995, x1+24.8775, y1+7.75, x1+25.962533333300002, y1+8.292533333300002, x1+26.7375, y1+8.835, x1+27.357499999999998, y1+9.299999999999999, x1+27.8225, y1+9.764999999999999, x1+28.597499999999997, y1+10.462533333300002, x1+29.372533333300002, y1+11.469999999999997, x1+29.759999999999998, y1+12.09, x1+30.383333333333336, y1+13.097533333300002, x1+30.845, y1+13.8725, x1+31.3875, y1+15.1125, x1+31.929999999999996, y1+16.43, x1+32.4725, y1+17.98, x1+32.7825, y1+19.223333333333332, x1+33.17333333000001, y1+20.463333333333334, x1+33.5575, y1+22.009999999999998, x1+34.0225, y1+24.412499999999998, x1+34.332499999999996, y1+26.043333333333336, x1+34.565333333000005, y1+27.745, x1+34.7975, y1+29.527533333300003, x1+34.95253333330001, y1+31.313333333333336, x1+34.95253333330001, y1+31.313333333333336, x1+35.03, y1+32.24, x1+35.185, y1+33.79, x1+35.185, y1+35.80533333300001, x1+35.185, y1+35.80533333300001]
	ar22_=[x1+3.1, y1+24.8, x1+3.7975333333000008, y1+24.412499999999998, x1+4.572499999999999, y1+23.869999999999997, x1+5.0375333333000005, y1+23.405, x1+5.0375333333000005, y1+23.0175, x1+4.96, y1+22.633333333333333, x1+4.805333333000001, y1+22.319999999999997, x1+4.495, y1+22.164999999999996, x1+4.03, y1+22.164999999999996, x1+3.565, y1+22.474999999999998, x1+3.255333333000001, y1+23.095333333000002, x1+3.1, y1+23.715, x1+3.0225, y1+24.18, x1+3.1, y1+24.8]
	ar33_=[x1+7.8275333333000015, y1+14.8025, x1+8.602533333300001, y1+14.4925, x1+9.377533333300001, y1+14.027499999999998, x1+10.1525, y1+13.407499999999999, x1+10.543333333333331, y1+12.9425, x1+10.927499999999998, y1+12.4, x1+11.159999999999998, y1+12.012533333300001, x1+11.237499999999999, y1+11.78, x1+11.237499999999999, y1+11.625, x1+10.7725, y1+11.469999999999997, x1+10.1525, y1+11.547533333300001, x1+9.6875, y1+11.8575, x1+9.299999999999999, y1+12.245, x1+8.7575, y1+13.097533333300002, x1+8.37, y1+13.7175, x1+8.215, y1+14.105, x1+7.8275333333000015, y1+14.725333333000001, x1+7.8275333333000015, y1+14.8025]


	ccc.create_polygon(ar11_,outline=col,fill=col2,width=1)
	ccc.create_polygon(ar22_,outline=col2,fill=col,width=1)
	ccc.create_polygon(ar33_,outline=col2,fill=col,width=1)




def valid1(x,y):



	if st==1:

		if x=="a":
			x=82.5
		elif x=="b":
			x=82.5*2
		elif x=="c":
			x=82.5*3
		elif x=="d":
			x=82.5*4
		elif x=="e":
			x=82.5*5
		elif x=="f":
			x=82.5*6	
		elif x=="g":
			x=82.5*7
		elif x=="h":
			x=82.5*8


		if y=="8":
			y=82.5
		elif y=="7":
			y=82.5*2
		elif y=="6":
			y=82.5*3
		elif y=="5":
			y=82.5*4
		elif y=="4":
			y=82.5*5
		elif y=="3":
			y=82.5*6
		elif y=="2":
			y=82.5*7
		elif y=="1":
			y=82.5*8
	elif st==0:


		if x=="h":
			x=82.5
		elif x=="g":
			x=82.5*2
		elif x=="f":
			x=82.5*3
		elif x=="e":
			x=82.5*4
		elif x=="d":
			x=82.5*5
		elif x=="c":
			x=82.5*6	
		elif x=="b":
			x=82.5*7
		elif x=="a":
			x=82.5*8


		if y=="1":
			y=82.5
		elif y=="2":
			y=82.5*2
		elif y=="3":
			y=82.5*3
		elif y=="4":
			y=82.5*4
		elif y=="5":
			y=82.5*5
		elif y=="6":
			y=82.5*6
		elif y=="7":
			y=82.5*7
		elif y=="8":
			y=82.5*8


	x=x+20
	y=y+20
	sz=82.5
	return (x,y,sz)

def draw_pawn(col,pos):
	global can,st

	x,y=pos[0],pos[1]
	arr=valid1(x,y)

	x=arr[0]
	y=arr[1]
	sz=75



	x1=x-sz-3.75
	x2=x-3.75
	y1=y-sz-3.75
	y2=y-3.75


	if col==0:
		col="#ffffff"
		col2="#333333"
	elif col==1:
		col="#333333"
		col2="#ffffff"


	can.create_oval(x1+(sz/2)-10*0.9090909091,y1+5*0.9090909091, x2-(sz/2)+10*0.9090909091,y1+25*0.9090909091 ,fill=col,outline=col2,width=1 )
	can.create_oval(x1+(sz/2)-15*0.9090909091,y1+(25-3)*0.9090909091, x2-(sz/2)+15*0.9090909091,y1+(55-3)*0.9090909091 ,fill=col,outline=col2,width=1 )
	can.create_arc(x1+(sz/2)-25*0.9090909091,y1+(55-6)*0.9090909091, x2-(sz/2)+25*0.9090909091,y1+(105-6)*0.9090909091,start=0,extent=180,fill=col,outline=col2,width=1 )
	
	can.create_oval(x1+(sz/2)+(-10+6)*0.9090909091-1,y1+(5+13)*0.9090909091, x2-(sz/2)+(10-6)*0.9090909091+1,y1+(25-12+13)*0.9090909091 ,fill=col,outline=col,width=1 )
	can.create_oval(x1+(sz/2)+(-10+5)*0.9090909091-1,y1+(5+39)*0.9090909091, x2-(sz/2)+(10-5)*0.9090909091+1,y1+(25-8+39)*0.9090909091 ,fill=col,outline=col,width=1 )


def draw_rook2(col,x,y,cc):
	global can,st

	#col,x,y,cc

	sz=75

	x1=x+3.75
	y1=y+3.75
	x2=x+75+3.75
	y2=y+75+3.75


	if col==0:
		col="#ffffff"
		col2="#333333"
	elif col==1:
		col="#333333"
		col2="#ffffff"


	cc.create_polygon(x1+(sz/2),y1+5*0.9090909091,x1+(sz/2)-7*0.9090909091,y1+5*0.9090909091, x1+(sz/2)-7*0.9090909091,y1+(5+5)*0.9090909091, x1+(sz/2)+(-7-14+5)*0.9090909091,y1+(5+5)*0.9090909091,
	 x1+(sz/2)+(-7-14+5)*0.9090909091,y1+5*0.9090909091,  x1+(sz/2)+(-7-14-14+5)*0.9090909091,y1+5*0.9090909091, x1+(sz/2)+(-7-14-14+5)*0.9090909091,y1+(5+10)*0.9090909091, x2-(sz/2)+(7+14+14-5)*0.9090909091,y1+(5+10)*0.9090909091,
	 x2-(sz/2)+(7+14+14-5)*0.9090909091,y1+5*0.9090909091,x2-(sz/2)+(7+14-5)*0.9090909091,y1+5*0.9090909091,x2-(sz/2)+(7+14-5)*0.9090909091,y1+(5+5)*0.9090909091,x2-(sz/2)+7*0.9090909091,y1+(5+5)*0.9090909091,x2-(sz/2)+7*0.9090909091,y1+5*0.9090909091,
	 x1+(sz/2),y1+5*0.9090909091,fill=col,outline=col2,width=1)

	cc.create_polygon(x1+(sz/2)+(-7-14-14+5)*0.9090909091,y1+(5+10)*0.9090909091, x1+(sz/2)+(-7-14-14+5+5+2)*0.9090909091,y1+(5+10+5+3-3)*0.9090909091,
		x2-(sz/2)+(7+14+14-5-5-2)*0.9090909091,y1+(5+10+5+3-3)*0.9090909091,x2-(sz/2)+(7+14+14-5)*0.9090909091,y1+(5+10)*0.9090909091, fill=col,outline=col2,width=1)

	cc.create_rectangle(x1+(sz/2)+(-7-14-10+5+2)*0.9090909091,y1+(5+10+5+3-3)*0.9090909091, x2-(sz/2)+(7+14+10-5-2)*0.9090909091,y2+(-5-5-5-5-3+3)*0.9090909091,fill=col,outline=col2,width=1)

	cc.create_polygon(x1+(sz/2)+(-7-14-14+5)*0.9090909091,y2+(-5-5-5)*0.9090909091, x1+(sz/2)+(-7-14-14+5+5+2)*0.9090909091,y2+(-5-5-5-5-3+3)*0.9090909091,
		x2-(sz/2)+(7+14+10-5-2)*0.9090909091,y2+(-5-5-5-5-3+3)*0.9090909091, x2-(sz/2)+(7+14+14-5)*0.9090909091,y2+(-5-5-5)*0.9090909091 ,fill=col,outline=col2,width=1)

	cc.create_polygon(x2-(sz/2)+(7+14+10)*0.9090909091,y2+(-5-5-5)*0.9090909091, x2-(sz/2)+(7+14+10)*0.9090909091,y2+(-5-5)*0.9090909091,
		x1+(sz/2)+(-7-14-10)*0.9090909091,y2+(-5-5)*0.9090909091,x1+(sz/2)+(-7-14-10)*0.9090909091,y2+(-5-5-5)*0.9090909091,x2-(sz/2)+(7+14+10)*0.9090909091,y2+(-5-5-5)*0.9090909091,fill=col,outline=col2,width=1)

	cc.create_polygon(x1+(sz/2)+(-7-14-14)*0.9090909091,y2-5*0.9090909091, x1+(sz/2)+(-7-14-14-3+3)*0.9090909091,y2+(-5-5)*0.9090909091,
		x2-(sz/2)+(7+14+14)*0.9090909091,y2+(-5-5)*0.9090909091, x2-(sz/2)+(7+14+14)*0.9090909091,y2-5*0.9090909091,x1+(sz/2)+(-7-14-14)*0.9090909091,y2-5*0.9090909091,fill=col,outline=col2,width=1)

	
def draw_rook(col,pos):
	global can,st

	x,y=pos[0],pos[1]
	arr=valid1(x,y)

	x=arr[0]
	y=arr[1]
	sz=arr[2]

	sz=75



	x1=x-sz-3.75
	x2=x-3.75

	y1=y-sz-3.75
	y2=y-3.75


	if col==0:
		col="#ffffff"
		col2="#333333"
	elif col==1:
		col="#333333"
		col2="#ffffff"


	can.create_polygon(x1+(sz/2),y1+5*0.9090909091,x1+(sz/2)-7*0.9090909091,y1+5*0.9090909091, x1+(sz/2)-7*0.9090909091,y1+(5+5)*0.9090909091, x1+(sz/2)+(-7-14+5)*0.9090909091,y1+(5+5)*0.9090909091,
	 x1+(sz/2)+(-7-14+5)*0.9090909091,y1+5*0.9090909091,  x1+(sz/2)+(-7-14-14+5)*0.9090909091,y1+5*0.9090909091, x1+(sz/2)+(-7-14-14+5)*0.9090909091,y1+(5+10)*0.9090909091, x2-(sz/2)+(7+14+14-5)*0.9090909091,y1+(5+10)*0.9090909091,
	 x2-(sz/2)+(7+14+14-5)*0.9090909091,y1+5*0.9090909091,x2-(sz/2)+(7+14-5)*0.9090909091,y1+5*0.9090909091,x2-(sz/2)+(7+14-5)*0.9090909091,y1+(5+5)*0.9090909091,x2-(sz/2)+7*0.9090909091,y1+(5+5)*0.9090909091,x2-(sz/2)+7*0.9090909091,y1+5*0.9090909091,
	 x1+(sz/2),y1+5*0.9090909091,fill=col,outline=col2,width=1)

	can.create_polygon(x1+(sz/2)+(-7-14-14+5)*0.9090909091,y1+(5+10)*0.9090909091, x1+(sz/2)+(-7-14-14+5+5+2)*0.9090909091,y1+(5+10+5+3-3)*0.9090909091,
		x2-(sz/2)+(7+14+14-5-5-2)*0.9090909091,y1+(5+10+5+3-3)*0.9090909091,x2-(sz/2)+(7+14+14-5)*0.9090909091,y1+(5+10)*0.9090909091, fill=col,outline=col2,width=1)

	can.create_rectangle(x1+(sz/2)+(-7-14-10+5+2)*0.9090909091,y1+(5+10+5+3-3)*0.9090909091, x2-(sz/2)+(7+14+10-5-2)*0.9090909091,y2+(-5-5-5-5-3+3)*0.9090909091,fill=col,outline=col2,width=1)

	can.create_polygon(x1+(sz/2)+(-7-14-14+5)*0.9090909091,y2+(-5-5-5)*0.9090909091, x1+(sz/2)+(-7-14-14+5+5+2)*0.9090909091,y2+(-5-5-5-5-3+3)*0.9090909091,
		x2-(sz/2)+(7+14+10-5-2)*0.9090909091,y2+(-5-5-5-5-3+3)*0.9090909091, x2-(sz/2)+(7+14+14-5)*0.9090909091,y2+(-5-5-5)*0.9090909091 ,fill=col,outline=col2,width=1)

	can.create_polygon(x2-(sz/2)+(7+14+10)*0.9090909091,y2+(-5-5-5)*0.9090909091, x2-(sz/2)+(7+14+10)*0.9090909091,y2+(-5-5)*0.9090909091,
		x1+(sz/2)+(-7-14-10)*0.9090909091,y2+(-5-5)*0.9090909091,x1+(sz/2)+(-7-14-10)*0.9090909091,y2+(-5-5-5)*0.9090909091,x2-(sz/2)+(7+14+10)*0.9090909091,y2+(-5-5-5)*0.9090909091,fill=col,outline=col2,width=1)

	can.create_polygon(x1+(sz/2)+(-7-14-14)*0.9090909091,y2-5*0.9090909091, x1+(sz/2)+(-7-14-14-3+3)*0.9090909091,y2+(-5-5)*0.9090909091,
		x2-(sz/2)+(7+14+14)*0.9090909091,y2+(-5-5)*0.9090909091, x2-(sz/2)+(7+14+14)*0.9090909091,y2-5*0.9090909091,x1+(sz/2)+(-7-14-14)*0.9090909091,y2-5*0.9090909091,fill=col,outline=col2,width=1)


def draw_king(col,pos):
	global can,st

	x,y=pos[0],pos[1]
	arr=valid1(x,y)

	x=arr[0]
	y=arr[1]
	sz=75



	x1=x-sz-3.75
	x2=x-3.75
	y1=y-sz-3.75
	y2=y-3.75


	if col==0:
		col="#ffffff"
		col2="#333333"
	elif col==1:
		col="#333333"
		col2="#ffffff"


	ar1=[x1+13.360323886639675, y1+65.89068825910931, x1+13.360323886639675, y1+64.37246963562752, x1+13.663967611336034, y1+62.24696356275304, x1+13.663967611336034, y1+60.425101214574894, x1+13.663967611336034, y1+58.906882591093115, x1+13.663967611336034, y1+56.78137651821863, x1+13.663967611336034, y1+54.655870445344135, x1+13.360323886639675, y1+53.4412955465587, x1+13.360323886639675, y1+51.61943319838057, x1+13.056680161943321, y1+50.10121457489879, x1+11.234817813765181, y1+47.064777327935225, x1+10.020242914979757, y1+45.24291497975709, x1+7.894736842105263, y1+42.51012145748988, x1+5.465587044534412, y1+39.170040485829965, x1+4.554655870445345, y1+37.34817813765182, x1+3.3400809716599187, y1+35.526315789473685, x1+3.0364372469635628, y1+33.70445344129555, x1+3.0364372469635628, y1+30.36437246963563, x1+3.6437246963562755, y1+28.238866396761136, x1+4.554655870445345, y1+26.113360323886642, x1+5.465587044534412, y1+24.898785425101217, x1+6.0728744939271255, y1+23.987854251012145, x1+6.983805668016195, y1+23.07692307692308, x1+8.502024291497975, y1+22.16599190283401, x1+10.020242914979757, y1+21.558704453441294, x1+12.753036437246964, y1+20.951417004048583, x1+15.182186234817815, y1+20.951417004048583, x1+17.611336032388664, y1+21.25506072874494, x1+20.040485829959515, y1+21.862348178137648, x1+21.862348178137648, y1+22.469635627530362, x1+25.20242914979757, y1+24.291497975708502, x1+28.238866396761136, y1+26.72064777327935, x1+30.97165991902834, y1+29.149797570850204, x1+33.097165991902834, y1+31.57894736842105, x1+34.91902834008098, y1+34.61538461538462, x1+36.43724696356276, y1+37.65182186234818, x1+37.65182186234818, y1+41.902834008097166, x1+37.65182186234818, y1+41.902834008097166, x1+37.65182186234818, y1+43.724696356275295, x1+37.65182186234818, y1+46.15384615384616, x1+37.65182186234818, y1+46.15384615384616, x1+37.65182186234818, y1+41.29554655870445, x1+37.65182186234818, y1+41.29554655870445, x1+38.8663967611336, y1+37.65182186234818, x1+40.08097165991903, y1+34.91902834008098, x1+41.59919028340081, y1+32.18623481781376, x1+43.724696356275295, y1+29.757085020242915, x1+45.850202429149796, y1+27.327935222672068, x1+48.582995951417004, y1+25.20242914979757, x1+51.012145748987855, y1+23.684210526315788, x1+54.35222672064777, y1+22.16599190283401, x1+57.99595141700404, y1+20.951417004048583, x1+61.639676113360316, y1+20.951417004048583, x1+64.97975708502024, y1+21.862348178137648, x1+66.80161943319838, y1+22.469635627530362, x1+68.92712550607288, y1+24.595141700404856, x1+70.14170040485831, y1+26.113360323886642, x1+71.35627530364373, y1+29.453441295546558, x1+71.65991902834008, y1+32.48987854251012, x1+71.05263157894737, y1+35.526315789473685, x1+71.05263157894737, y1+35.526315789473685, x1+68.92712550607288, y1+39.473684210526315, x1+66.19433198380567, y1+43.42105263157895, x1+66.19433198380567, y1+43.42105263157895, x1+63.46153846153846, y1+47.064777327935225, x1+61.94331983805668, y1+49.79757085020243, x1+61.639676113360316, y1+50.708502024291505, x1+61.33603238866397, y1+53.13765182186235, x1+61.032388663967616, y1+56.47773279352227, x1+61.032388663967616, y1+59.817813765182194, x1+61.33603238866397, y1+62.24696356275304, x1+61.639676113360316, y1+65.2834008097166, x1+60.425101214574894, y1+66.19433198380567, x1+57.388663967611336, y1+67.4089068825911, x1+53.4412955465587, y1+68.62348178137651, x1+49.19028340080971, y1+69.53441295546558, x1+44.939271255060724, y1+69.83805668016196, x1+44.939271255060724, y1+69.83805668016196, x1+39.77732793522267, y1+70.14170040485831, x1+32.79352226720648, y1+70.14170040485831, x1+27.024291497975707, y1+69.83805668016196, x1+22.16599190283401, y1+68.92712550607288, x1+18.82591093117409, y1+68.0161943319838, x1+15.789473684210526, y1+66.80161943319838, x1+13.360323886639675, y1+66.19433198380567, x1+13.360323886639675, y1+66.19433198380567]
	ar2=[x1+13.360323886639675, y1+65.89068825910931, x1+14.878542510121457, y1+64.37246963562752, x1+16.700404858299596, y1+63.1578947368421, x1+18.522267206477736, y1+61.94331983805668, x1+21.558704453441294, y1+60.72874493927126, x1+24.291497975708502, y1+60.12145748987855, x1+28.238866396761136, y1+59.21052631578947, x1+32.48987854251012, y1+58.906882591093115, x1+39.473684210526315, y1+58.60323886639677, x1+44.939271255060724, y1+59.21052631578947, x1+49.493927125506076, y1+59.817813765182194, x1+53.744939271255056, y1+61.032388663967616, x1+56.78137651821863, y1+61.94331983805668, x1+58.906882591093115, y1+63.1578947368421, x1+60.425101214574894, y1+64.06882591093118, x1+61.94331983805668, y1+65.2834008097166]
	ar3=[x1+13.96761133603239, y1+58.29959514170041, x1+17.00404858299595, y1+56.78137651821863, x1+21.25506072874494, y1+55.5668016194332, x1+25.20242914979757, y1+54.655870445344135, x1+30.668016194331987, y1+54.04858299595141, x1+35.22267206477733, y1+53.744939271255056, x1+38.56275303643724, y1+53.4412955465587, x1+44.02834008097166, y1+53.744939271255056, x1+49.19028340080971, y1+54.655870445344135, x1+53.13765182186235, y1+55.5668016194332, x1+57.99595141700404, y1+56.78137651821863, x1+57.99595141700404, y1+56.78137651821863, x1+61.032388663967616, y1+58.29959514170041]
	ar4=[x1+12.753036437246964, y1+49.19028340080971, x1+17.30769230769231, y1+47.97570850202429, x1+23.07692307692308, y1+47.064777327935225, x1+27.024291497975707, y1+46.76113360323886, x1+33.097165991902834, y1+46.15384615384616, x1+33.097165991902834, y1+46.15384615384616, x1+36.43724696356276, y1+46.15384615384616, x1+38.25910931174089, y1+46.15384615384616, x1+41.902834008097166, y1+46.15384615384616, x1+47.97570850202429, y1+46.4574898785425, x1+50.708502024291505, y1+46.76113360323886, x1+53.13765182186235, y1+47.064777327935225, x1+57.08502024291498, y1+47.97570850202429, x1+59.817813765182194, y1+48.88663967611336, x1+61.94331983805668, y1+50.10121457489879]
	ar5=[x1+37.65182186234818, y1+41.902834008097166, x1+35.82995951417004, y1+36.74089068825911, x1+34.0080971659919, y1+33.097165991902834, x1+31.275303643724698, y1+29.149797570850204, x1+30.668016194331987, y1+27.631578947368418, x1+30.060728744939276, y1+23.684210526315788, x1+30.36437246963563, y1+20.040485829959515, x1+31.57894736842105, y1+17.611336032388664, x1+32.79352226720648, y1+16.09311740890688, x1+34.61538461538462, y1+14.574898785425102, x1+37.04453441295547, y1+13.96761133603239, x1+38.56275303643724, y1+13.96761133603239, x1+40.38461538461538, y1+14.878542510121457, x1+42.81376518218623, y1+16.700404858299596, x1+43.724696356275295, y1+18.82591093117409, x1+44.635627530364374, y1+22.16599190283401, x1+44.635627530364374, y1+24.898785425101217, x1+44.02834008097166, y1+27.024291497975707, x1+43.42105263157895, y1+29.757085020242915, x1+42.20647773279352, y1+31.57894736842105, x1+41.29554655870445, y1+32.79352226720648, x1+40.08097165991903, y1+35.22267206477733, x1+38.8663967611336, y1+37.34817813765182, x1+37.95546558704453, y1+40.38461538461538, x1+37.65182186234818, y1+41.59919028340081]
	ar6=[x1+36.43724696356276, y1+13.96761133603239, x1+36.43724696356276, y1+8.502024291497975, x1+32.184394552815604, y1+8.502024291497975, x1+32.184394552815604, y1+6.0728744939271255, x1+36.43724696356276, y1+6.0728744939271255, x1+36.43724696356276, y1+2.732793522267206, x1+38.8663967611336, y1+2.732793522267206, x1+38.8663967611336, y1+6.0728744939271255, x1+43.42105263157895, y1+6.0728744939271255, x1+43.42105263157895, y1+8.502024291497975, x1+38.8663967611336, y1+8.502024291497975, x1+38.8663967611336, y1+13.96761133603239]


	can.create_polygon(ar1,fill=col,outline=col2,width=1)
	can.create_line(ar2,fill=col2,width=1)
	can.create_line(ar3,fill=col2,width=1)
	can.create_line(ar4,fill=col2,width=1)
	can.create_polygon(ar5,fill=col,outline=col2,width=1)
	can.create_polygon(ar6,fill=col,outline=col2,width=1)



def draw_bishop2(col,x,y,cc):
	global can,st

	#col,x,y,cc

	sz=75

	x1=x+3.75
	y1=y+3.75
	x2=x+75
	y2=y+75+3.75


	if col==0:
		col="#ffffff"
		col2="#333333"
	elif col==1:
		col="#333333"
		col2="#ffffff"


	ar1=[x1+8.932584269662922, y1+73.14606741573034, x1+8.595505617977528, y1+72.97752808988764, x1+8.42696629213483, y1+72.80898876404494, x1+8.258426966292134, y1+72.64044943820225, x1+7.9213483146067425, y1+72.47191011235955, x1+7.752808988764045, y1+72.30337078651685, x1+7.584269662921348, y1+72.13483146067415, x1+7.415730337078652, y1+71.96629213483145, x1+7.247191011235955, y1+71.79775280898876, x1+7.078651685393259, y1+71.62921348314606, x1+6.910112359550562, y1+71.46067415730337, x1+6.741573033707865, y1+71.29213483146067, x1+6.573033707865169, y1+71.12359550561797, x1+6.404494382022472, y1+70.95505617977528, x1+6.235955056179776, y1+70.78651685393258, x1+6.067415730337078, y1+70.6179775280899, x1+5.8988764044943816, y1+70.4494382022472, x1+5.730337078651685, y1+70.28089887640449, x1+5.561797752808989, y1+70.1123595505618, x1+5.393258426966292, y1+69.94382022471909, x1+5.224719101123595, y1+69.7752808988764, x1+5.056179775280898, y1+69.6067415730337, x1+4.887640449438202, y1+69.43820224719101, x1+4.7191011235955065, y1+69.26966292134831, x1+4.550561797752809, y1+69.10112359550563, x1+4.382022471910113, y1+68.93258426966293, x1+4.213483146067415, y1+68.76404494382022, x1+4.044943820224719, y1+68.59550561797754, x1+3.8764044943820224, y1+68.42696629213484, x1+3.707865168539326, y1+68.25842696629213, x1+3.5393258426966296, y1+68.08988764044945, x1+3.3707865168539324, y1+67.92134831460675, x1+3.3707865168539324, y1+67.75280898876404, x1+3.202247191011236, y1+67.58426966292134, x1+3.033707865168539, y1+67.41573033707864, x1+2.8651685393258424, y1+67.24719101123596, x1+2.8651685393258424, y1+67.07865168539325, x1+2.8651685393258424, y1+66.91011235955057, x1+2.8651685393258424, y1+66.74157303370787, x1+3.033707865168539, y1+66.57303370786516, x1+3.033707865168539, y1+66.40449438202246, x1+3.202247191011236, y1+66.23595505617976, x1+3.202247191011236, y1+66.06741573033707, x1+3.3707865168539324, y1+65.89887640449437, x1+3.5393258426966296, y1+65.73033707865169, x1+3.707865168539326, y1+65.561797752809, x1+3.8764044943820224, y1+65.39325842696628, x1+4.213483146067415, y1+65.2247191011236, x1+4.382022471910113, y1+65.0561797752809, x1+4.550561797752809, y1+64.88764044943821, x1+4.7191011235955065, y1+64.71910112359551, x1+4.887640449438202, y1+64.5505617977528, x1+5.224719101123595, y1+64.38202247191012, x1+5.393258426966292, y1+64.21348314606742, x1+5.730337078651685, y1+64.04494382022472, x1+5.8988764044943816, y1+63.87640449438202, x1+6.067415730337078, y1+63.70786516853933, x1+6.404494382022472, y1+63.539325842696634, x1+6.573033707865169, y1+63.37078651685394, x1+6.910112359550562, y1+63.20224719101124, x1+7.247191011235955, y1+63.03370786516854, x1+7.415730337078652, y1+62.86516853932585, x1+7.752808988764045, y1+62.69662921348315, x1+8.089887640449438, y1+62.52808988764044, x1+8.42696629213483, y1+62.35955056179777, x1+8.764044943820226, y1+62.19101123595507, x1+9.101123595505618, y1+62.02247191011236, x1+9.438202247191013, y1+61.85393258426966, x1+9.943820224719103, y1+61.685393258426956, x1+10.280898876404494, y1+61.51685393258427, x1+10.786516853932584, y1+61.34831460674157, x1+11.123595505617978, y1+61.17977528089887, x1+11.629213483146069, y1+61.011235955056186, x1+12.134831460674157, y1+60.84269662921347, x1+12.808988764044944, y1+60.674157303370784, x1+13.48314606741573, y1+60.50561797752809, x1+14.157303370786519, y1+60.337078651685395, x1+14.831460674157304, y1+60.1685393258427, x1+16.01123595505618, y1+60.0, x1+18.202247191011235, y1+59.8314606741573, x1+28.48314606741573, y1+59.662921348314605, x1+29.325842696629216, y1+59.49438202247191, x1+30.0, y1+59.325842696629216, x1+30.505617977528093, y1+59.157303370786515, x1+31.01123595505618, y1+58.98876404494383, x1+31.348314606741575, y1+58.82022471910113, x1+31.68539325842697, y1+58.65168539325843, x1+32.02247191011236, y1+58.48314606741573, x1+32.19101123595506, y1+58.314606741573044, x1+32.359550561797754, y1+58.14606741573034, x1+31.68539325842697, y1+57.97752808988764, x1+31.01123595505618, y1+57.80898876404495, x1+30.337078651685392, y1+57.640449438202246, x1+29.662921348314608, y1+57.471910112359545, x1+29.157303370786522, y1+57.30337078651685, x1+28.651685393258425, y1+57.13483146067416, x1+28.146067415730336, y1+56.96629213483146, x1+27.640449438202246, y1+56.79775280898876, x1+27.134831460674153, y1+56.629213483146074, x1+26.629213483146067, y1+56.460674157303366, x1+26.292134831460675, y1+56.29213483146067, x1+25.786516853932582, y1+56.12359550561798, x1+25.44943820224719, y1+55.955056179775276, x1+25.1123595505618, y1+55.78651685393259, x1+24.775280898876407, y1+55.61797752808989, x1+24.269662921348313, y1+55.4494382022472, x1+23.93258426966292, y1+55.28089887640449, x1+23.595505617977526, y1+55.112359550561806, x1+23.258426966292138, y1+54.94382022471909, x1+22.92134831460674, y1+54.7752808988764, x1+22.584269662921347, y1+54.60674157303371, x1+22.41573033707865, y1+54.438202247191015, x1+22.078651685393258, y1+54.269662921348306, x1+21.91011235955056, y1+54.10112359550562, x1+21.741573033707866, y1+53.93258426966292, x1+21.741573033707866, y1+53.764044943820224, x1+21.573033707865168, y1+53.59550561797753, x1+21.573033707865168, y1+53.426966292134836, x1+21.573033707865168, y1+53.258426966292134, x1+21.573033707865168, y1+53.08988764044943, x1+21.573033707865168, y1+52.92134831460674, x1+21.573033707865168, y1+52.75280898876405, x1+21.573033707865168, y1+52.58426966292135, x1+21.741573033707866, y1+52.41573033707865, x1+21.741573033707866, y1+52.24719101123595, x1+21.741573033707866, y1+52.07865168539326, x1+21.741573033707866, y1+51.91011235955055, x1+21.741573033707866, y1+51.741573033707866, x1+21.91011235955056, y1+51.573033707865164, x1+21.91011235955056, y1+51.40449438202247, x1+21.91011235955056, y1+51.235955056179776, x1+21.91011235955056, y1+51.06741573033708, x1+22.078651685393258, y1+50.89887640449438, x1+22.078651685393258, y1+50.73033707865168, x1+22.078651685393258, y1+50.56179775280899, x1+22.078651685393258, y1+50.39325842696629, x1+22.247191011235955, y1+50.2247191011236, x1+22.247191011235955, y1+50.05617977528091, x1+22.247191011235955, y1+49.88764044943821, x1+22.247191011235955, y1+49.7191011235955, x1+22.41573033707865, y1+49.55056179775281, x1+22.41573033707865, y1+49.38202247191011, x1+22.41573033707865, y1+49.21348314606742, x1+22.41573033707865, y1+49.044943820224724, x1+22.584269662921347, y1+48.87640449438203, x1+22.584269662921347, y1+48.70786516853933, x1+22.584269662921347, y1+48.53932584269663, x1+22.584269662921347, y1+48.370786516853926, x1+22.752808988764045, y1+48.20224719101123, x1+22.752808988764045, y1+48.03370786516854, x1+22.752808988764045, y1+47.86516853932584, x1+22.752808988764045, y1+47.69662921348315, x1+22.752808988764045, y1+47.52808988764045, x1+22.92134831460674, y1+47.35955056179775, x1+22.92134831460674, y1+47.19101123595505, x1+22.92134831460674, y1+47.02247191011236, x1+23.089887640449437, y1+46.853932584269664, x1+23.089887640449437, y1+46.68539325842697, x1+23.089887640449437, y1+46.516853932584276, x1+23.089887640449437, y1+46.34831460674157, x1+23.089887640449437, y1+46.17977528089887, x1+23.258426966292138, y1+46.01123595505618, x1+23.258426966292138, y1+45.84269662921348, x1+23.258426966292138, y1+45.674157303370784, x1+23.258426966292138, y1+45.50561797752809, x1+23.426966292134832, y1+45.337078651685395, x1+23.426966292134832, y1+45.168539325842694, x1+23.426966292134832, y1+45.0, x1+23.426966292134832, y1+44.8314606741573, x1+23.595505617977526, y1+44.662921348314605, x1+23.595505617977526, y1+44.49438202247191, x1+23.595505617977526, y1+44.32584269662922, x1+23.595505617977526, y1+44.157303370786515, x1+23.426966292134832, y1+43.98876404494382, x1+23.258426966292138, y1+43.82022471910112, x1+23.089887640449437, y1+43.651685393258425, x1+22.92134831460674, y1+43.48314606741573, x1+22.584269662921347, y1+43.31460674157304, x1+22.41573033707865, y1+43.146067415730336, x1+22.247191011235955, y1+42.97752808988764, x1+22.078651685393258, y1+42.80898876404494, x1+21.741573033707866, y1+42.640449438202246, x1+21.573033707865168, y1+42.47191011235955, x1+21.40449438202247, y1+42.30337078651686, x1+21.235955056179776, y1+42.13483146067416, x1+21.06741573033708, y1+41.96629213483146, x1+20.89887640449438, y1+41.79775280898876, x1+20.730337078651687, y1+41.62921348314607, x1+20.730337078651687, y1+41.46067415730337, x1+20.56179775280899, y1+41.29213483146068, x1+20.393258426966288, y1+41.12359550561798, x1+20.224719101123593, y1+40.95505617977528, x1+20.0561797752809, y1+40.786516853932575, x1+20.0561797752809, y1+40.61797752808988, x1+19.887640449438205, y1+40.44943820224719, x1+19.719101123595507, y1+40.28089887640449, x1+19.55056179775281, y1+40.1123595505618, x1+19.55056179775281, y1+39.943820224719104, x1+19.382022471910116, y1+39.77528089887641, x1+19.382022471910116, y1+39.60674157303371, x1+19.213483146067414, y1+39.438202247191015, x1+19.044943820224717, y1+39.26966292134831, x1+19.044943820224717, y1+39.10112359550562, x1+18.876404494382026, y1+38.932584269662925, x1+18.876404494382026, y1+38.76404494382023, x1+18.707865168539325, y1+38.59550561797752, x1+18.707865168539325, y1+38.42696629213483, x1+18.53932584269663, y1+38.25842696629213, x1+18.53932584269663, y1+38.08988764044943, x1+18.370786516853936, y1+37.92134831460674, x1+18.370786516853936, y1+37.75280898876405, x1+18.202247191011235, y1+37.58426966292135, x1+18.202247191011235, y1+37.41573033707865, x1+18.202247191011235, y1+37.247191011235955, x1+18.033707865168537, y1+37.07865168539326, x1+18.033707865168537, y1+36.91011235955057, x1+18.033707865168537, y1+36.74157303370787, x1+17.865168539325843, y1+36.57303370786517, x1+17.865168539325843, y1+36.40449438202247, x1+17.865168539325843, y1+36.235955056179776, x1+17.696629213483146, y1+36.067415730337075, x1+17.696629213483146, y1+35.89887640449438, x1+17.696629213483146, y1+35.73033707865169, x1+17.52808988764045, y1+35.561797752808985, x1+17.52808988764045, y1+35.39325842696629, x1+17.52808988764045, y1+35.2247191011236, x1+17.52808988764045, y1+35.0561797752809, x1+17.359550561797754, y1+34.8876404494382, x1+17.359550561797754, y1+34.71910112359551, x1+17.359550561797754, y1+34.55056179775281, x1+17.359550561797754, y1+34.38202247191011, x1+17.359550561797754, y1+34.21348314606742, x1+17.359550561797754, y1+34.044943820224724, x1+17.359550561797754, y1+33.87640449438202, x1+17.359550561797754, y1+33.70786516853932, x1+17.359550561797754, y1+33.53932584269663, x1+17.359550561797754, y1+33.37078651685393, x1+17.359550561797754, y1+33.20224719101123, x1+17.359550561797754, y1+33.03370786516854, x1+17.191011235955056, y1+32.86516853932584, x1+17.191011235955056, y1+32.69662921348314, x1+17.191011235955056, y1+32.52808988764045, x1+17.191011235955056, y1+32.359550561797754, x1+17.191011235955056, y1+32.19101123595506, x1+17.191011235955056, y1+32.02247191011236, x1+17.191011235955056, y1+31.853932584269664, x1+17.359550561797754, y1+31.68539325842697, x1+17.359550561797754, y1+31.51685393258427, x1+17.359550561797754, y1+31.348314606741575, x1+17.359550561797754, y1+31.179775280898884, x1+17.359550561797754, y1+31.01123595505618, x1+17.359550561797754, y1+30.842696629213478, x1+17.359550561797754, y1+30.674157303370784, x1+17.359550561797754, y1+30.505617977528093, x1+17.359550561797754, y1+30.337078651685392, x1+17.359550561797754, y1+30.168539325842698, x1+17.359550561797754, y1+30.0, x1+17.52808988764045, y1+29.831460674157302, x1+17.52808988764045, y1+29.662921348314608, x1+17.52808988764045, y1+29.494382022471914, x1+17.52808988764045, y1+29.325842696629216, x1+17.52808988764045, y1+29.157303370786522, x1+17.696629213483146, y1+28.98876404494382, x1+17.696629213483146, y1+28.820224719101123, x1+17.696629213483146, y1+28.651685393258425, x1+17.696629213483146, y1+28.48314606741573, x1+17.865168539325843, y1+28.314606741573037, x1+17.865168539325843, y1+28.146067415730336, x1+17.865168539325843, y1+27.977528089887638, x1+18.033707865168537, y1+27.808988764044944, x1+18.033707865168537, y1+27.640449438202246, x1+18.202247191011235, y1+27.471910112359545, x1+18.202247191011235, y1+27.303370786516854, x1+18.202247191011235, y1+27.134831460674153, x1+18.370786516853936, y1+26.96629213483146, x1+18.370786516853936, y1+26.797752808988765, x1+18.53932584269663, y1+26.629213483146067, x1+18.53932584269663, y1+26.46067415730337, x1+18.707865168539325, y1+26.292134831460675, x1+18.707865168539325, y1+26.123595505617974, x1+18.876404494382026, y1+25.955056179775276, x1+18.876404494382026, y1+25.786516853932582, x1+19.044943820224717, y1+25.617977528089888, x1+19.044943820224717, y1+25.44943820224719, x1+19.213483146067414, y1+25.280898876404496, x1+19.213483146067414, y1+25.1123595505618, x1+19.382022471910116, y1+24.943820224719104, x1+19.382022471910116, y1+24.775280898876407, x1+19.55056179775281, y1+24.60674157303371, x1+19.719101123595507, y1+24.438202247191015, x1+19.719101123595507, y1+24.269662921348313, x1+19.887640449438205, y1+24.101123595505616, x1+20.0561797752809, y1+23.93258426966292, x1+20.0561797752809, y1+23.764044943820224, x1+20.224719101123593, y1+23.595505617977526, x1+20.393258426966288, y1+23.426966292134832, x1+20.56179775280899, y1+23.258426966292138, x1+20.56179775280899, y1+23.089887640449437, x1+20.730337078651687, y1+22.92134831460674, x1+20.89887640449438, y1+22.752808988764045, x1+21.06741573033708, y1+22.584269662921347, x1+21.235955056179776, y1+22.41573033707865, x1+21.235955056179776, y1+22.247191011235955, x1+21.40449438202247, y1+22.078651685393258, x1+21.573033707865168, y1+21.91011235955056, x1+21.741573033707866, y1+21.741573033707866, x1+21.91011235955056, y1+21.573033707865168, x1+22.078651685393258, y1+21.40449438202247, x1+22.247191011235955, y1+21.235955056179776, x1+22.41573033707865, y1+21.06741573033708, x1+22.584269662921347, y1+20.89887640449438, x1+22.752808988764045, y1+20.730337078651687, x1+22.92134831460674, y1+20.56179775280899, x1+23.258426966292138, y1+20.393258426966288, x1+23.426966292134832, y1+20.224719101123593, x1+23.595505617977526, y1+20.0561797752809, x1+23.764044943820224, y1+19.887640449438205, x1+23.93258426966292, y1+19.719101123595507, x1+24.101123595505616, y1+19.55056179775281, x1+24.438202247191015, y1+19.382022471910116, x1+24.60674157303371, y1+19.213483146067414, x1+24.775280898876407, y1+19.044943820224717, x1+24.943820224719104, y1+18.876404494382026, x1+25.280898876404496, y1+18.707865168539325, x1+25.44943820224719, y1+18.53932584269663, x1+25.617977528089888, y1+18.370786516853936, x1+25.955056179775276, y1+18.202247191011235, x1+26.123595505617974, y1+18.033707865168537, x1+26.292134831460675, y1+17.865168539325843, x1+26.629213483146067, y1+17.696629213483146, x1+26.797752808988765, y1+17.52808988764045, x1+26.96629213483146, y1+17.359550561797754, x1+27.134831460674153, y1+17.191011235955056, x1+27.471910112359545, y1+17.022471910112362, x1+27.640449438202246, y1+16.85393258426966, x1+27.977528089887638, y1+16.685393258426966, x1+28.146067415730336, y1+16.51685393258427, x1+28.314606741573037, y1+16.34831460674157, x1+28.651685393258425, y1+16.179775280898877, x1+28.820224719101123, y1+16.01123595505618, x1+29.157303370786522, y1+15.842696629213485, x1+29.325842696629216, y1+15.674157303370787, x1+29.494382022471914, y1+15.50561797752809, x1+29.831460674157302, y1+15.337078651685392, x1+30.0, y1+15.168539325842696, x1+30.337078651685392, y1+15.0, x1+30.505617977528093, y1+14.831460674157304, x1+30.674157303370784, y1+14.662921348314608, x1+31.01123595505618, y1+14.49438202247191, x1+31.179775280898884, y1+14.325842696629213, x1+31.51685393258427, y1+14.157303370786519, x1+31.68539325842697, y1+13.988764044943819, x1+31.853932584269664, y1+13.820224719101123, x1+32.19101123595506, y1+13.651685393258427, x1+32.359550561797754, y1+13.48314606741573, x1+32.52808988764045, y1+13.314606741573034, x1+32.86516853932584, y1+13.146067415730338, x1+33.03370786516854, y1+12.977528089887638, x1+33.20224719101123, y1+12.808988764044944, x1+33.53932584269663, y1+12.640449438202248, x1+33.70786516853932, y1+12.471910112359552, x1+33.87640449438202, y1+12.303370786516854, x1+34.21348314606742, y1+12.134831460674157, x1+34.38202247191011, y1+11.96629213483146, x1+34.38202247191011, y1+11.797752808988763, x1+34.38202247191011, y1+11.629213483146069, x1+34.21348314606742, y1+11.46067415730337, x1+34.044943820224724, y1+11.292134831460674, x1+33.87640449438202, y1+11.123595505617978, x1+33.70786516853932, y1+10.95505617977528, x1+33.53932584269663, y1+10.786516853932584, x1+33.37078651685393, y1+10.617977528089888, x1+33.20224719101123, y1+10.44943820224719, x1+33.03370786516854, y1+10.280898876404494, x1+33.03370786516854, y1+10.112359550561797, x1+32.86516853932584, y1+9.943820224719103, x1+32.69662921348314, y1+9.775280898876405, x1+32.69662921348314, y1+9.606741573033707, x1+32.52808988764045, y1+9.438202247191013, x1+32.52808988764045, y1+9.269662921348315, x1+32.359550561797754, y1+9.101123595505618, x1+32.359550561797754, y1+8.932584269662922, x1+32.359550561797754, y1+8.764044943820226, x1+32.19101123595506, y1+8.595505617977528, x1+32.19101123595506, y1+8.42696629213483, x1+32.19101123595506, y1+8.258426966292134, x1+32.19101123595506, y1+8.089887640449438, x1+32.02247191011236, y1+7.9213483146067425, x1+32.02247191011236, y1+7.752808988764045, x1+32.02247191011236, y1+7.584269662921348, x1+32.02247191011236, y1+7.415730337078652, x1+32.02247191011236, y1+7.247191011235955, x1+32.02247191011236, y1+7.078651685393259, x1+32.02247191011236, y1+6.910112359550562, x1+32.02247191011236, y1+6.741573033707865, x1+32.02247191011236, y1+6.573033707865169, x1+32.02247191011236, y1+6.404494382022472, x1+32.02247191011236, y1+6.235955056179776, x1+32.19101123595506, y1+6.067415730337078, x1+32.19101123595506, y1+5.8988764044943816, x1+32.19101123595506, y1+5.730337078651685, x1+32.19101123595506, y1+5.561797752808989, x1+32.19101123595506, y1+5.393258426966292, x1+32.359550561797754, y1+5.224719101123595, x1+32.359550561797754, y1+5.056179775280898, x1+32.52808988764045, y1+4.887640449438202, x1+32.52808988764045, y1+4.7191011235955065, x1+32.69662921348314, y1+4.550561797752809, x1+32.69662921348314, y1+4.382022471910113, x1+32.86516853932584, y1+4.213483146067415, x1+32.86516853932584, y1+4.044943820224719, x1+33.03370786516854, y1+3.8764044943820224, x1+33.20224719101123, y1+3.707865168539326, x1+33.37078651685393, y1+3.5393258426966296, x1+33.53932584269663, y1+3.3707865168539324, x1+33.70786516853932, y1+3.202247191011236, x1+33.87640449438202, y1+3.033707865168539, x1+34.044943820224724, y1+2.8651685393258424, x1+34.21348314606742, y1+2.696629213483146, x1+34.55056179775281, y1+2.528089887640449, x1+34.8876404494382, y1+2.3595505617977532, x1+35.0561797752809, y1+2.1910112359550564, x1+35.39325842696629, y1+2.0224719101123596, x1+35.89887640449438, y1+1.853932584269663, x1+36.74157303370787, y1+1.6853932584269662, x1+37.58426966292135, y1+1.6853932584269662, x1+38.08988764044943, y1+1.6853932584269662, x1+38.932584269662925, y1+1.853932584269663, x1+39.60674157303371, y1+2.1910112359550564, x1+39.943820224719104, y1+2.3595505617977532, x1+40.1123595505618, y1+2.528089887640449, x1+40.44943820224719, y1+2.696629213483146, x1+40.61797752808988, y1+2.8651685393258424, x1+40.786516853932575, y1+3.033707865168539, x1+40.95505617977528, y1+3.202247191011236, x1+41.12359550561798, y1+3.3707865168539324, x1+41.29213483146068, y1+3.5393258426966296, x1+41.46067415730337, y1+3.707865168539326, x1+41.62921348314607, y1+3.8764044943820224, x1+41.79775280898876, y1+4.044943820224719, x1+41.79775280898876, y1+4.213483146067415, x1+41.96629213483146, y1+4.382022471910113, x1+41.96629213483146, y1+4.550561797752809, x1+42.13483146067416, y1+4.7191011235955065, x1+42.13483146067416, y1+4.887640449438202, x1+42.30337078651686, y1+5.056179775280898, x1+42.30337078651686, y1+5.224719101123595, x1+42.47191011235955, y1+5.393258426966292, x1+42.47191011235955, y1+5.561797752808989, x1+42.47191011235955, y1+5.730337078651685, x1+42.47191011235955, y1+5.8988764044943816, x1+42.640449438202246, y1+6.067415730337078, x1+42.640449438202246, y1+6.235955056179776, x1+42.640449438202246, y1+6.404494382022472, x1+42.640449438202246, y1+6.573033707865169, x1+42.640449438202246, y1+6.741573033707865, x1+42.640449438202246, y1+6.910112359550562, x1+42.640449438202246, y1+7.078651685393259, x1+42.640449438202246, y1+7.247191011235955, x1+42.640449438202246, y1+7.415730337078652, x1+42.640449438202246, y1+7.584269662921348, x1+42.640449438202246, y1+7.752808988764045, x1+42.640449438202246, y1+7.9213483146067425, x1+42.640449438202246, y1+8.089887640449438, x1+42.640449438202246, y1+8.258426966292134, x1+42.47191011235955, y1+8.42696629213483, x1+42.47191011235955, y1+8.595505617977528, x1+42.47191011235955, y1+8.764044943820226, x1+42.30337078651686, y1+8.932584269662922, x1+42.30337078651686, y1+9.101123595505618, x1+42.13483146067416, y1+9.269662921348315, x1+42.13483146067416, y1+9.438202247191013, x1+41.96629213483146, y1+9.606741573033707, x1+41.96629213483146, y1+9.775280898876405, x1+41.79775280898876, y1+9.943820224719103, x1+41.62921348314607, y1+10.112359550561797, x1+41.62921348314607, y1+10.280898876404494, x1+41.46067415730337, y1+10.44943820224719, x1+41.29213483146068, y1+10.617977528089888, x1+41.12359550561798, y1+10.786516853932584, x1+40.95505617977528, y1+10.95505617977528, x1+40.786516853932575, y1+11.123595505617978, x1+40.61797752808988, y1+11.292134831460674, x1+40.44943820224719, y1+11.46067415730337, x1+40.44943820224719, y1+11.629213483146069, x1+40.28089887640449, y1+11.797752808988763, x1+40.28089887640449, y1+11.96629213483146, x1+40.61797752808988, y1+12.134831460674157, x1+40.786516853932575, y1+12.303370786516854, x1+40.95505617977528, y1+12.471910112359552, x1+41.29213483146068, y1+12.640449438202248, x1+41.46067415730337, y1+12.808988764044944, x1+41.62921348314607, y1+12.977528089887638, x1+41.79775280898876, y1+13.146067415730338, x1+42.13483146067416, y1+13.314606741573034, x1+42.30337078651686, y1+13.48314606741573, x1+42.47191011235955, y1+13.651685393258427, x1+42.80898876404494, y1+13.820224719101123, x1+42.97752808988764, y1+13.988764044943819, x1+43.31460674157304, y1+14.157303370786519, x1+43.48314606741573, y1+14.325842696629213, x1+43.651685393258425, y1+14.49438202247191, x1+43.98876404494382, y1+14.662921348314608, x1+44.157303370786515, y1+14.831460674157304, x1+44.49438202247191, y1+15.0, x1+44.662921348314605, y1+15.168539325842696, x1+44.8314606741573, y1+15.337078651685392, x1+45.168539325842694, y1+15.50561797752809, x1+45.337078651685395, y1+15.674157303370787, x1+45.674157303370784, y1+15.842696629213485, x1+45.84269662921348, y1+16.01123595505618, x1+46.01123595505618, y1+16.179775280898877, x1+46.34831460674157, y1+16.34831460674157, x1+46.516853932584276, y1+16.51685393258427, x1+46.68539325842697, y1+16.685393258426966, x1+47.02247191011236, y1+16.85393258426966, x1+47.19101123595505, y1+17.022471910112362, x1+47.52808988764045, y1+17.191011235955056, x1+47.69662921348315, y1+17.359550561797754, x1+47.86516853932584, y1+17.52808988764045, x1+48.20224719101123, y1+17.696629213483146, x1+48.370786516853926, y1+17.865168539325843, x1+48.53932584269663, y1+18.033707865168537, x1+48.87640449438203, y1+18.202247191011235, x1+49.044943820224724, y1+18.370786516853936, x1+49.21348314606742, y1+18.53932584269663, x1+49.38202247191011, y1+18.707865168539325, x1+49.7191011235955, y1+18.876404494382026, x1+49.88764044943821, y1+19.044943820224717, x1+50.05617977528091, y1+19.213483146067414, x1+50.2247191011236, y1+19.382022471910116, x1+50.56179775280899, y1+19.55056179775281, x1+50.73033707865168, y1+19.719101123595507, x1+50.89887640449438, y1+19.887640449438205, x1+51.06741573033708, y1+20.0561797752809, x1+51.235955056179776, y1+20.224719101123593, x1+51.40449438202247, y1+20.393258426966288, x1+51.741573033707866, y1+20.56179775280899, x1+51.91011235955055, y1+20.730337078651687, x1+52.07865168539326, y1+20.89887640449438, x1+52.24719101123595, y1+21.06741573033708, x1+52.41573033707865, y1+21.235955056179776, x1+52.58426966292135, y1+21.40449438202247, x1+52.75280898876405, y1+21.573033707865168, x1+52.92134831460674, y1+21.741573033707866, x1+53.08988764044943, y1+21.91011235955056, x1+53.258426966292134, y1+22.078651685393258, x1+53.426966292134836, y1+22.247191011235955, x1+53.59550561797753, y1+22.41573033707865, x1+53.764044943820224, y1+22.584269662921347, x1+53.764044943820224, y1+22.752808988764045, x1+53.93258426966292, y1+22.92134831460674, x1+54.10112359550562, y1+23.089887640449437, x1+54.269662921348306, y1+23.258426966292138, x1+54.269662921348306, y1+23.426966292134832, x1+54.438202247191015, y1+23.595505617977526, x1+54.60674157303371, y1+23.764044943820224, x1+54.7752808988764, y1+23.93258426966292, x1+54.7752808988764, y1+24.101123595505616, x1+54.94382022471909, y1+24.269662921348313, x1+55.112359550561806, y1+24.438202247191015, x1+55.112359550561806, y1+24.60674157303371, x1+55.28089887640449, y1+24.775280898876407, x1+55.28089887640449, y1+24.943820224719104, x1+55.4494382022472, y1+25.1123595505618, x1+55.4494382022472, y1+25.280898876404496, x1+55.61797752808989, y1+25.44943820224719, x1+55.78651685393259, y1+25.617977528089888, x1+55.78651685393259, y1+25.786516853932582, x1+55.955056179775276, y1+25.955056179775276, x1+55.955056179775276, y1+26.123595505617974, x1+56.12359550561798, y1+26.292134831460675, x1+56.12359550561798, y1+26.46067415730337, x1+56.12359550561798, y1+26.629213483146067, x1+56.29213483146067, y1+26.797752808988765, x1+56.29213483146067, y1+26.96629213483146, x1+56.460674157303366, y1+27.134831460674153, x1+56.460674157303366, y1+27.303370786516854, x1+56.629213483146074, y1+27.471910112359545, x1+56.629213483146074, y1+27.640449438202246, x1+56.629213483146074, y1+27.808988764044944, x1+56.79775280898876, y1+27.977528089887638, x1+56.79775280898876, y1+28.146067415730336, x1+56.79775280898876, y1+28.314606741573037, x1+56.96629213483146, y1+28.48314606741573, x1+56.96629213483146, y1+28.651685393258425, x1+56.96629213483146, y1+28.820224719101123, x1+57.13483146067416, y1+28.98876404494382, x1+57.13483146067416, y1+29.157303370786522, x1+57.13483146067416, y1+29.325842696629216, x1+57.13483146067416, y1+29.494382022471914, x1+57.13483146067416, y1+29.662921348314608, x1+57.30337078651685, y1+29.831460674157302, x1+57.30337078651685, y1+30.0, x1+57.30337078651685, y1+30.168539325842698, x1+57.30337078651685, y1+30.337078651685392, x1+57.30337078651685, y1+30.505617977528093, x1+57.30337078651685, y1+30.674157303370784, x1+57.30337078651685, y1+30.842696629213478, x1+57.30337078651685, y1+31.01123595505618, x1+57.30337078651685, y1+31.179775280898884, x1+57.471910112359545, y1+31.348314606741575, x1+57.471910112359545, y1+31.51685393258427, x1+57.471910112359545, y1+31.68539325842697, x1+57.471910112359545, y1+31.853932584269664, x1+57.471910112359545, y1+32.02247191011236, x1+57.471910112359545, y1+32.19101123595506, x1+57.471910112359545, y1+32.359550561797754, x1+57.471910112359545, y1+32.52808988764045, x1+57.471910112359545, y1+32.69662921348314, x1+57.471910112359545, y1+32.86516853932584, x1+57.471910112359545, y1+33.03370786516854, x1+57.471910112359545, y1+33.20224719101123, x1+57.471910112359545, y1+33.37078651685393, x1+57.471910112359545, y1+33.53932584269663, x1+57.471910112359545, y1+33.70786516853932, x1+57.30337078651685, y1+33.87640449438202, x1+57.30337078651685, y1+34.044943820224724, x1+57.30337078651685, y1+34.21348314606742, x1+57.30337078651685, y1+34.38202247191011, x1+57.30337078651685, y1+34.55056179775281, x1+57.30337078651685, y1+34.71910112359551, x1+57.30337078651685, y1+34.8876404494382, x1+57.30337078651685, y1+35.0561797752809, x1+57.13483146067416, y1+35.2247191011236, x1+57.13483146067416, y1+35.39325842696629, x1+57.13483146067416, y1+35.561797752808985, x1+57.13483146067416, y1+35.73033707865169, x1+56.96629213483146, y1+35.89887640449438, x1+56.96629213483146, y1+36.067415730337075, x1+56.96629213483146, y1+36.235955056179776, x1+56.79775280898876, y1+36.40449438202247, x1+56.79775280898876, y1+36.57303370786517, x1+56.79775280898876, y1+36.74157303370787, x1+56.629213483146074, y1+36.91011235955057, x1+56.629213483146074, y1+37.07865168539326, x1+56.460674157303366, y1+37.247191011235955, x1+56.460674157303366, y1+37.41573033707865, x1+56.460674157303366, y1+37.58426966292135, x1+56.29213483146067, y1+37.75280898876405, x1+56.29213483146067, y1+37.92134831460674, x1+56.12359550561798, y1+38.08988764044943, x1+56.12359550561798, y1+38.25842696629213, x1+55.955056179775276, y1+38.42696629213483, x1+55.955056179775276, y1+38.59550561797752, x1+55.78651685393259, y1+38.76404494382023, x1+55.78651685393259, y1+38.932584269662925, x1+55.61797752808989, y1+39.10112359550562, x1+55.61797752808989, y1+39.26966292134831, x1+55.4494382022472, y1+39.438202247191015, x1+55.4494382022472, y1+39.60674157303371, x1+55.28089887640449, y1+39.77528089887641, x1+55.112359550561806, y1+39.943820224719104, x1+55.112359550561806, y1+40.1123595505618, x1+54.94382022471909, y1+40.28089887640449, x1+54.7752808988764, y1+40.44943820224719, x1+54.7752808988764, y1+40.61797752808988, x1+54.60674157303371, y1+40.786516853932575, x1+54.438202247191015, y1+40.95505617977528, x1+54.269662921348306, y1+41.12359550561798, x1+54.269662921348306, y1+41.29213483146068, x1+54.10112359550562, y1+41.46067415730337, x1+53.93258426966292, y1+41.62921348314607, x1+53.764044943820224, y1+41.79775280898876, x1+53.59550561797753, y1+41.96629213483146, x1+53.426966292134836, y1+42.13483146067416, x1+53.258426966292134, y1+42.30337078651686, x1+53.08988764044943, y1+42.47191011235955, x1+52.92134831460674, y1+42.640449438202246, x1+52.75280898876405, y1+42.80898876404494, x1+52.41573033707865, y1+42.97752808988764, x1+52.24719101123595, y1+43.146067415730336, x1+52.07865168539326, y1+43.31460674157304, x1+51.91011235955055, y1+43.48314606741573, x1+51.573033707865164, y1+43.651685393258425, x1+51.40449438202247, y1+43.82022471910112, x1+51.235955056179776, y1+43.98876404494382, x1+51.06741573033708, y1+44.157303370786515, x1+51.06741573033708, y1+44.32584269662922, x1+51.06741573033708, y1+44.49438202247191, x1+51.235955056179776, y1+44.662921348314605, x1+51.235955056179776, y1+44.8314606741573, x1+51.235955056179776, y1+45.0, x1+51.235955056179776, y1+45.168539325842694, x1+51.40449438202247, y1+45.337078651685395, x1+51.40449438202247, y1+45.50561797752809, x1+51.40449438202247, y1+45.674157303370784, x1+51.40449438202247, y1+45.84269662921348, x1+51.40449438202247, y1+46.01123595505618, x1+51.573033707865164, y1+46.17977528089887, x1+51.573033707865164, y1+46.34831460674157, x1+51.573033707865164, y1+46.516853932584276, x1+51.573033707865164, y1+46.68539325842697, x1+51.741573033707866, y1+46.853932584269664, x1+51.741573033707866, y1+47.02247191011236, x1+51.741573033707866, y1+47.19101123595505, x1+51.741573033707866, y1+47.35955056179775, x1+51.91011235955055, y1+47.52808988764045, x1+51.91011235955055, y1+47.69662921348315, x1+51.91011235955055, y1+47.86516853932584, x1+51.91011235955055, y1+48.03370786516854, x1+52.07865168539326, y1+48.20224719101123, x1+52.07865168539326, y1+48.370786516853926, x1+52.07865168539326, y1+48.53932584269663, x1+52.07865168539326, y1+48.70786516853933, x1+52.24719101123595, y1+48.87640449438203, x1+52.24719101123595, y1+49.044943820224724, x1+52.24719101123595, y1+49.21348314606742, x1+52.24719101123595, y1+49.38202247191011, x1+52.41573033707865, y1+49.55056179775281, x1+52.41573033707865, y1+49.7191011235955, x1+52.41573033707865, y1+49.88764044943821, x1+52.41573033707865, y1+50.05617977528091, x1+52.58426966292135, y1+50.2247191011236, x1+52.58426966292135, y1+50.39325842696629, x1+52.58426966292135, y1+50.56179775280899, x1+52.58426966292135, y1+50.73033707865168, x1+52.75280898876405, y1+50.89887640449438, x1+52.75280898876405, y1+51.06741573033708, x1+52.75280898876405, y1+51.235955056179776, x1+52.75280898876405, y1+51.40449438202247, x1+52.92134831460674, y1+51.573033707865164, x1+52.92134831460674, y1+51.741573033707866, x1+52.92134831460674, y1+51.91011235955055, x1+52.92134831460674, y1+52.07865168539326, x1+52.92134831460674, y1+52.24719101123595, x1+53.08988764044943, y1+52.41573033707865, x1+53.08988764044943, y1+52.58426966292135, x1+53.08988764044943, y1+52.75280898876405, x1+53.08988764044943, y1+52.92134831460674, x1+53.08988764044943, y1+53.08988764044943, x1+53.08988764044943, y1+53.258426966292134, x1+53.08988764044943, y1+53.426966292134836, x1+53.08988764044943, y1+53.59550561797753, x1+52.92134831460674, y1+53.764044943820224, x1+52.92134831460674, y1+53.93258426966292, x1+52.75280898876405, y1+54.10112359550562, x1+52.58426966292135, y1+54.269662921348306, x1+52.24719101123595, y1+54.438202247191015, x1+52.07865168539326, y1+54.60674157303371, x1+51.741573033707866, y1+54.7752808988764, x1+51.40449438202247, y1+54.94382022471909, x1+51.06741573033708, y1+55.112359550561806, x1+50.73033707865168, y1+55.28089887640449, x1+50.39325842696629, y1+55.4494382022472, x1+50.05617977528091, y1+55.61797752808989, x1+49.55056179775281, y1+55.78651685393259, x1+49.21348314606742, y1+55.955056179775276, x1+48.87640449438203, y1+56.12359550561798, x1+48.370786516853926, y1+56.29213483146067, x1+48.03370786516854, y1+56.460674157303366, x1+47.52808988764045, y1+56.629213483146074, x1+47.19101123595505, y1+56.79775280898876, x1+46.68539325842697, y1+56.96629213483146, x1+46.01123595505618, y1+57.13483146067416, x1+45.50561797752809, y1+57.30337078651685, x1+45.0, y1+57.471910112359545, x1+44.32584269662922, y1+57.640449438202246, x1+43.651685393258425, y1+57.80898876404495, x1+42.97752808988764, y1+57.97752808988764, x1+42.30337078651686, y1+58.14606741573034, x1+42.47191011235955, y1+58.314606741573044, x1+42.80898876404494, y1+58.48314606741573, x1+42.97752808988764, y1+58.65168539325843, x1+43.31460674157304, y1+58.82022471910113, x1+43.651685393258425, y1+58.98876404494383, x1+44.157303370786515, y1+59.157303370786515, x1+44.662921348314605, y1+59.325842696629216, x1+45.337078651685395, y1+59.49438202247191, x1+46.34831460674157, y1+59.662921348314605, x1+56.629213483146074, y1+59.8314606741573, x1+58.65168539325843, y1+60.0, x1+59.8314606741573, y1+60.1685393258427, x1+60.50561797752809, y1+60.337078651685395, x1+61.34831460674157, y1+60.50561797752809, x1+61.85393258426966, y1+60.674157303370784, x1+62.52808988764044, y1+60.84269662921347, x1+63.03370786516854, y1+61.011235955056186, x1+63.539325842696634, y1+61.17977528089887, x1+64.04494382022472, y1+61.34831460674157, x1+64.38202247191012, y1+61.51685393258427, x1+64.71910112359551, y1+61.685393258426956, x1+65.2247191011236, y1+61.85393258426966, x1+65.561797752809, y1+62.02247191011236, x1+65.89887640449437, y1+62.19101123595507, x1+66.23595505617976, y1+62.35955056179777, x1+66.57303370786516, y1+62.52808988764044, x1+66.91011235955057, y1+62.69662921348315, x1+67.24719101123596, y1+62.86516853932585, x1+67.41573033707864, y1+63.03370786516854, x1+67.75280898876404, y1+63.20224719101124, x1+68.08988764044945, y1+63.37078651685394, x1+68.25842696629213, y1+63.539325842696634, x1+68.59550561797754, y1+63.70786516853933, x1+68.76404494382022, y1+63.87640449438202, x1+69.10112359550563, y1+64.04494382022472, x1+69.26966292134831, y1+64.21348314606742, x1+69.43820224719101, y1+64.38202247191012, x1+69.7752808988764, y1+64.5505617977528, x1+69.94382022471909, y1+64.71910112359551, x1+70.1123595505618, y1+64.88764044943821, x1+70.4494382022472, y1+65.0561797752809, x1+70.6179775280899, y1+65.2247191011236, x1+70.78651685393258, y1+65.39325842696628, x1+70.95505617977528, y1+65.561797752809, x1+71.12359550561797, y1+65.73033707865169, x1+71.29213483146067, y1+65.89887640449437, x1+71.46067415730337, y1+66.06741573033707, x1+71.62921348314606, y1+66.23595505617976, x1+71.62921348314606, y1+66.40449438202246, x1+71.79775280898876, y1+66.57303370786516, x1+71.79775280898876, y1+66.74157303370787, x1+71.79775280898876, y1+66.91011235955057, x1+71.79775280898876, y1+67.07865168539325, x1+71.79775280898876, y1+67.24719101123596, x1+71.62921348314606, y1+67.41573033707864, x1+71.62921348314606, y1+67.58426966292134, x1+71.46067415730337, y1+67.75280898876404, x1+71.29213483146067, y1+67.92134831460675, x1+71.12359550561797, y1+68.08988764044945, x1+70.95505617977528, y1+68.25842696629213, x1+70.78651685393258, y1+68.42696629213484, x1+70.6179775280899, y1+68.59550561797754, x1+70.4494382022472, y1+68.76404494382022, x1+70.28089887640449, y1+68.93258426966293, x1+70.1123595505618, y1+69.10112359550563, x1+69.94382022471909, y1+69.26966292134831, x1+69.7752808988764, y1+69.43820224719101, x1+69.6067415730337, y1+69.6067415730337, x1+69.43820224719101, y1+69.7752808988764, x1+69.26966292134831, y1+69.94382022471909, x1+69.10112359550563, y1+70.1123595505618, x1+68.93258426966293, y1+70.28089887640449, x1+68.76404494382022, y1+70.4494382022472, x1+68.59550561797754, y1+70.6179775280899, x1+68.42696629213484, y1+70.78651685393258, x1+68.25842696629213, y1+70.95505617977528, x1+68.08988764044945, y1+71.12359550561797, x1+67.92134831460675, y1+71.29213483146067, x1+67.75280898876404, y1+71.46067415730337, x1+67.58426966292134, y1+71.62921348314606, x1+67.41573033707864, y1+71.79775280898876, x1+67.24719101123596, y1+71.96629213483145, x1+67.07865168539325, y1+72.13483146067415, x1+66.91011235955057, y1+72.30337078651685, x1+66.74157303370787, y1+72.47191011235955, x1+66.57303370786516, y1+72.64044943820225, x1+66.40449438202246, y1+72.80898876404494, x1+66.06741573033707, y1+72.97752808988764, x1+65.89887640449437, y1+73.14606741573034, x1+65.89887640449437, y1+73.14606741573034, x1+65.73033707865169, y1+73.14606741573034, x1+65.561797752809, y1+73.14606741573034, x1+65.39325842696628, y1+73.14606741573034, x1+65.2247191011236, y1+72.97752808988764, x1+65.0561797752809, y1+72.97752808988764, x1+64.88764044943821, y1+72.80898876404494, x1+64.71910112359551, y1+72.64044943820225, x1+64.5505617977528, y1+72.64044943820225, x1+64.38202247191012, y1+72.47191011235955, x1+64.21348314606742, y1+72.30337078651685, x1+64.04494382022472, y1+72.30337078651685, x1+63.87640449438202, y1+72.13483146067415, x1+63.70786516853933, y1+71.96629213483145, x1+63.539325842696634, y1+71.79775280898876, x1+63.37078651685394, y1+71.79775280898876, x1+63.20224719101124, y1+71.62921348314606, x1+63.03370786516854, y1+71.46067415730337, x1+62.86516853932585, y1+71.46067415730337, x1+62.69662921348315, y1+71.29213483146067, x1+62.52808988764044, y1+71.12359550561797, x1+62.35955056179777, y1+71.12359550561797, x1+62.19101123595507, y1+70.95505617977528, x1+62.02247191011236, y1+70.95505617977528, x1+61.85393258426966, y1+70.78651685393258, x1+61.685393258426956, y1+70.78651685393258, x1+61.51685393258427, y1+70.6179775280899, x1+61.34831460674157, y1+70.4494382022472, x1+61.17977528089887, y1+70.4494382022472, x1+61.011235955056186, y1+70.4494382022472, x1+60.84269662921347, y1+70.28089887640449, x1+60.674157303370784, y1+70.28089887640449, x1+60.50561797752809, y1+70.1123595505618, x1+60.337078651685395, y1+70.1123595505618, x1+60.1685393258427, y1+69.94382022471909, x1+60.0, y1+69.94382022471909, x1+59.8314606741573, y1+69.7752808988764, x1+59.662921348314605, y1+69.7752808988764, x1+59.49438202247191, y1+69.7752808988764, x1+59.325842696629216, y1+69.6067415730337, x1+59.157303370786515, y1+69.6067415730337, x1+58.98876404494383, y1+69.43820224719101, x1+58.82022471910113, y1+69.43820224719101, x1+58.65168539325843, y1+69.43820224719101, x1+58.48314606741573, y1+69.43820224719101, x1+58.314606741573044, y1+69.26966292134831, x1+58.14606741573034, y1+69.26966292134831, x1+57.97752808988764, y1+69.26966292134831, x1+57.80898876404495, y1+69.10112359550563, x1+57.640449438202246, y1+69.10112359550563, x1+57.471910112359545, y1+69.10112359550563, x1+57.30337078651685, y1+69.10112359550563, x1+57.13483146067416, y1+69.10112359550563, x1+56.96629213483146, y1+69.10112359550563, x1+56.79775280898876, y1+68.93258426966293, x1+56.629213483146074, y1+68.93258426966293, x1+56.460674157303366, y1+68.93258426966293, x1+56.29213483146067, y1+68.93258426966293, x1+56.12359550561798, y1+68.93258426966293, x1+55.955056179775276, y1+68.93258426966293, x1+55.78651685393259, y1+68.76404494382022, x1+55.61797752808989, y1+68.76404494382022, x1+55.4494382022472, y1+68.76404494382022, x1+55.28089887640449, y1+68.76404494382022, x1+55.112359550561806, y1+68.76404494382022, x1+54.94382022471909, y1+68.76404494382022, x1+54.7752808988764, y1+68.76404494382022, x1+54.60674157303371, y1+68.76404494382022, x1+54.438202247191015, y1+68.76404494382022, x1+54.269662921348306, y1+68.59550561797754, x1+54.10112359550562, y1+68.59550561797754, x1+53.93258426966292, y1+68.59550561797754, x1+53.764044943820224, y1+68.59550561797754, x1+53.59550561797753, y1+68.59550561797754, x1+53.426966292134836, y1+68.59550561797754, x1+53.258426966292134, y1+68.59550561797754, x1+53.08988764044943, y1+68.59550561797754, x1+52.92134831460674, y1+68.59550561797754, x1+52.75280898876405, y1+68.59550561797754, x1+52.58426966292135, y1+68.59550561797754, x1+52.41573033707865, y1+68.59550561797754, x1+52.24719101123595, y1+68.59550561797754, x1+52.07865168539326, y1+68.59550561797754, x1+51.91011235955055, y1+68.59550561797754, x1+51.741573033707866, y1+68.42696629213484, x1+51.573033707865164, y1+68.42696629213484, x1+51.40449438202247, y1+68.42696629213484, x1+51.235955056179776, y1+68.42696629213484, x1+51.06741573033708, y1+68.42696629213484, x1+50.89887640449438, y1+68.42696629213484, x1+50.73033707865168, y1+68.42696629213484, x1+50.56179775280899, y1+68.42696629213484, x1+50.39325842696629, y1+68.42696629213484, x1+50.2247191011236, y1+68.42696629213484, x1+50.05617977528091, y1+68.42696629213484, x1+49.88764044943821, y1+68.42696629213484, x1+49.7191011235955, y1+68.42696629213484, x1+49.55056179775281, y1+68.42696629213484, x1+49.38202247191011, y1+68.42696629213484, x1+49.21348314606742, y1+68.42696629213484, x1+49.044943820224724, y1+68.42696629213484, x1+48.87640449438203, y1+68.25842696629213, x1+48.70786516853933, y1+68.25842696629213, x1+48.53932584269663, y1+68.25842696629213, x1+48.370786516853926, y1+68.25842696629213, x1+48.20224719101123, y1+68.25842696629213, x1+48.03370786516854, y1+68.25842696629213, x1+47.86516853932584, y1+68.25842696629213, x1+47.69662921348315, y1+68.25842696629213, x1+47.52808988764045, y1+68.25842696629213, x1+47.35955056179775, y1+68.25842696629213, x1+47.19101123595505, y1+68.25842696629213, x1+47.02247191011236, y1+68.25842696629213, x1+46.853932584269664, y1+68.25842696629213, x1+46.68539325842697, y1+68.25842696629213, x1+46.516853932584276, y1+68.25842696629213, x1+46.34831460674157, y1+68.25842696629213, x1+46.17977528089887, y1+68.08988764044945, x1+46.01123595505618, y1+68.08988764044945, x1+45.84269662921348, y1+68.08988764044945, x1+45.674157303370784, y1+68.08988764044945, x1+45.50561797752809, y1+68.08988764044945, x1+45.337078651685395, y1+68.08988764044945, x1+45.168539325842694, y1+68.08988764044945, x1+45.0, y1+68.08988764044945, x1+44.8314606741573, y1+67.92134831460675, x1+44.662921348314605, y1+67.92134831460675, x1+44.49438202247191, y1+67.92134831460675, x1+44.32584269662922, y1+67.92134831460675, x1+44.157303370786515, y1+67.92134831460675, x1+43.98876404494382, y1+67.92134831460675, x1+43.82022471910112, y1+67.92134831460675, x1+43.651685393258425, y1+67.75280898876404, x1+43.48314606741573, y1+67.75280898876404, x1+43.31460674157304, y1+67.75280898876404, x1+43.146067415730336, y1+67.75280898876404, x1+42.97752808988764, y1+67.58426966292134, x1+42.80898876404494, y1+67.58426966292134, x1+42.640449438202246, y1+67.58426966292134, x1+42.47191011235955, y1+67.58426966292134, x1+42.30337078651686, y1+67.58426966292134, x1+42.13483146067416, y1+67.41573033707864, x1+41.96629213483146, y1+67.41573033707864, x1+41.79775280898876, y1+67.41573033707864, x1+41.62921348314607, y1+67.24719101123596, x1+41.46067415730337, y1+67.24719101123596, x1+41.29213483146068, y1+67.24719101123596, x1+41.12359550561798, y1+67.07865168539325, x1+40.95505617977528, y1+67.07865168539325, x1+40.786516853932575, y1+67.07865168539325, x1+40.61797752808988, y1+66.91011235955057, x1+40.44943820224719, y1+66.91011235955057, x1+40.28089887640449, y1+66.74157303370787, x1+40.1123595505618, y1+66.74157303370787, x1+39.943820224719104, y1+66.74157303370787, x1+39.77528089887641, y1+66.57303370786516, x1+39.60674157303371, y1+66.57303370786516, x1+39.438202247191015, y1+66.40449438202246, x1+39.26966292134831, y1+66.40449438202246, x1+39.10112359550562, y1+66.23595505617976, x1+38.932584269662925, y1+66.23595505617976, x1+38.76404494382023, y1+66.06741573033707, x1+38.59550561797752, y1+66.06741573033707, x1+38.42696629213483, y1+65.89887640449437, x1+38.25842696629213, y1+65.89887640449437, x1+38.08988764044943, y1+65.73033707865169, x1+37.92134831460674, y1+65.73033707865169, x1+37.75280898876405, y1+65.561797752809, x1+37.58426966292135, y1+65.561797752809, x1+37.41573033707865, y1+65.39325842696628, x1+37.247191011235955, y1+65.39325842696628, x1+37.07865168539326, y1+65.561797752809, x1+36.91011235955057, y1+65.561797752809, x1+36.74157303370787, y1+65.73033707865169, x1+36.57303370786517, y1+65.73033707865169, x1+36.40449438202247, y1+65.89887640449437, x1+36.235955056179776, y1+65.89887640449437, x1+36.067415730337075, y1+66.06741573033707, x1+35.89887640449438, y1+66.06741573033707, x1+35.73033707865169, y1+66.23595505617976, x1+35.561797752808985, y1+66.23595505617976, x1+35.39325842696629, y1+66.40449438202246, x1+35.2247191011236, y1+66.40449438202246, x1+35.0561797752809, y1+66.57303370786516, x1+34.8876404494382, y1+66.57303370786516, x1+34.71910112359551, y1+66.74157303370787, x1+34.55056179775281, y1+66.74157303370787, x1+34.38202247191011, y1+66.74157303370787, x1+34.21348314606742, y1+66.91011235955057, x1+34.044943820224724, y1+66.91011235955057, x1+33.87640449438202, y1+67.07865168539325, x1+33.70786516853932, y1+67.07865168539325, x1+33.53932584269663, y1+67.07865168539325, x1+33.37078651685393, y1+67.24719101123596, x1+33.20224719101123, y1+67.24719101123596, x1+33.03370786516854, y1+67.24719101123596, x1+32.86516853932584, y1+67.41573033707864, x1+32.69662921348314, y1+67.41573033707864, x1+32.52808988764045, y1+67.41573033707864, x1+32.359550561797754, y1+67.58426966292134, x1+32.19101123595506, y1+67.58426966292134, x1+32.02247191011236, y1+67.58426966292134, x1+31.853932584269664, y1+67.58426966292134, x1+31.68539325842697, y1+67.75280898876404, x1+31.51685393258427, y1+67.75280898876404, x1+31.348314606741575, y1+67.75280898876404, x1+31.179775280898884, y1+67.75280898876404, x1+31.01123595505618, y1+67.75280898876404, x1+30.842696629213478, y1+67.92134831460675, x1+30.674157303370784, y1+67.92134831460675, x1+30.505617977528093, y1+67.92134831460675, x1+30.337078651685392, y1+67.92134831460675, x1+30.168539325842698, y1+67.92134831460675, x1+30.0, y1+67.92134831460675, x1+29.831460674157302, y1+68.08988764044945, x1+29.662921348314608, y1+68.08988764044945, x1+29.494382022471914, y1+68.08988764044945, x1+29.325842696629216, y1+68.08988764044945, x1+29.157303370786522, y1+68.08988764044945, x1+28.98876404494382, y1+68.08988764044945, x1+28.820224719101123, y1+68.08988764044945, x1+28.651685393258425, y1+68.08988764044945, x1+28.48314606741573, y1+68.08988764044945, x1+28.314606741573037, y1+68.25842696629213, x1+28.146067415730336, y1+68.25842696629213, x1+27.977528089887638, y1+68.25842696629213, x1+27.808988764044944, y1+68.25842696629213, x1+27.640449438202246, y1+68.25842696629213, x1+27.471910112359545, y1+68.25842696629213, x1+27.303370786516854, y1+68.25842696629213, x1+27.134831460674153, y1+68.25842696629213, x1+26.96629213483146, y1+68.25842696629213, x1+26.797752808988765, y1+68.25842696629213, x1+26.629213483146067, y1+68.25842696629213, x1+26.46067415730337, y1+68.25842696629213, x1+26.292134831460675, y1+68.25842696629213, x1+26.123595505617974, y1+68.25842696629213, x1+25.955056179775276, y1+68.25842696629213, x1+25.786516853932582, y1+68.25842696629213, x1+25.617977528089888, y1+68.42696629213484, x1+25.44943820224719, y1+68.42696629213484, x1+25.280898876404496, y1+68.42696629213484, x1+25.1123595505618, y1+68.42696629213484, x1+24.943820224719104, y1+68.42696629213484, x1+24.775280898876407, y1+68.42696629213484, x1+24.60674157303371, y1+68.42696629213484, x1+24.438202247191015, y1+68.42696629213484, x1+24.269662921348313, y1+68.42696629213484, x1+24.101123595505616, y1+68.42696629213484, x1+23.93258426966292, y1+68.42696629213484, x1+23.764044943820224, y1+68.42696629213484, x1+23.595505617977526, y1+68.42696629213484, x1+23.426966292134832, y1+68.42696629213484, x1+23.258426966292138, y1+68.42696629213484, x1+23.089887640449437, y1+68.42696629213484, x1+22.92134831460674, y1+68.42696629213484, x1+22.752808988764045, y1+68.59550561797754, x1+22.584269662921347, y1+68.59550561797754, x1+22.41573033707865, y1+68.59550561797754, x1+22.247191011235955, y1+68.59550561797754, x1+22.078651685393258, y1+68.59550561797754, x1+21.91011235955056, y1+68.59550561797754, x1+21.741573033707866, y1+68.59550561797754, x1+21.573033707865168, y1+68.59550561797754, x1+21.40449438202247, y1+68.59550561797754, x1+21.235955056179776, y1+68.59550561797754, x1+21.06741573033708, y1+68.59550561797754, x1+20.89887640449438, y1+68.59550561797754, x1+20.730337078651687, y1+68.59550561797754, x1+20.56179775280899, y1+68.59550561797754, x1+20.393258426966288, y1+68.59550561797754, x1+20.224719101123593, y1+68.76404494382022, x1+20.0561797752809, y1+68.76404494382022, x1+19.887640449438205, y1+68.76404494382022, x1+19.719101123595507, y1+68.76404494382022, x1+19.55056179775281, y1+68.76404494382022, x1+19.382022471910116, y1+68.76404494382022, x1+19.213483146067414, y1+68.76404494382022, x1+19.044943820224717, y1+68.76404494382022, x1+18.876404494382026, y1+68.76404494382022, x1+18.707865168539325, y1+68.93258426966293, x1+18.53932584269663, y1+68.93258426966293, x1+18.370786516853936, y1+68.93258426966293, x1+18.202247191011235, y1+68.93258426966293, x1+18.033707865168537, y1+68.93258426966293, x1+17.865168539325843, y1+68.93258426966293, x1+17.696629213483146, y1+69.10112359550563, x1+17.52808988764045, y1+69.10112359550563, x1+17.359550561797754, y1+69.10112359550563, x1+17.191011235955056, y1+69.10112359550563, x1+17.022471910112362, y1+69.10112359550563, x1+16.85393258426966, y1+69.26966292134831, x1+16.685393258426966, y1+69.26966292134831, x1+16.51685393258427, y1+69.26966292134831, x1+16.34831460674157, y1+69.26966292134831, x1+16.179775280898877, y1+69.43820224719101, x1+16.01123595505618, y1+69.43820224719101, x1+15.842696629213485, y1+69.43820224719101, x1+15.674157303370787, y1+69.43820224719101, x1+15.50561797752809, y1+69.6067415730337, x1+15.337078651685392, y1+69.6067415730337, x1+15.168539325842696, y1+69.7752808988764, x1+15.0, y1+69.7752808988764, x1+14.831460674157304, y1+69.7752808988764, x1+14.662921348314608, y1+69.94382022471909, x1+14.49438202247191, y1+69.94382022471909, x1+14.325842696629213, y1+70.1123595505618, x1+14.157303370786519, y1+70.1123595505618, x1+13.988764044943819, y1+70.28089887640449, x1+13.820224719101123, y1+70.28089887640449, x1+13.651685393258427, y1+70.4494382022472, x1+13.48314606741573, y1+70.4494382022472, x1+13.314606741573034, y1+70.6179775280899, x1+13.146067415730338, y1+70.6179775280899, x1+12.977528089887638, y1+70.78651685393258, x1+12.808988764044944, y1+70.78651685393258, x1+12.640449438202248, y1+70.95505617977528, x1+12.471910112359552, y1+70.95505617977528, x1+12.303370786516854, y1+71.12359550561797, x1+12.134831460674157, y1+71.12359550561797, x1+11.96629213483146, y1+71.29213483146067, x1+11.797752808988763, y1+71.46067415730337, x1+11.629213483146069, y1+71.46067415730337, x1+11.46067415730337, y1+71.62921348314606, x1+11.292134831460674, y1+71.79775280898876, x1+11.123595505617978, y1+71.79775280898876, x1+10.95505617977528, y1+71.96629213483145, x1+10.786516853932584, y1+72.13483146067415, x1+10.617977528089888, y1+72.30337078651685, x1+10.44943820224719, y1+72.30337078651685, x1+10.280898876404494, y1+72.47191011235955, x1+10.112359550561797, y1+72.64044943820225, x1+9.943820224719103, y1+72.64044943820225, x1+9.775280898876405, y1+72.80898876404494, x1+9.606741573033707, y1+72.97752808988764, x1+9.438202247191013, y1+72.97752808988764, x1+9.269662921348315, y1+73.14606741573034, x1+9.101123595505618, y1+73.14606741573034, x1+8.932584269662922, y1+73.14606741573034]
	ar2=[x1+32.19101123595506, y1+58.14606741573034, x1+34.044943820224724, y1+58.48314606741573, x1+35.73033707865169, y1+58.65168539325843, x1+37.92134831460674, y1+58.65168539325843, x1+40.1123595505618, y1+58.48314606741573, x1+41.62921348314607, y1+58.314606741573044, x1+43.48314606741573, y1+57.80898876404495]
	ar3=[x1+21.573033707865168, y1+53.764044943820224, x1+23.93258426966292, y1+52.24719101123595, x1+26.292134831460675, y1+50.89887640449438, x1+28.651685393258425, y1+49.7191011235955, x1+31.68539325842697, y1+48.53932584269663, x1+35.2247191011236, y1+47.86516853932584, x1+39.10112359550562, y1+47.86516853932584, x1+42.13483146067416, y1+48.20224719101123, x1+44.8314606741573, y1+49.044943820224724, x1+47.69662921348315, y1+50.2247191011236, x1+50.39325842696629, y1+51.573033707865164, x1+52.24719101123595, y1+52.75280898876405, x1+53.258426966292134, y1+53.59550561797753]
	ar4=[x1+23.595505617977526, y1+44.157303370786515, x1+25.786516853932582, y1+42.80898876404494, x1+27.977528089887638, y1+41.62921348314607, x1+30.842696629213478, y1+40.44943820224719, x1+34.21348314606742, y1+39.77528089887641, x1+39.26966292134831, y1+39.77528089887641, x1+43.31460674157304, y1+40.61797752808988, x1+46.516853932584276, y1+41.62921348314607, x1+49.21348314606742, y1+42.80898876404494, x1+51.235955056179776, y1+44.157303370786515]
	ar5=[x1+30.674157303370784, y1+27.977528089887638, x1+44.157303370786515, y1+27.977528089887638]
	ar6=[x1+37.41573033707865, y1+21.235955056179776, x1+37.41573033707865, y1+34.71910112359551]



	cc.create_polygon(ar1,fill=col,outline=col2,width=1)
	cc.create_line(ar2,fill=col2,width=1)
	cc.create_line(ar3,fill=col2,width=1)
	cc.create_line(ar4,fill=col2,width=1)
	cc.create_line(ar5,fill=col2,width=1)
	cc.create_line(ar6,fill=col2,width=1)



def draw_bishop(col,pos):
	global can,st

	x,y=pos[0],pos[1]
	arr=valid1(x,y)

	x=arr[0]
	y=arr[1]
	sz=75



	x1=x-sz-3.75
	x2=x-3.75
	y1=y-sz-3.75
	y2=y-3.75


	if col==0:
		col="#ffffff"
		col2="#333333"
	elif col==1:
		col="#333333"
		col2="#ffffff"


	ar1=[x1+8.932584269662922, y1+73.14606741573034, x1+8.595505617977528, y1+72.97752808988764, x1+8.42696629213483, y1+72.80898876404494, x1+8.258426966292134, y1+72.64044943820225, x1+7.9213483146067425, y1+72.47191011235955, x1+7.752808988764045, y1+72.30337078651685, x1+7.584269662921348, y1+72.13483146067415, x1+7.415730337078652, y1+71.96629213483145, x1+7.247191011235955, y1+71.79775280898876, x1+7.078651685393259, y1+71.62921348314606, x1+6.910112359550562, y1+71.46067415730337, x1+6.741573033707865, y1+71.29213483146067, x1+6.573033707865169, y1+71.12359550561797, x1+6.404494382022472, y1+70.95505617977528, x1+6.235955056179776, y1+70.78651685393258, x1+6.067415730337078, y1+70.6179775280899, x1+5.8988764044943816, y1+70.4494382022472, x1+5.730337078651685, y1+70.28089887640449, x1+5.561797752808989, y1+70.1123595505618, x1+5.393258426966292, y1+69.94382022471909, x1+5.224719101123595, y1+69.7752808988764, x1+5.056179775280898, y1+69.6067415730337, x1+4.887640449438202, y1+69.43820224719101, x1+4.7191011235955065, y1+69.26966292134831, x1+4.550561797752809, y1+69.10112359550563, x1+4.382022471910113, y1+68.93258426966293, x1+4.213483146067415, y1+68.76404494382022, x1+4.044943820224719, y1+68.59550561797754, x1+3.8764044943820224, y1+68.42696629213484, x1+3.707865168539326, y1+68.25842696629213, x1+3.5393258426966296, y1+68.08988764044945, x1+3.3707865168539324, y1+67.92134831460675, x1+3.3707865168539324, y1+67.75280898876404, x1+3.202247191011236, y1+67.58426966292134, x1+3.033707865168539, y1+67.41573033707864, x1+2.8651685393258424, y1+67.24719101123596, x1+2.8651685393258424, y1+67.07865168539325, x1+2.8651685393258424, y1+66.91011235955057, x1+2.8651685393258424, y1+66.74157303370787, x1+3.033707865168539, y1+66.57303370786516, x1+3.033707865168539, y1+66.40449438202246, x1+3.202247191011236, y1+66.23595505617976, x1+3.202247191011236, y1+66.06741573033707, x1+3.3707865168539324, y1+65.89887640449437, x1+3.5393258426966296, y1+65.73033707865169, x1+3.707865168539326, y1+65.561797752809, x1+3.8764044943820224, y1+65.39325842696628, x1+4.213483146067415, y1+65.2247191011236, x1+4.382022471910113, y1+65.0561797752809, x1+4.550561797752809, y1+64.88764044943821, x1+4.7191011235955065, y1+64.71910112359551, x1+4.887640449438202, y1+64.5505617977528, x1+5.224719101123595, y1+64.38202247191012, x1+5.393258426966292, y1+64.21348314606742, x1+5.730337078651685, y1+64.04494382022472, x1+5.8988764044943816, y1+63.87640449438202, x1+6.067415730337078, y1+63.70786516853933, x1+6.404494382022472, y1+63.539325842696634, x1+6.573033707865169, y1+63.37078651685394, x1+6.910112359550562, y1+63.20224719101124, x1+7.247191011235955, y1+63.03370786516854, x1+7.415730337078652, y1+62.86516853932585, x1+7.752808988764045, y1+62.69662921348315, x1+8.089887640449438, y1+62.52808988764044, x1+8.42696629213483, y1+62.35955056179777, x1+8.764044943820226, y1+62.19101123595507, x1+9.101123595505618, y1+62.02247191011236, x1+9.438202247191013, y1+61.85393258426966, x1+9.943820224719103, y1+61.685393258426956, x1+10.280898876404494, y1+61.51685393258427, x1+10.786516853932584, y1+61.34831460674157, x1+11.123595505617978, y1+61.17977528089887, x1+11.629213483146069, y1+61.011235955056186, x1+12.134831460674157, y1+60.84269662921347, x1+12.808988764044944, y1+60.674157303370784, x1+13.48314606741573, y1+60.50561797752809, x1+14.157303370786519, y1+60.337078651685395, x1+14.831460674157304, y1+60.1685393258427, x1+16.01123595505618, y1+60.0, x1+18.202247191011235, y1+59.8314606741573, x1+28.48314606741573, y1+59.662921348314605, x1+29.325842696629216, y1+59.49438202247191, x1+30.0, y1+59.325842696629216, x1+30.505617977528093, y1+59.157303370786515, x1+31.01123595505618, y1+58.98876404494383, x1+31.348314606741575, y1+58.82022471910113, x1+31.68539325842697, y1+58.65168539325843, x1+32.02247191011236, y1+58.48314606741573, x1+32.19101123595506, y1+58.314606741573044, x1+32.359550561797754, y1+58.14606741573034, x1+31.68539325842697, y1+57.97752808988764, x1+31.01123595505618, y1+57.80898876404495, x1+30.337078651685392, y1+57.640449438202246, x1+29.662921348314608, y1+57.471910112359545, x1+29.157303370786522, y1+57.30337078651685, x1+28.651685393258425, y1+57.13483146067416, x1+28.146067415730336, y1+56.96629213483146, x1+27.640449438202246, y1+56.79775280898876, x1+27.134831460674153, y1+56.629213483146074, x1+26.629213483146067, y1+56.460674157303366, x1+26.292134831460675, y1+56.29213483146067, x1+25.786516853932582, y1+56.12359550561798, x1+25.44943820224719, y1+55.955056179775276, x1+25.1123595505618, y1+55.78651685393259, x1+24.775280898876407, y1+55.61797752808989, x1+24.269662921348313, y1+55.4494382022472, x1+23.93258426966292, y1+55.28089887640449, x1+23.595505617977526, y1+55.112359550561806, x1+23.258426966292138, y1+54.94382022471909, x1+22.92134831460674, y1+54.7752808988764, x1+22.584269662921347, y1+54.60674157303371, x1+22.41573033707865, y1+54.438202247191015, x1+22.078651685393258, y1+54.269662921348306, x1+21.91011235955056, y1+54.10112359550562, x1+21.741573033707866, y1+53.93258426966292, x1+21.741573033707866, y1+53.764044943820224, x1+21.573033707865168, y1+53.59550561797753, x1+21.573033707865168, y1+53.426966292134836, x1+21.573033707865168, y1+53.258426966292134, x1+21.573033707865168, y1+53.08988764044943, x1+21.573033707865168, y1+52.92134831460674, x1+21.573033707865168, y1+52.75280898876405, x1+21.573033707865168, y1+52.58426966292135, x1+21.741573033707866, y1+52.41573033707865, x1+21.741573033707866, y1+52.24719101123595, x1+21.741573033707866, y1+52.07865168539326, x1+21.741573033707866, y1+51.91011235955055, x1+21.741573033707866, y1+51.741573033707866, x1+21.91011235955056, y1+51.573033707865164, x1+21.91011235955056, y1+51.40449438202247, x1+21.91011235955056, y1+51.235955056179776, x1+21.91011235955056, y1+51.06741573033708, x1+22.078651685393258, y1+50.89887640449438, x1+22.078651685393258, y1+50.73033707865168, x1+22.078651685393258, y1+50.56179775280899, x1+22.078651685393258, y1+50.39325842696629, x1+22.247191011235955, y1+50.2247191011236, x1+22.247191011235955, y1+50.05617977528091, x1+22.247191011235955, y1+49.88764044943821, x1+22.247191011235955, y1+49.7191011235955, x1+22.41573033707865, y1+49.55056179775281, x1+22.41573033707865, y1+49.38202247191011, x1+22.41573033707865, y1+49.21348314606742, x1+22.41573033707865, y1+49.044943820224724, x1+22.584269662921347, y1+48.87640449438203, x1+22.584269662921347, y1+48.70786516853933, x1+22.584269662921347, y1+48.53932584269663, x1+22.584269662921347, y1+48.370786516853926, x1+22.752808988764045, y1+48.20224719101123, x1+22.752808988764045, y1+48.03370786516854, x1+22.752808988764045, y1+47.86516853932584, x1+22.752808988764045, y1+47.69662921348315, x1+22.752808988764045, y1+47.52808988764045, x1+22.92134831460674, y1+47.35955056179775, x1+22.92134831460674, y1+47.19101123595505, x1+22.92134831460674, y1+47.02247191011236, x1+23.089887640449437, y1+46.853932584269664, x1+23.089887640449437, y1+46.68539325842697, x1+23.089887640449437, y1+46.516853932584276, x1+23.089887640449437, y1+46.34831460674157, x1+23.089887640449437, y1+46.17977528089887, x1+23.258426966292138, y1+46.01123595505618, x1+23.258426966292138, y1+45.84269662921348, x1+23.258426966292138, y1+45.674157303370784, x1+23.258426966292138, y1+45.50561797752809, x1+23.426966292134832, y1+45.337078651685395, x1+23.426966292134832, y1+45.168539325842694, x1+23.426966292134832, y1+45.0, x1+23.426966292134832, y1+44.8314606741573, x1+23.595505617977526, y1+44.662921348314605, x1+23.595505617977526, y1+44.49438202247191, x1+23.595505617977526, y1+44.32584269662922, x1+23.595505617977526, y1+44.157303370786515, x1+23.426966292134832, y1+43.98876404494382, x1+23.258426966292138, y1+43.82022471910112, x1+23.089887640449437, y1+43.651685393258425, x1+22.92134831460674, y1+43.48314606741573, x1+22.584269662921347, y1+43.31460674157304, x1+22.41573033707865, y1+43.146067415730336, x1+22.247191011235955, y1+42.97752808988764, x1+22.078651685393258, y1+42.80898876404494, x1+21.741573033707866, y1+42.640449438202246, x1+21.573033707865168, y1+42.47191011235955, x1+21.40449438202247, y1+42.30337078651686, x1+21.235955056179776, y1+42.13483146067416, x1+21.06741573033708, y1+41.96629213483146, x1+20.89887640449438, y1+41.79775280898876, x1+20.730337078651687, y1+41.62921348314607, x1+20.730337078651687, y1+41.46067415730337, x1+20.56179775280899, y1+41.29213483146068, x1+20.393258426966288, y1+41.12359550561798, x1+20.224719101123593, y1+40.95505617977528, x1+20.0561797752809, y1+40.786516853932575, x1+20.0561797752809, y1+40.61797752808988, x1+19.887640449438205, y1+40.44943820224719, x1+19.719101123595507, y1+40.28089887640449, x1+19.55056179775281, y1+40.1123595505618, x1+19.55056179775281, y1+39.943820224719104, x1+19.382022471910116, y1+39.77528089887641, x1+19.382022471910116, y1+39.60674157303371, x1+19.213483146067414, y1+39.438202247191015, x1+19.044943820224717, y1+39.26966292134831, x1+19.044943820224717, y1+39.10112359550562, x1+18.876404494382026, y1+38.932584269662925, x1+18.876404494382026, y1+38.76404494382023, x1+18.707865168539325, y1+38.59550561797752, x1+18.707865168539325, y1+38.42696629213483, x1+18.53932584269663, y1+38.25842696629213, x1+18.53932584269663, y1+38.08988764044943, x1+18.370786516853936, y1+37.92134831460674, x1+18.370786516853936, y1+37.75280898876405, x1+18.202247191011235, y1+37.58426966292135, x1+18.202247191011235, y1+37.41573033707865, x1+18.202247191011235, y1+37.247191011235955, x1+18.033707865168537, y1+37.07865168539326, x1+18.033707865168537, y1+36.91011235955057, x1+18.033707865168537, y1+36.74157303370787, x1+17.865168539325843, y1+36.57303370786517, x1+17.865168539325843, y1+36.40449438202247, x1+17.865168539325843, y1+36.235955056179776, x1+17.696629213483146, y1+36.067415730337075, x1+17.696629213483146, y1+35.89887640449438, x1+17.696629213483146, y1+35.73033707865169, x1+17.52808988764045, y1+35.561797752808985, x1+17.52808988764045, y1+35.39325842696629, x1+17.52808988764045, y1+35.2247191011236, x1+17.52808988764045, y1+35.0561797752809, x1+17.359550561797754, y1+34.8876404494382, x1+17.359550561797754, y1+34.71910112359551, x1+17.359550561797754, y1+34.55056179775281, x1+17.359550561797754, y1+34.38202247191011, x1+17.359550561797754, y1+34.21348314606742, x1+17.359550561797754, y1+34.044943820224724, x1+17.359550561797754, y1+33.87640449438202, x1+17.359550561797754, y1+33.70786516853932, x1+17.359550561797754, y1+33.53932584269663, x1+17.359550561797754, y1+33.37078651685393, x1+17.359550561797754, y1+33.20224719101123, x1+17.359550561797754, y1+33.03370786516854, x1+17.191011235955056, y1+32.86516853932584, x1+17.191011235955056, y1+32.69662921348314, x1+17.191011235955056, y1+32.52808988764045, x1+17.191011235955056, y1+32.359550561797754, x1+17.191011235955056, y1+32.19101123595506, x1+17.191011235955056, y1+32.02247191011236, x1+17.191011235955056, y1+31.853932584269664, x1+17.359550561797754, y1+31.68539325842697, x1+17.359550561797754, y1+31.51685393258427, x1+17.359550561797754, y1+31.348314606741575, x1+17.359550561797754, y1+31.179775280898884, x1+17.359550561797754, y1+31.01123595505618, x1+17.359550561797754, y1+30.842696629213478, x1+17.359550561797754, y1+30.674157303370784, x1+17.359550561797754, y1+30.505617977528093, x1+17.359550561797754, y1+30.337078651685392, x1+17.359550561797754, y1+30.168539325842698, x1+17.359550561797754, y1+30.0, x1+17.52808988764045, y1+29.831460674157302, x1+17.52808988764045, y1+29.662921348314608, x1+17.52808988764045, y1+29.494382022471914, x1+17.52808988764045, y1+29.325842696629216, x1+17.52808988764045, y1+29.157303370786522, x1+17.696629213483146, y1+28.98876404494382, x1+17.696629213483146, y1+28.820224719101123, x1+17.696629213483146, y1+28.651685393258425, x1+17.696629213483146, y1+28.48314606741573, x1+17.865168539325843, y1+28.314606741573037, x1+17.865168539325843, y1+28.146067415730336, x1+17.865168539325843, y1+27.977528089887638, x1+18.033707865168537, y1+27.808988764044944, x1+18.033707865168537, y1+27.640449438202246, x1+18.202247191011235, y1+27.471910112359545, x1+18.202247191011235, y1+27.303370786516854, x1+18.202247191011235, y1+27.134831460674153, x1+18.370786516853936, y1+26.96629213483146, x1+18.370786516853936, y1+26.797752808988765, x1+18.53932584269663, y1+26.629213483146067, x1+18.53932584269663, y1+26.46067415730337, x1+18.707865168539325, y1+26.292134831460675, x1+18.707865168539325, y1+26.123595505617974, x1+18.876404494382026, y1+25.955056179775276, x1+18.876404494382026, y1+25.786516853932582, x1+19.044943820224717, y1+25.617977528089888, x1+19.044943820224717, y1+25.44943820224719, x1+19.213483146067414, y1+25.280898876404496, x1+19.213483146067414, y1+25.1123595505618, x1+19.382022471910116, y1+24.943820224719104, x1+19.382022471910116, y1+24.775280898876407, x1+19.55056179775281, y1+24.60674157303371, x1+19.719101123595507, y1+24.438202247191015, x1+19.719101123595507, y1+24.269662921348313, x1+19.887640449438205, y1+24.101123595505616, x1+20.0561797752809, y1+23.93258426966292, x1+20.0561797752809, y1+23.764044943820224, x1+20.224719101123593, y1+23.595505617977526, x1+20.393258426966288, y1+23.426966292134832, x1+20.56179775280899, y1+23.258426966292138, x1+20.56179775280899, y1+23.089887640449437, x1+20.730337078651687, y1+22.92134831460674, x1+20.89887640449438, y1+22.752808988764045, x1+21.06741573033708, y1+22.584269662921347, x1+21.235955056179776, y1+22.41573033707865, x1+21.235955056179776, y1+22.247191011235955, x1+21.40449438202247, y1+22.078651685393258, x1+21.573033707865168, y1+21.91011235955056, x1+21.741573033707866, y1+21.741573033707866, x1+21.91011235955056, y1+21.573033707865168, x1+22.078651685393258, y1+21.40449438202247, x1+22.247191011235955, y1+21.235955056179776, x1+22.41573033707865, y1+21.06741573033708, x1+22.584269662921347, y1+20.89887640449438, x1+22.752808988764045, y1+20.730337078651687, x1+22.92134831460674, y1+20.56179775280899, x1+23.258426966292138, y1+20.393258426966288, x1+23.426966292134832, y1+20.224719101123593, x1+23.595505617977526, y1+20.0561797752809, x1+23.764044943820224, y1+19.887640449438205, x1+23.93258426966292, y1+19.719101123595507, x1+24.101123595505616, y1+19.55056179775281, x1+24.438202247191015, y1+19.382022471910116, x1+24.60674157303371, y1+19.213483146067414, x1+24.775280898876407, y1+19.044943820224717, x1+24.943820224719104, y1+18.876404494382026, x1+25.280898876404496, y1+18.707865168539325, x1+25.44943820224719, y1+18.53932584269663, x1+25.617977528089888, y1+18.370786516853936, x1+25.955056179775276, y1+18.202247191011235, x1+26.123595505617974, y1+18.033707865168537, x1+26.292134831460675, y1+17.865168539325843, x1+26.629213483146067, y1+17.696629213483146, x1+26.797752808988765, y1+17.52808988764045, x1+26.96629213483146, y1+17.359550561797754, x1+27.134831460674153, y1+17.191011235955056, x1+27.471910112359545, y1+17.022471910112362, x1+27.640449438202246, y1+16.85393258426966, x1+27.977528089887638, y1+16.685393258426966, x1+28.146067415730336, y1+16.51685393258427, x1+28.314606741573037, y1+16.34831460674157, x1+28.651685393258425, y1+16.179775280898877, x1+28.820224719101123, y1+16.01123595505618, x1+29.157303370786522, y1+15.842696629213485, x1+29.325842696629216, y1+15.674157303370787, x1+29.494382022471914, y1+15.50561797752809, x1+29.831460674157302, y1+15.337078651685392, x1+30.0, y1+15.168539325842696, x1+30.337078651685392, y1+15.0, x1+30.505617977528093, y1+14.831460674157304, x1+30.674157303370784, y1+14.662921348314608, x1+31.01123595505618, y1+14.49438202247191, x1+31.179775280898884, y1+14.325842696629213, x1+31.51685393258427, y1+14.157303370786519, x1+31.68539325842697, y1+13.988764044943819, x1+31.853932584269664, y1+13.820224719101123, x1+32.19101123595506, y1+13.651685393258427, x1+32.359550561797754, y1+13.48314606741573, x1+32.52808988764045, y1+13.314606741573034, x1+32.86516853932584, y1+13.146067415730338, x1+33.03370786516854, y1+12.977528089887638, x1+33.20224719101123, y1+12.808988764044944, x1+33.53932584269663, y1+12.640449438202248, x1+33.70786516853932, y1+12.471910112359552, x1+33.87640449438202, y1+12.303370786516854, x1+34.21348314606742, y1+12.134831460674157, x1+34.38202247191011, y1+11.96629213483146, x1+34.38202247191011, y1+11.797752808988763, x1+34.38202247191011, y1+11.629213483146069, x1+34.21348314606742, y1+11.46067415730337, x1+34.044943820224724, y1+11.292134831460674, x1+33.87640449438202, y1+11.123595505617978, x1+33.70786516853932, y1+10.95505617977528, x1+33.53932584269663, y1+10.786516853932584, x1+33.37078651685393, y1+10.617977528089888, x1+33.20224719101123, y1+10.44943820224719, x1+33.03370786516854, y1+10.280898876404494, x1+33.03370786516854, y1+10.112359550561797, x1+32.86516853932584, y1+9.943820224719103, x1+32.69662921348314, y1+9.775280898876405, x1+32.69662921348314, y1+9.606741573033707, x1+32.52808988764045, y1+9.438202247191013, x1+32.52808988764045, y1+9.269662921348315, x1+32.359550561797754, y1+9.101123595505618, x1+32.359550561797754, y1+8.932584269662922, x1+32.359550561797754, y1+8.764044943820226, x1+32.19101123595506, y1+8.595505617977528, x1+32.19101123595506, y1+8.42696629213483, x1+32.19101123595506, y1+8.258426966292134, x1+32.19101123595506, y1+8.089887640449438, x1+32.02247191011236, y1+7.9213483146067425, x1+32.02247191011236, y1+7.752808988764045, x1+32.02247191011236, y1+7.584269662921348, x1+32.02247191011236, y1+7.415730337078652, x1+32.02247191011236, y1+7.247191011235955, x1+32.02247191011236, y1+7.078651685393259, x1+32.02247191011236, y1+6.910112359550562, x1+32.02247191011236, y1+6.741573033707865, x1+32.02247191011236, y1+6.573033707865169, x1+32.02247191011236, y1+6.404494382022472, x1+32.02247191011236, y1+6.235955056179776, x1+32.19101123595506, y1+6.067415730337078, x1+32.19101123595506, y1+5.8988764044943816, x1+32.19101123595506, y1+5.730337078651685, x1+32.19101123595506, y1+5.561797752808989, x1+32.19101123595506, y1+5.393258426966292, x1+32.359550561797754, y1+5.224719101123595, x1+32.359550561797754, y1+5.056179775280898, x1+32.52808988764045, y1+4.887640449438202, x1+32.52808988764045, y1+4.7191011235955065, x1+32.69662921348314, y1+4.550561797752809, x1+32.69662921348314, y1+4.382022471910113, x1+32.86516853932584, y1+4.213483146067415, x1+32.86516853932584, y1+4.044943820224719, x1+33.03370786516854, y1+3.8764044943820224, x1+33.20224719101123, y1+3.707865168539326, x1+33.37078651685393, y1+3.5393258426966296, x1+33.53932584269663, y1+3.3707865168539324, x1+33.70786516853932, y1+3.202247191011236, x1+33.87640449438202, y1+3.033707865168539, x1+34.044943820224724, y1+2.8651685393258424, x1+34.21348314606742, y1+2.696629213483146, x1+34.55056179775281, y1+2.528089887640449, x1+34.8876404494382, y1+2.3595505617977532, x1+35.0561797752809, y1+2.1910112359550564, x1+35.39325842696629, y1+2.0224719101123596, x1+35.89887640449438, y1+1.853932584269663, x1+36.74157303370787, y1+1.6853932584269662, x1+37.58426966292135, y1+1.6853932584269662, x1+38.08988764044943, y1+1.6853932584269662, x1+38.932584269662925, y1+1.853932584269663, x1+39.60674157303371, y1+2.1910112359550564, x1+39.943820224719104, y1+2.3595505617977532, x1+40.1123595505618, y1+2.528089887640449, x1+40.44943820224719, y1+2.696629213483146, x1+40.61797752808988, y1+2.8651685393258424, x1+40.786516853932575, y1+3.033707865168539, x1+40.95505617977528, y1+3.202247191011236, x1+41.12359550561798, y1+3.3707865168539324, x1+41.29213483146068, y1+3.5393258426966296, x1+41.46067415730337, y1+3.707865168539326, x1+41.62921348314607, y1+3.8764044943820224, x1+41.79775280898876, y1+4.044943820224719, x1+41.79775280898876, y1+4.213483146067415, x1+41.96629213483146, y1+4.382022471910113, x1+41.96629213483146, y1+4.550561797752809, x1+42.13483146067416, y1+4.7191011235955065, x1+42.13483146067416, y1+4.887640449438202, x1+42.30337078651686, y1+5.056179775280898, x1+42.30337078651686, y1+5.224719101123595, x1+42.47191011235955, y1+5.393258426966292, x1+42.47191011235955, y1+5.561797752808989, x1+42.47191011235955, y1+5.730337078651685, x1+42.47191011235955, y1+5.8988764044943816, x1+42.640449438202246, y1+6.067415730337078, x1+42.640449438202246, y1+6.235955056179776, x1+42.640449438202246, y1+6.404494382022472, x1+42.640449438202246, y1+6.573033707865169, x1+42.640449438202246, y1+6.741573033707865, x1+42.640449438202246, y1+6.910112359550562, x1+42.640449438202246, y1+7.078651685393259, x1+42.640449438202246, y1+7.247191011235955, x1+42.640449438202246, y1+7.415730337078652, x1+42.640449438202246, y1+7.584269662921348, x1+42.640449438202246, y1+7.752808988764045, x1+42.640449438202246, y1+7.9213483146067425, x1+42.640449438202246, y1+8.089887640449438, x1+42.640449438202246, y1+8.258426966292134, x1+42.47191011235955, y1+8.42696629213483, x1+42.47191011235955, y1+8.595505617977528, x1+42.47191011235955, y1+8.764044943820226, x1+42.30337078651686, y1+8.932584269662922, x1+42.30337078651686, y1+9.101123595505618, x1+42.13483146067416, y1+9.269662921348315, x1+42.13483146067416, y1+9.438202247191013, x1+41.96629213483146, y1+9.606741573033707, x1+41.96629213483146, y1+9.775280898876405, x1+41.79775280898876, y1+9.943820224719103, x1+41.62921348314607, y1+10.112359550561797, x1+41.62921348314607, y1+10.280898876404494, x1+41.46067415730337, y1+10.44943820224719, x1+41.29213483146068, y1+10.617977528089888, x1+41.12359550561798, y1+10.786516853932584, x1+40.95505617977528, y1+10.95505617977528, x1+40.786516853932575, y1+11.123595505617978, x1+40.61797752808988, y1+11.292134831460674, x1+40.44943820224719, y1+11.46067415730337, x1+40.44943820224719, y1+11.629213483146069, x1+40.28089887640449, y1+11.797752808988763, x1+40.28089887640449, y1+11.96629213483146, x1+40.61797752808988, y1+12.134831460674157, x1+40.786516853932575, y1+12.303370786516854, x1+40.95505617977528, y1+12.471910112359552, x1+41.29213483146068, y1+12.640449438202248, x1+41.46067415730337, y1+12.808988764044944, x1+41.62921348314607, y1+12.977528089887638, x1+41.79775280898876, y1+13.146067415730338, x1+42.13483146067416, y1+13.314606741573034, x1+42.30337078651686, y1+13.48314606741573, x1+42.47191011235955, y1+13.651685393258427, x1+42.80898876404494, y1+13.820224719101123, x1+42.97752808988764, y1+13.988764044943819, x1+43.31460674157304, y1+14.157303370786519, x1+43.48314606741573, y1+14.325842696629213, x1+43.651685393258425, y1+14.49438202247191, x1+43.98876404494382, y1+14.662921348314608, x1+44.157303370786515, y1+14.831460674157304, x1+44.49438202247191, y1+15.0, x1+44.662921348314605, y1+15.168539325842696, x1+44.8314606741573, y1+15.337078651685392, x1+45.168539325842694, y1+15.50561797752809, x1+45.337078651685395, y1+15.674157303370787, x1+45.674157303370784, y1+15.842696629213485, x1+45.84269662921348, y1+16.01123595505618, x1+46.01123595505618, y1+16.179775280898877, x1+46.34831460674157, y1+16.34831460674157, x1+46.516853932584276, y1+16.51685393258427, x1+46.68539325842697, y1+16.685393258426966, x1+47.02247191011236, y1+16.85393258426966, x1+47.19101123595505, y1+17.022471910112362, x1+47.52808988764045, y1+17.191011235955056, x1+47.69662921348315, y1+17.359550561797754, x1+47.86516853932584, y1+17.52808988764045, x1+48.20224719101123, y1+17.696629213483146, x1+48.370786516853926, y1+17.865168539325843, x1+48.53932584269663, y1+18.033707865168537, x1+48.87640449438203, y1+18.202247191011235, x1+49.044943820224724, y1+18.370786516853936, x1+49.21348314606742, y1+18.53932584269663, x1+49.38202247191011, y1+18.707865168539325, x1+49.7191011235955, y1+18.876404494382026, x1+49.88764044943821, y1+19.044943820224717, x1+50.05617977528091, y1+19.213483146067414, x1+50.2247191011236, y1+19.382022471910116, x1+50.56179775280899, y1+19.55056179775281, x1+50.73033707865168, y1+19.719101123595507, x1+50.89887640449438, y1+19.887640449438205, x1+51.06741573033708, y1+20.0561797752809, x1+51.235955056179776, y1+20.224719101123593, x1+51.40449438202247, y1+20.393258426966288, x1+51.741573033707866, y1+20.56179775280899, x1+51.91011235955055, y1+20.730337078651687, x1+52.07865168539326, y1+20.89887640449438, x1+52.24719101123595, y1+21.06741573033708, x1+52.41573033707865, y1+21.235955056179776, x1+52.58426966292135, y1+21.40449438202247, x1+52.75280898876405, y1+21.573033707865168, x1+52.92134831460674, y1+21.741573033707866, x1+53.08988764044943, y1+21.91011235955056, x1+53.258426966292134, y1+22.078651685393258, x1+53.426966292134836, y1+22.247191011235955, x1+53.59550561797753, y1+22.41573033707865, x1+53.764044943820224, y1+22.584269662921347, x1+53.764044943820224, y1+22.752808988764045, x1+53.93258426966292, y1+22.92134831460674, x1+54.10112359550562, y1+23.089887640449437, x1+54.269662921348306, y1+23.258426966292138, x1+54.269662921348306, y1+23.426966292134832, x1+54.438202247191015, y1+23.595505617977526, x1+54.60674157303371, y1+23.764044943820224, x1+54.7752808988764, y1+23.93258426966292, x1+54.7752808988764, y1+24.101123595505616, x1+54.94382022471909, y1+24.269662921348313, x1+55.112359550561806, y1+24.438202247191015, x1+55.112359550561806, y1+24.60674157303371, x1+55.28089887640449, y1+24.775280898876407, x1+55.28089887640449, y1+24.943820224719104, x1+55.4494382022472, y1+25.1123595505618, x1+55.4494382022472, y1+25.280898876404496, x1+55.61797752808989, y1+25.44943820224719, x1+55.78651685393259, y1+25.617977528089888, x1+55.78651685393259, y1+25.786516853932582, x1+55.955056179775276, y1+25.955056179775276, x1+55.955056179775276, y1+26.123595505617974, x1+56.12359550561798, y1+26.292134831460675, x1+56.12359550561798, y1+26.46067415730337, x1+56.12359550561798, y1+26.629213483146067, x1+56.29213483146067, y1+26.797752808988765, x1+56.29213483146067, y1+26.96629213483146, x1+56.460674157303366, y1+27.134831460674153, x1+56.460674157303366, y1+27.303370786516854, x1+56.629213483146074, y1+27.471910112359545, x1+56.629213483146074, y1+27.640449438202246, x1+56.629213483146074, y1+27.808988764044944, x1+56.79775280898876, y1+27.977528089887638, x1+56.79775280898876, y1+28.146067415730336, x1+56.79775280898876, y1+28.314606741573037, x1+56.96629213483146, y1+28.48314606741573, x1+56.96629213483146, y1+28.651685393258425, x1+56.96629213483146, y1+28.820224719101123, x1+57.13483146067416, y1+28.98876404494382, x1+57.13483146067416, y1+29.157303370786522, x1+57.13483146067416, y1+29.325842696629216, x1+57.13483146067416, y1+29.494382022471914, x1+57.13483146067416, y1+29.662921348314608, x1+57.30337078651685, y1+29.831460674157302, x1+57.30337078651685, y1+30.0, x1+57.30337078651685, y1+30.168539325842698, x1+57.30337078651685, y1+30.337078651685392, x1+57.30337078651685, y1+30.505617977528093, x1+57.30337078651685, y1+30.674157303370784, x1+57.30337078651685, y1+30.842696629213478, x1+57.30337078651685, y1+31.01123595505618, x1+57.30337078651685, y1+31.179775280898884, x1+57.471910112359545, y1+31.348314606741575, x1+57.471910112359545, y1+31.51685393258427, x1+57.471910112359545, y1+31.68539325842697, x1+57.471910112359545, y1+31.853932584269664, x1+57.471910112359545, y1+32.02247191011236, x1+57.471910112359545, y1+32.19101123595506, x1+57.471910112359545, y1+32.359550561797754, x1+57.471910112359545, y1+32.52808988764045, x1+57.471910112359545, y1+32.69662921348314, x1+57.471910112359545, y1+32.86516853932584, x1+57.471910112359545, y1+33.03370786516854, x1+57.471910112359545, y1+33.20224719101123, x1+57.471910112359545, y1+33.37078651685393, x1+57.471910112359545, y1+33.53932584269663, x1+57.471910112359545, y1+33.70786516853932, x1+57.30337078651685, y1+33.87640449438202, x1+57.30337078651685, y1+34.044943820224724, x1+57.30337078651685, y1+34.21348314606742, x1+57.30337078651685, y1+34.38202247191011, x1+57.30337078651685, y1+34.55056179775281, x1+57.30337078651685, y1+34.71910112359551, x1+57.30337078651685, y1+34.8876404494382, x1+57.30337078651685, y1+35.0561797752809, x1+57.13483146067416, y1+35.2247191011236, x1+57.13483146067416, y1+35.39325842696629, x1+57.13483146067416, y1+35.561797752808985, x1+57.13483146067416, y1+35.73033707865169, x1+56.96629213483146, y1+35.89887640449438, x1+56.96629213483146, y1+36.067415730337075, x1+56.96629213483146, y1+36.235955056179776, x1+56.79775280898876, y1+36.40449438202247, x1+56.79775280898876, y1+36.57303370786517, x1+56.79775280898876, y1+36.74157303370787, x1+56.629213483146074, y1+36.91011235955057, x1+56.629213483146074, y1+37.07865168539326, x1+56.460674157303366, y1+37.247191011235955, x1+56.460674157303366, y1+37.41573033707865, x1+56.460674157303366, y1+37.58426966292135, x1+56.29213483146067, y1+37.75280898876405, x1+56.29213483146067, y1+37.92134831460674, x1+56.12359550561798, y1+38.08988764044943, x1+56.12359550561798, y1+38.25842696629213, x1+55.955056179775276, y1+38.42696629213483, x1+55.955056179775276, y1+38.59550561797752, x1+55.78651685393259, y1+38.76404494382023, x1+55.78651685393259, y1+38.932584269662925, x1+55.61797752808989, y1+39.10112359550562, x1+55.61797752808989, y1+39.26966292134831, x1+55.4494382022472, y1+39.438202247191015, x1+55.4494382022472, y1+39.60674157303371, x1+55.28089887640449, y1+39.77528089887641, x1+55.112359550561806, y1+39.943820224719104, x1+55.112359550561806, y1+40.1123595505618, x1+54.94382022471909, y1+40.28089887640449, x1+54.7752808988764, y1+40.44943820224719, x1+54.7752808988764, y1+40.61797752808988, x1+54.60674157303371, y1+40.786516853932575, x1+54.438202247191015, y1+40.95505617977528, x1+54.269662921348306, y1+41.12359550561798, x1+54.269662921348306, y1+41.29213483146068, x1+54.10112359550562, y1+41.46067415730337, x1+53.93258426966292, y1+41.62921348314607, x1+53.764044943820224, y1+41.79775280898876, x1+53.59550561797753, y1+41.96629213483146, x1+53.426966292134836, y1+42.13483146067416, x1+53.258426966292134, y1+42.30337078651686, x1+53.08988764044943, y1+42.47191011235955, x1+52.92134831460674, y1+42.640449438202246, x1+52.75280898876405, y1+42.80898876404494, x1+52.41573033707865, y1+42.97752808988764, x1+52.24719101123595, y1+43.146067415730336, x1+52.07865168539326, y1+43.31460674157304, x1+51.91011235955055, y1+43.48314606741573, x1+51.573033707865164, y1+43.651685393258425, x1+51.40449438202247, y1+43.82022471910112, x1+51.235955056179776, y1+43.98876404494382, x1+51.06741573033708, y1+44.157303370786515, x1+51.06741573033708, y1+44.32584269662922, x1+51.06741573033708, y1+44.49438202247191, x1+51.235955056179776, y1+44.662921348314605, x1+51.235955056179776, y1+44.8314606741573, x1+51.235955056179776, y1+45.0, x1+51.235955056179776, y1+45.168539325842694, x1+51.40449438202247, y1+45.337078651685395, x1+51.40449438202247, y1+45.50561797752809, x1+51.40449438202247, y1+45.674157303370784, x1+51.40449438202247, y1+45.84269662921348, x1+51.40449438202247, y1+46.01123595505618, x1+51.573033707865164, y1+46.17977528089887, x1+51.573033707865164, y1+46.34831460674157, x1+51.573033707865164, y1+46.516853932584276, x1+51.573033707865164, y1+46.68539325842697, x1+51.741573033707866, y1+46.853932584269664, x1+51.741573033707866, y1+47.02247191011236, x1+51.741573033707866, y1+47.19101123595505, x1+51.741573033707866, y1+47.35955056179775, x1+51.91011235955055, y1+47.52808988764045, x1+51.91011235955055, y1+47.69662921348315, x1+51.91011235955055, y1+47.86516853932584, x1+51.91011235955055, y1+48.03370786516854, x1+52.07865168539326, y1+48.20224719101123, x1+52.07865168539326, y1+48.370786516853926, x1+52.07865168539326, y1+48.53932584269663, x1+52.07865168539326, y1+48.70786516853933, x1+52.24719101123595, y1+48.87640449438203, x1+52.24719101123595, y1+49.044943820224724, x1+52.24719101123595, y1+49.21348314606742, x1+52.24719101123595, y1+49.38202247191011, x1+52.41573033707865, y1+49.55056179775281, x1+52.41573033707865, y1+49.7191011235955, x1+52.41573033707865, y1+49.88764044943821, x1+52.41573033707865, y1+50.05617977528091, x1+52.58426966292135, y1+50.2247191011236, x1+52.58426966292135, y1+50.39325842696629, x1+52.58426966292135, y1+50.56179775280899, x1+52.58426966292135, y1+50.73033707865168, x1+52.75280898876405, y1+50.89887640449438, x1+52.75280898876405, y1+51.06741573033708, x1+52.75280898876405, y1+51.235955056179776, x1+52.75280898876405, y1+51.40449438202247, x1+52.92134831460674, y1+51.573033707865164, x1+52.92134831460674, y1+51.741573033707866, x1+52.92134831460674, y1+51.91011235955055, x1+52.92134831460674, y1+52.07865168539326, x1+52.92134831460674, y1+52.24719101123595, x1+53.08988764044943, y1+52.41573033707865, x1+53.08988764044943, y1+52.58426966292135, x1+53.08988764044943, y1+52.75280898876405, x1+53.08988764044943, y1+52.92134831460674, x1+53.08988764044943, y1+53.08988764044943, x1+53.08988764044943, y1+53.258426966292134, x1+53.08988764044943, y1+53.426966292134836, x1+53.08988764044943, y1+53.59550561797753, x1+52.92134831460674, y1+53.764044943820224, x1+52.92134831460674, y1+53.93258426966292, x1+52.75280898876405, y1+54.10112359550562, x1+52.58426966292135, y1+54.269662921348306, x1+52.24719101123595, y1+54.438202247191015, x1+52.07865168539326, y1+54.60674157303371, x1+51.741573033707866, y1+54.7752808988764, x1+51.40449438202247, y1+54.94382022471909, x1+51.06741573033708, y1+55.112359550561806, x1+50.73033707865168, y1+55.28089887640449, x1+50.39325842696629, y1+55.4494382022472, x1+50.05617977528091, y1+55.61797752808989, x1+49.55056179775281, y1+55.78651685393259, x1+49.21348314606742, y1+55.955056179775276, x1+48.87640449438203, y1+56.12359550561798, x1+48.370786516853926, y1+56.29213483146067, x1+48.03370786516854, y1+56.460674157303366, x1+47.52808988764045, y1+56.629213483146074, x1+47.19101123595505, y1+56.79775280898876, x1+46.68539325842697, y1+56.96629213483146, x1+46.01123595505618, y1+57.13483146067416, x1+45.50561797752809, y1+57.30337078651685, x1+45.0, y1+57.471910112359545, x1+44.32584269662922, y1+57.640449438202246, x1+43.651685393258425, y1+57.80898876404495, x1+42.97752808988764, y1+57.97752808988764, x1+42.30337078651686, y1+58.14606741573034, x1+42.47191011235955, y1+58.314606741573044, x1+42.80898876404494, y1+58.48314606741573, x1+42.97752808988764, y1+58.65168539325843, x1+43.31460674157304, y1+58.82022471910113, x1+43.651685393258425, y1+58.98876404494383, x1+44.157303370786515, y1+59.157303370786515, x1+44.662921348314605, y1+59.325842696629216, x1+45.337078651685395, y1+59.49438202247191, x1+46.34831460674157, y1+59.662921348314605, x1+56.629213483146074, y1+59.8314606741573, x1+58.65168539325843, y1+60.0, x1+59.8314606741573, y1+60.1685393258427, x1+60.50561797752809, y1+60.337078651685395, x1+61.34831460674157, y1+60.50561797752809, x1+61.85393258426966, y1+60.674157303370784, x1+62.52808988764044, y1+60.84269662921347, x1+63.03370786516854, y1+61.011235955056186, x1+63.539325842696634, y1+61.17977528089887, x1+64.04494382022472, y1+61.34831460674157, x1+64.38202247191012, y1+61.51685393258427, x1+64.71910112359551, y1+61.685393258426956, x1+65.2247191011236, y1+61.85393258426966, x1+65.561797752809, y1+62.02247191011236, x1+65.89887640449437, y1+62.19101123595507, x1+66.23595505617976, y1+62.35955056179777, x1+66.57303370786516, y1+62.52808988764044, x1+66.91011235955057, y1+62.69662921348315, x1+67.24719101123596, y1+62.86516853932585, x1+67.41573033707864, y1+63.03370786516854, x1+67.75280898876404, y1+63.20224719101124, x1+68.08988764044945, y1+63.37078651685394, x1+68.25842696629213, y1+63.539325842696634, x1+68.59550561797754, y1+63.70786516853933, x1+68.76404494382022, y1+63.87640449438202, x1+69.10112359550563, y1+64.04494382022472, x1+69.26966292134831, y1+64.21348314606742, x1+69.43820224719101, y1+64.38202247191012, x1+69.7752808988764, y1+64.5505617977528, x1+69.94382022471909, y1+64.71910112359551, x1+70.1123595505618, y1+64.88764044943821, x1+70.4494382022472, y1+65.0561797752809, x1+70.6179775280899, y1+65.2247191011236, x1+70.78651685393258, y1+65.39325842696628, x1+70.95505617977528, y1+65.561797752809, x1+71.12359550561797, y1+65.73033707865169, x1+71.29213483146067, y1+65.89887640449437, x1+71.46067415730337, y1+66.06741573033707, x1+71.62921348314606, y1+66.23595505617976, x1+71.62921348314606, y1+66.40449438202246, x1+71.79775280898876, y1+66.57303370786516, x1+71.79775280898876, y1+66.74157303370787, x1+71.79775280898876, y1+66.91011235955057, x1+71.79775280898876, y1+67.07865168539325, x1+71.79775280898876, y1+67.24719101123596, x1+71.62921348314606, y1+67.41573033707864, x1+71.62921348314606, y1+67.58426966292134, x1+71.46067415730337, y1+67.75280898876404, x1+71.29213483146067, y1+67.92134831460675, x1+71.12359550561797, y1+68.08988764044945, x1+70.95505617977528, y1+68.25842696629213, x1+70.78651685393258, y1+68.42696629213484, x1+70.6179775280899, y1+68.59550561797754, x1+70.4494382022472, y1+68.76404494382022, x1+70.28089887640449, y1+68.93258426966293, x1+70.1123595505618, y1+69.10112359550563, x1+69.94382022471909, y1+69.26966292134831, x1+69.7752808988764, y1+69.43820224719101, x1+69.6067415730337, y1+69.6067415730337, x1+69.43820224719101, y1+69.7752808988764, x1+69.26966292134831, y1+69.94382022471909, x1+69.10112359550563, y1+70.1123595505618, x1+68.93258426966293, y1+70.28089887640449, x1+68.76404494382022, y1+70.4494382022472, x1+68.59550561797754, y1+70.6179775280899, x1+68.42696629213484, y1+70.78651685393258, x1+68.25842696629213, y1+70.95505617977528, x1+68.08988764044945, y1+71.12359550561797, x1+67.92134831460675, y1+71.29213483146067, x1+67.75280898876404, y1+71.46067415730337, x1+67.58426966292134, y1+71.62921348314606, x1+67.41573033707864, y1+71.79775280898876, x1+67.24719101123596, y1+71.96629213483145, x1+67.07865168539325, y1+72.13483146067415, x1+66.91011235955057, y1+72.30337078651685, x1+66.74157303370787, y1+72.47191011235955, x1+66.57303370786516, y1+72.64044943820225, x1+66.40449438202246, y1+72.80898876404494, x1+66.06741573033707, y1+72.97752808988764, x1+65.89887640449437, y1+73.14606741573034, x1+65.89887640449437, y1+73.14606741573034, x1+65.73033707865169, y1+73.14606741573034, x1+65.561797752809, y1+73.14606741573034, x1+65.39325842696628, y1+73.14606741573034, x1+65.2247191011236, y1+72.97752808988764, x1+65.0561797752809, y1+72.97752808988764, x1+64.88764044943821, y1+72.80898876404494, x1+64.71910112359551, y1+72.64044943820225, x1+64.5505617977528, y1+72.64044943820225, x1+64.38202247191012, y1+72.47191011235955, x1+64.21348314606742, y1+72.30337078651685, x1+64.04494382022472, y1+72.30337078651685, x1+63.87640449438202, y1+72.13483146067415, x1+63.70786516853933, y1+71.96629213483145, x1+63.539325842696634, y1+71.79775280898876, x1+63.37078651685394, y1+71.79775280898876, x1+63.20224719101124, y1+71.62921348314606, x1+63.03370786516854, y1+71.46067415730337, x1+62.86516853932585, y1+71.46067415730337, x1+62.69662921348315, y1+71.29213483146067, x1+62.52808988764044, y1+71.12359550561797, x1+62.35955056179777, y1+71.12359550561797, x1+62.19101123595507, y1+70.95505617977528, x1+62.02247191011236, y1+70.95505617977528, x1+61.85393258426966, y1+70.78651685393258, x1+61.685393258426956, y1+70.78651685393258, x1+61.51685393258427, y1+70.6179775280899, x1+61.34831460674157, y1+70.4494382022472, x1+61.17977528089887, y1+70.4494382022472, x1+61.011235955056186, y1+70.4494382022472, x1+60.84269662921347, y1+70.28089887640449, x1+60.674157303370784, y1+70.28089887640449, x1+60.50561797752809, y1+70.1123595505618, x1+60.337078651685395, y1+70.1123595505618, x1+60.1685393258427, y1+69.94382022471909, x1+60.0, y1+69.94382022471909, x1+59.8314606741573, y1+69.7752808988764, x1+59.662921348314605, y1+69.7752808988764, x1+59.49438202247191, y1+69.7752808988764, x1+59.325842696629216, y1+69.6067415730337, x1+59.157303370786515, y1+69.6067415730337, x1+58.98876404494383, y1+69.43820224719101, x1+58.82022471910113, y1+69.43820224719101, x1+58.65168539325843, y1+69.43820224719101, x1+58.48314606741573, y1+69.43820224719101, x1+58.314606741573044, y1+69.26966292134831, x1+58.14606741573034, y1+69.26966292134831, x1+57.97752808988764, y1+69.26966292134831, x1+57.80898876404495, y1+69.10112359550563, x1+57.640449438202246, y1+69.10112359550563, x1+57.471910112359545, y1+69.10112359550563, x1+57.30337078651685, y1+69.10112359550563, x1+57.13483146067416, y1+69.10112359550563, x1+56.96629213483146, y1+69.10112359550563, x1+56.79775280898876, y1+68.93258426966293, x1+56.629213483146074, y1+68.93258426966293, x1+56.460674157303366, y1+68.93258426966293, x1+56.29213483146067, y1+68.93258426966293, x1+56.12359550561798, y1+68.93258426966293, x1+55.955056179775276, y1+68.93258426966293, x1+55.78651685393259, y1+68.76404494382022, x1+55.61797752808989, y1+68.76404494382022, x1+55.4494382022472, y1+68.76404494382022, x1+55.28089887640449, y1+68.76404494382022, x1+55.112359550561806, y1+68.76404494382022, x1+54.94382022471909, y1+68.76404494382022, x1+54.7752808988764, y1+68.76404494382022, x1+54.60674157303371, y1+68.76404494382022, x1+54.438202247191015, y1+68.76404494382022, x1+54.269662921348306, y1+68.59550561797754, x1+54.10112359550562, y1+68.59550561797754, x1+53.93258426966292, y1+68.59550561797754, x1+53.764044943820224, y1+68.59550561797754, x1+53.59550561797753, y1+68.59550561797754, x1+53.426966292134836, y1+68.59550561797754, x1+53.258426966292134, y1+68.59550561797754, x1+53.08988764044943, y1+68.59550561797754, x1+52.92134831460674, y1+68.59550561797754, x1+52.75280898876405, y1+68.59550561797754, x1+52.58426966292135, y1+68.59550561797754, x1+52.41573033707865, y1+68.59550561797754, x1+52.24719101123595, y1+68.59550561797754, x1+52.07865168539326, y1+68.59550561797754, x1+51.91011235955055, y1+68.59550561797754, x1+51.741573033707866, y1+68.42696629213484, x1+51.573033707865164, y1+68.42696629213484, x1+51.40449438202247, y1+68.42696629213484, x1+51.235955056179776, y1+68.42696629213484, x1+51.06741573033708, y1+68.42696629213484, x1+50.89887640449438, y1+68.42696629213484, x1+50.73033707865168, y1+68.42696629213484, x1+50.56179775280899, y1+68.42696629213484, x1+50.39325842696629, y1+68.42696629213484, x1+50.2247191011236, y1+68.42696629213484, x1+50.05617977528091, y1+68.42696629213484, x1+49.88764044943821, y1+68.42696629213484, x1+49.7191011235955, y1+68.42696629213484, x1+49.55056179775281, y1+68.42696629213484, x1+49.38202247191011, y1+68.42696629213484, x1+49.21348314606742, y1+68.42696629213484, x1+49.044943820224724, y1+68.42696629213484, x1+48.87640449438203, y1+68.25842696629213, x1+48.70786516853933, y1+68.25842696629213, x1+48.53932584269663, y1+68.25842696629213, x1+48.370786516853926, y1+68.25842696629213, x1+48.20224719101123, y1+68.25842696629213, x1+48.03370786516854, y1+68.25842696629213, x1+47.86516853932584, y1+68.25842696629213, x1+47.69662921348315, y1+68.25842696629213, x1+47.52808988764045, y1+68.25842696629213, x1+47.35955056179775, y1+68.25842696629213, x1+47.19101123595505, y1+68.25842696629213, x1+47.02247191011236, y1+68.25842696629213, x1+46.853932584269664, y1+68.25842696629213, x1+46.68539325842697, y1+68.25842696629213, x1+46.516853932584276, y1+68.25842696629213, x1+46.34831460674157, y1+68.25842696629213, x1+46.17977528089887, y1+68.08988764044945, x1+46.01123595505618, y1+68.08988764044945, x1+45.84269662921348, y1+68.08988764044945, x1+45.674157303370784, y1+68.08988764044945, x1+45.50561797752809, y1+68.08988764044945, x1+45.337078651685395, y1+68.08988764044945, x1+45.168539325842694, y1+68.08988764044945, x1+45.0, y1+68.08988764044945, x1+44.8314606741573, y1+67.92134831460675, x1+44.662921348314605, y1+67.92134831460675, x1+44.49438202247191, y1+67.92134831460675, x1+44.32584269662922, y1+67.92134831460675, x1+44.157303370786515, y1+67.92134831460675, x1+43.98876404494382, y1+67.92134831460675, x1+43.82022471910112, y1+67.92134831460675, x1+43.651685393258425, y1+67.75280898876404, x1+43.48314606741573, y1+67.75280898876404, x1+43.31460674157304, y1+67.75280898876404, x1+43.146067415730336, y1+67.75280898876404, x1+42.97752808988764, y1+67.58426966292134, x1+42.80898876404494, y1+67.58426966292134, x1+42.640449438202246, y1+67.58426966292134, x1+42.47191011235955, y1+67.58426966292134, x1+42.30337078651686, y1+67.58426966292134, x1+42.13483146067416, y1+67.41573033707864, x1+41.96629213483146, y1+67.41573033707864, x1+41.79775280898876, y1+67.41573033707864, x1+41.62921348314607, y1+67.24719101123596, x1+41.46067415730337, y1+67.24719101123596, x1+41.29213483146068, y1+67.24719101123596, x1+41.12359550561798, y1+67.07865168539325, x1+40.95505617977528, y1+67.07865168539325, x1+40.786516853932575, y1+67.07865168539325, x1+40.61797752808988, y1+66.91011235955057, x1+40.44943820224719, y1+66.91011235955057, x1+40.28089887640449, y1+66.74157303370787, x1+40.1123595505618, y1+66.74157303370787, x1+39.943820224719104, y1+66.74157303370787, x1+39.77528089887641, y1+66.57303370786516, x1+39.60674157303371, y1+66.57303370786516, x1+39.438202247191015, y1+66.40449438202246, x1+39.26966292134831, y1+66.40449438202246, x1+39.10112359550562, y1+66.23595505617976, x1+38.932584269662925, y1+66.23595505617976, x1+38.76404494382023, y1+66.06741573033707, x1+38.59550561797752, y1+66.06741573033707, x1+38.42696629213483, y1+65.89887640449437, x1+38.25842696629213, y1+65.89887640449437, x1+38.08988764044943, y1+65.73033707865169, x1+37.92134831460674, y1+65.73033707865169, x1+37.75280898876405, y1+65.561797752809, x1+37.58426966292135, y1+65.561797752809, x1+37.41573033707865, y1+65.39325842696628, x1+37.247191011235955, y1+65.39325842696628, x1+37.07865168539326, y1+65.561797752809, x1+36.91011235955057, y1+65.561797752809, x1+36.74157303370787, y1+65.73033707865169, x1+36.57303370786517, y1+65.73033707865169, x1+36.40449438202247, y1+65.89887640449437, x1+36.235955056179776, y1+65.89887640449437, x1+36.067415730337075, y1+66.06741573033707, x1+35.89887640449438, y1+66.06741573033707, x1+35.73033707865169, y1+66.23595505617976, x1+35.561797752808985, y1+66.23595505617976, x1+35.39325842696629, y1+66.40449438202246, x1+35.2247191011236, y1+66.40449438202246, x1+35.0561797752809, y1+66.57303370786516, x1+34.8876404494382, y1+66.57303370786516, x1+34.71910112359551, y1+66.74157303370787, x1+34.55056179775281, y1+66.74157303370787, x1+34.38202247191011, y1+66.74157303370787, x1+34.21348314606742, y1+66.91011235955057, x1+34.044943820224724, y1+66.91011235955057, x1+33.87640449438202, y1+67.07865168539325, x1+33.70786516853932, y1+67.07865168539325, x1+33.53932584269663, y1+67.07865168539325, x1+33.37078651685393, y1+67.24719101123596, x1+33.20224719101123, y1+67.24719101123596, x1+33.03370786516854, y1+67.24719101123596, x1+32.86516853932584, y1+67.41573033707864, x1+32.69662921348314, y1+67.41573033707864, x1+32.52808988764045, y1+67.41573033707864, x1+32.359550561797754, y1+67.58426966292134, x1+32.19101123595506, y1+67.58426966292134, x1+32.02247191011236, y1+67.58426966292134, x1+31.853932584269664, y1+67.58426966292134, x1+31.68539325842697, y1+67.75280898876404, x1+31.51685393258427, y1+67.75280898876404, x1+31.348314606741575, y1+67.75280898876404, x1+31.179775280898884, y1+67.75280898876404, x1+31.01123595505618, y1+67.75280898876404, x1+30.842696629213478, y1+67.92134831460675, x1+30.674157303370784, y1+67.92134831460675, x1+30.505617977528093, y1+67.92134831460675, x1+30.337078651685392, y1+67.92134831460675, x1+30.168539325842698, y1+67.92134831460675, x1+30.0, y1+67.92134831460675, x1+29.831460674157302, y1+68.08988764044945, x1+29.662921348314608, y1+68.08988764044945, x1+29.494382022471914, y1+68.08988764044945, x1+29.325842696629216, y1+68.08988764044945, x1+29.157303370786522, y1+68.08988764044945, x1+28.98876404494382, y1+68.08988764044945, x1+28.820224719101123, y1+68.08988764044945, x1+28.651685393258425, y1+68.08988764044945, x1+28.48314606741573, y1+68.08988764044945, x1+28.314606741573037, y1+68.25842696629213, x1+28.146067415730336, y1+68.25842696629213, x1+27.977528089887638, y1+68.25842696629213, x1+27.808988764044944, y1+68.25842696629213, x1+27.640449438202246, y1+68.25842696629213, x1+27.471910112359545, y1+68.25842696629213, x1+27.303370786516854, y1+68.25842696629213, x1+27.134831460674153, y1+68.25842696629213, x1+26.96629213483146, y1+68.25842696629213, x1+26.797752808988765, y1+68.25842696629213, x1+26.629213483146067, y1+68.25842696629213, x1+26.46067415730337, y1+68.25842696629213, x1+26.292134831460675, y1+68.25842696629213, x1+26.123595505617974, y1+68.25842696629213, x1+25.955056179775276, y1+68.25842696629213, x1+25.786516853932582, y1+68.25842696629213, x1+25.617977528089888, y1+68.42696629213484, x1+25.44943820224719, y1+68.42696629213484, x1+25.280898876404496, y1+68.42696629213484, x1+25.1123595505618, y1+68.42696629213484, x1+24.943820224719104, y1+68.42696629213484, x1+24.775280898876407, y1+68.42696629213484, x1+24.60674157303371, y1+68.42696629213484, x1+24.438202247191015, y1+68.42696629213484, x1+24.269662921348313, y1+68.42696629213484, x1+24.101123595505616, y1+68.42696629213484, x1+23.93258426966292, y1+68.42696629213484, x1+23.764044943820224, y1+68.42696629213484, x1+23.595505617977526, y1+68.42696629213484, x1+23.426966292134832, y1+68.42696629213484, x1+23.258426966292138, y1+68.42696629213484, x1+23.089887640449437, y1+68.42696629213484, x1+22.92134831460674, y1+68.42696629213484, x1+22.752808988764045, y1+68.59550561797754, x1+22.584269662921347, y1+68.59550561797754, x1+22.41573033707865, y1+68.59550561797754, x1+22.247191011235955, y1+68.59550561797754, x1+22.078651685393258, y1+68.59550561797754, x1+21.91011235955056, y1+68.59550561797754, x1+21.741573033707866, y1+68.59550561797754, x1+21.573033707865168, y1+68.59550561797754, x1+21.40449438202247, y1+68.59550561797754, x1+21.235955056179776, y1+68.59550561797754, x1+21.06741573033708, y1+68.59550561797754, x1+20.89887640449438, y1+68.59550561797754, x1+20.730337078651687, y1+68.59550561797754, x1+20.56179775280899, y1+68.59550561797754, x1+20.393258426966288, y1+68.59550561797754, x1+20.224719101123593, y1+68.76404494382022, x1+20.0561797752809, y1+68.76404494382022, x1+19.887640449438205, y1+68.76404494382022, x1+19.719101123595507, y1+68.76404494382022, x1+19.55056179775281, y1+68.76404494382022, x1+19.382022471910116, y1+68.76404494382022, x1+19.213483146067414, y1+68.76404494382022, x1+19.044943820224717, y1+68.76404494382022, x1+18.876404494382026, y1+68.76404494382022, x1+18.707865168539325, y1+68.93258426966293, x1+18.53932584269663, y1+68.93258426966293, x1+18.370786516853936, y1+68.93258426966293, x1+18.202247191011235, y1+68.93258426966293, x1+18.033707865168537, y1+68.93258426966293, x1+17.865168539325843, y1+68.93258426966293, x1+17.696629213483146, y1+69.10112359550563, x1+17.52808988764045, y1+69.10112359550563, x1+17.359550561797754, y1+69.10112359550563, x1+17.191011235955056, y1+69.10112359550563, x1+17.022471910112362, y1+69.10112359550563, x1+16.85393258426966, y1+69.26966292134831, x1+16.685393258426966, y1+69.26966292134831, x1+16.51685393258427, y1+69.26966292134831, x1+16.34831460674157, y1+69.26966292134831, x1+16.179775280898877, y1+69.43820224719101, x1+16.01123595505618, y1+69.43820224719101, x1+15.842696629213485, y1+69.43820224719101, x1+15.674157303370787, y1+69.43820224719101, x1+15.50561797752809, y1+69.6067415730337, x1+15.337078651685392, y1+69.6067415730337, x1+15.168539325842696, y1+69.7752808988764, x1+15.0, y1+69.7752808988764, x1+14.831460674157304, y1+69.7752808988764, x1+14.662921348314608, y1+69.94382022471909, x1+14.49438202247191, y1+69.94382022471909, x1+14.325842696629213, y1+70.1123595505618, x1+14.157303370786519, y1+70.1123595505618, x1+13.988764044943819, y1+70.28089887640449, x1+13.820224719101123, y1+70.28089887640449, x1+13.651685393258427, y1+70.4494382022472, x1+13.48314606741573, y1+70.4494382022472, x1+13.314606741573034, y1+70.6179775280899, x1+13.146067415730338, y1+70.6179775280899, x1+12.977528089887638, y1+70.78651685393258, x1+12.808988764044944, y1+70.78651685393258, x1+12.640449438202248, y1+70.95505617977528, x1+12.471910112359552, y1+70.95505617977528, x1+12.303370786516854, y1+71.12359550561797, x1+12.134831460674157, y1+71.12359550561797, x1+11.96629213483146, y1+71.29213483146067, x1+11.797752808988763, y1+71.46067415730337, x1+11.629213483146069, y1+71.46067415730337, x1+11.46067415730337, y1+71.62921348314606, x1+11.292134831460674, y1+71.79775280898876, x1+11.123595505617978, y1+71.79775280898876, x1+10.95505617977528, y1+71.96629213483145, x1+10.786516853932584, y1+72.13483146067415, x1+10.617977528089888, y1+72.30337078651685, x1+10.44943820224719, y1+72.30337078651685, x1+10.280898876404494, y1+72.47191011235955, x1+10.112359550561797, y1+72.64044943820225, x1+9.943820224719103, y1+72.64044943820225, x1+9.775280898876405, y1+72.80898876404494, x1+9.606741573033707, y1+72.97752808988764, x1+9.438202247191013, y1+72.97752808988764, x1+9.269662921348315, y1+73.14606741573034, x1+9.101123595505618, y1+73.14606741573034, x1+8.932584269662922, y1+73.14606741573034]
	ar2=[x1+32.19101123595506, y1+58.14606741573034, x1+34.044943820224724, y1+58.48314606741573, x1+35.73033707865169, y1+58.65168539325843, x1+37.92134831460674, y1+58.65168539325843, x1+40.1123595505618, y1+58.48314606741573, x1+41.62921348314607, y1+58.314606741573044, x1+43.48314606741573, y1+57.80898876404495]
	ar3=[x1+21.573033707865168, y1+53.764044943820224, x1+23.93258426966292, y1+52.24719101123595, x1+26.292134831460675, y1+50.89887640449438, x1+28.651685393258425, y1+49.7191011235955, x1+31.68539325842697, y1+48.53932584269663, x1+35.2247191011236, y1+47.86516853932584, x1+39.10112359550562, y1+47.86516853932584, x1+42.13483146067416, y1+48.20224719101123, x1+44.8314606741573, y1+49.044943820224724, x1+47.69662921348315, y1+50.2247191011236, x1+50.39325842696629, y1+51.573033707865164, x1+52.24719101123595, y1+52.75280898876405, x1+53.258426966292134, y1+53.59550561797753]
	ar4=[x1+23.595505617977526, y1+44.157303370786515, x1+25.786516853932582, y1+42.80898876404494, x1+27.977528089887638, y1+41.62921348314607, x1+30.842696629213478, y1+40.44943820224719, x1+34.21348314606742, y1+39.77528089887641, x1+39.26966292134831, y1+39.77528089887641, x1+43.31460674157304, y1+40.61797752808988, x1+46.516853932584276, y1+41.62921348314607, x1+49.21348314606742, y1+42.80898876404494, x1+51.235955056179776, y1+44.157303370786515]
	ar5=[x1+30.674157303370784, y1+27.977528089887638, x1+44.157303370786515, y1+27.977528089887638]
	ar6=[x1+37.41573033707865, y1+21.235955056179776, x1+37.41573033707865, y1+34.71910112359551]
	



	can.create_polygon(ar1,fill=col,outline=col2,width=1)
	can.create_line(ar2,fill=col2,width=1)
	can.create_line(ar3,fill=col2,width=1)
	can.create_line(ar4,fill=col2,width=1)
	can.create_line(ar5,fill=col2,width=1)
	can.create_line(ar6,fill=col2,width=1)




def draw_queen2(col,x,y,cc):
	global can,st

	#col,x,y,cc

	sz=75

	x1=x+3.75
	y1=y+3.75
	x2=x+75+3.75
	y2=y+75+3.75


	if col==0:
		col="#ffffff"
		col2="#333333"
	elif col==1:
		col="#333333"
		col2="#ffffff"




	cc.create_polygon(x1+(sz/2)+(-5-15-15+5)*0.9090909091,y1+20*0.9090909091, x1+15*0.9090909091,y2-25*0.9090909091, x1+(15+10.5*5)*0.9090909091,y2-25*0.9090909091,
		x2-(sz/2)+(5+15+15-5)*0.9090909091,y1+20*0.9090909091, x1+(15+10.5*4)*0.9090909091,y2+(-25-5)*0.9090909091, x2-(sz/2)+(5+15-5)*0.9090909091,y1+15*0.9090909091, x1+(15+10.5*3)*0.9090909091,y2+(-25-10)*0.9090909091,
		x1+(sz/2)+(-5+5)*0.9090909091,y1+(5+5)*0.9090909091, x1+(15+10.5*2)*0.9090909091,y2+(-25-10)*0.9090909091, x1+(sz/2)+(-5-15+5)*0.9090909091,y1+15*0.9090909091, x1+(15+10.5)*0.9090909091,y2+(-25-5)*0.9090909091,
		x1+(sz/2)+(-5-15-15+5)*0.9090909091,y1+20*0.9090909091, fill=col,outline=col2,width=1)
	

	cc.create_polygon(x1+15*0.9090909091,y2-25*0.9090909091, x1+(15+5)*0.9090909091,y2+(-25+5)*0.9090909091, x1+(15-5+10.5*5)*0.9090909091,y2+(-25+5)*0.9090909091, x1+(15+10.5*5)*0.9090909091,y2-25*0.9090909091,fill=col,outline=col2,width=1)
	cc.create_rectangle(x1+(15+5)*0.9090909091,y2+(-25+5)*0.9090909091, x1+(15-5+10.5*5)*0.9090909091,y2+(-25+5+5)*0.9090909091,fill=col,outline=col2,width=1)
	cc.create_polygon(x1+(15+5)*0.9090909091,y2+(-25+10)*0.9090909091,  x1+15*0.9090909091,y2+(-25+10+5)*0.9090909091,  x1+(15+5)*0.9090909091,y2+(-25+10+5+5)*0.9090909091, 
		x1+(15-5+10.5*5)*0.9090909091,y2+(-25+10+5+5)*0.9090909091, x1+(15+10.5*5)*0.9090909091,y2+(-25+10+5)*0.9090909091, x1+(15-5+10.5*5)*0.9090909091,y2+(-25+10)*0.9090909091,fill=col,outline=col2,width=1)

	cc.create_oval(x1+(sz/2)-5*0.9090909091,y1+5*0.9090909091,x2-(sz/2)+5*0.9090909091,y1+15*0.9090909091,fill=col,outline=col2,width=1)
	cc.create_oval(x1+(sz/2)+(-5-15)*0.9090909091,y1+10*0.9090909091,x1+(sz/2)+(-5-5)*0.9090909091,y1+20*0.9090909091,fill=col,outline=col2,width=1)
	cc.create_oval(x1+(sz/2)+(-5-15-15)*0.9090909091,y1+15*0.9090909091,x1+(sz/2)+(-5-5-15)*0.9090909091,y1+25*0.9090909091,fill=col,outline=col2,width=1)

	cc.create_oval(x2-(sz/2)+(5+15)*0.9090909091,y1+10*0.9090909091,x2-(sz/2)+(5+5)*0.9090909091,y1+20*0.9090909091,fill=col,outline=col2,width=1)
	cc.create_oval(x2-(sz/2)+(5+15+15)*0.9090909091,y1+15*0.9090909091,x2-(sz/2)+(5+5+15)*0.9090909091,y1+25*0.9090909091,fill=col,outline=col2,width=1)



def draw_queen(col,pos):
	global can,st

	x,y=pos[0],pos[1]
	arr=valid1(x,y)

	x=arr[0]
	y=arr[1]
	sz=arr[2]

	sz=75



	x1=x-sz-3.75
	x2=x-3.75
	y1=y-sz-3.75
	y2=y-3.75


	if col==0:
		col="#ffffff"
		col2="#333333"
	elif col==1:
		col="#333333"
		col2="#ffffff"




	can.create_polygon(x1+(sz/2)+(-5-15-15+5)*0.9090909091,y1+20*0.9090909091, x1+15*0.9090909091,y2-25*0.9090909091, x1+(15+10.5*5)*0.9090909091,y2-25*0.9090909091,
		x2-(sz/2)+(5+15+15-5)*0.9090909091,y1+20*0.9090909091, x1+(15+10.5*4)*0.9090909091,y2+(-25-5)*0.9090909091, x2-(sz/2)+(5+15-5)*0.9090909091,y1+15*0.9090909091, x1+(15+10.5*3)*0.9090909091,y2+(-25-10)*0.9090909091,
		x1+(sz/2)+(-5+5)*0.9090909091,y1+(5+5)*0.9090909091, x1+(15+10.5*2)*0.9090909091,y2+(-25-10)*0.9090909091, x1+(sz/2)+(-5-15+5)*0.9090909091,y1+15*0.9090909091, x1+(15+10.5)*0.9090909091,y2+(-25-5)*0.9090909091,
		x1+(sz/2)+(-5-15-15+5)*0.9090909091,y1+20*0.9090909091, fill=col,outline=col2,width=1)
	

	can.create_polygon(x1+15*0.9090909091,y2-25*0.9090909091, x1+(15+5)*0.9090909091,y2+(-25+5)*0.9090909091, x1+(15-5+10.5*5)*0.9090909091,y2+(-25+5)*0.9090909091, x1+(15+10.5*5)*0.9090909091,y2-25*0.9090909091,fill=col,outline=col2,width=1)
	can.create_rectangle(x1+(15+5)*0.9090909091,y2+(-25+5)*0.9090909091, x1+(15-5+10.5*5)*0.9090909091,y2+(-25+5+5)*0.9090909091,fill=col,outline=col2,width=1)
	can.create_polygon(x1+(15+5)*0.9090909091,y2+(-25+10)*0.9090909091,  x1+15*0.9090909091,y2+(-25+10+5)*0.9090909091,  x1+(15+5)*0.9090909091,y2+(-25+10+5+5)*0.9090909091, 
		x1+(15-5+10.5*5)*0.9090909091,y2+(-25+10+5+5)*0.9090909091, x1+(15+10.5*5)*0.9090909091,y2+(-25+10+5)*0.9090909091, x1+(15-5+10.5*5)*0.9090909091,y2+(-25+10)*0.9090909091,fill=col,outline=col2,width=1)

	can.create_oval(x1+(sz/2)-5*0.9090909091,y1+5*0.9090909091,x2-(sz/2)+5*0.9090909091,y1+15*0.9090909091,fill=col,outline=col2,width=1)
	can.create_oval(x1+(sz/2)+(-5-15)*0.9090909091,y1+10*0.9090909091,x1+(sz/2)+(-5-5)*0.9090909091,y1+20*0.9090909091,fill=col,outline=col2,width=1)
	can.create_oval(x1+(sz/2)+(-5-15-15)*0.9090909091,y1+15*0.9090909091,x1+(sz/2)+(-5-5-15)*0.9090909091,y1+25*0.9090909091,fill=col,outline=col2,width=1)

	can.create_oval(x2-(sz/2)+(5+15)*0.9090909091,y1+10*0.9090909091,x2-(sz/2)+(5+5)*0.9090909091,y1+20*0.9090909091,fill=col,outline=col2,width=1)
	can.create_oval(x2-(sz/2)+(5+15+15)*0.9090909091,y1+15*0.9090909091,x2-(sz/2)+(5+5+15)*0.9090909091,y1+25*0.9090909091,fill=col,outline=col2,width=1)




def draw_knight2(col,x,y,cc):
	global can,st

	#col,x,y,cc


	x1=x+3.75
	y1=y+3.75
	x2=x+75+3.75
	y2=y+75+3.75


	if col==0:
		col="#ffffff"
		col2="#333333"
	elif col==1:
		col="#333333"
		col2="#ffffff"

	ar11=[x1+21.599999999999998, y1+69.3, x1+21.599999999999998, y1+67.2, x1+21.599999999999998, y1+65.55, x1+21.9, y1+64.2, x1+22.199999999999996, y1+63.3, x1+22.95, y1+61.95, x1+23.4, y1+61.19999999999999, x1+24.45, y1+59.85333333000001, x1+25.35, y1+58.65, x1+26.249999999999993, y1+57.6, x1+27.9, y1+56.25, x1+30.599999999999994, y1+53.4, x1+31.65, y1+52.2, x1+32.55, y1+50.85, x1+33.153333333333336, y1+49.95, x1+33.6, y1+49.053333333333334, x1+34.05, y1+47.85, x1+34.5, y1+46.8, x1+34.95, y1+44.85, x1+35.4, y1+42.0, x1+35.25, y1+40.05, x1+35.25, y1+38.4, x1+35.25, y1+37.5, x1+35.1, y1+36.89999999999999, x1+33.6, y1+37.95, x1+32.4, y1+38.7, x1+31.05, y1+39.45, x1+29.85, y1+40.2, x1+28.35, y1+40.95, x1+26.85, y1+41.7, x1+26.1, y1+42.15, x1+25.053333333333334, y1+42.75, x1+23.85, y1+43.49999999999999, x1+22.5, y1+44.39999999999999, x1+21.599999999999998, y1+45.0, x1+20.733333333333303, y1+46.05, x1+20.1, y1+46.95, x1+19.5, y1+47.85, x1+19.053333333333334, y1+48.75, x1+18.3, y1+50.25, x1+17.7, y1+51.45, x1+16.65, y1+52.95, x1+15.449999999999998, y1+54.15, x1+14.85, y1+54.45, x1+13.5, y1+55.05, x1+12.45, y1+54.9, x1+11.7, y1+54.45, x1+11.25, y1+53.55, x1+11.25, y1+52.65, x1+11.25, y1+52.499999999999986, x1+9.45, y1+52.65, x1+8.7, y1+52.499999999999986, x1+7.05, y1+51.9, x1+5.1, y1+50.25, x1+4.2, y1+48.9, x1+3.6, y1+47.1, x1+3.6, y1+45.45, x1+4.05, y1+42.75, x1+4.8, y1+40.8, x1+5.699999999999999, y1+39.333333333333304, x1+7.5, y1+36.6, x1+9.0, y1+34.2, x1+10.649999999999999, y1+31.65, x1+11.25, y1+30.453333333333336, x1+11.7, y1+28.65, x1+12.15, y1+27.15, x1+12.15, y1+25.053333333333334, x1+12.333333333333002, y1+24.75, x1+12.333333333333002, y1+22.65, x1+12.6, y1+21.599999999999998, x1+13.5, y1+20.4, x1+14.55, y1+19.35, x1+16.5, y1+17.55, x1+17.4, y1+16.35, x1+18.15, y1+15.299999999999997, x1+17.25, y1+5.699999999999999, x1+26.7, y1+11.399999999999999, x1+32.25, y1+5.549999999999999, x1+36.15, y1+13.65, x1+37.8, y1+13.5, x1+39.0, y1+13.2, x1+40.35333333000001, y1+13.2, x1+42.15, y1+13.35, x1+43.8, y1+13.65, x1+45.45, y1+14.1, x1+46.8, y1+14.4, x1+48.153333333333336, y1+15.0, x1+50.25, y1+16.05, x1+51.75, y1+17.1, x1+52.95, y1+18.0, x1+53.85, y1+18.9, x1+55.35, y1+20.253333333333334, x1+56.85, y1+22.199999999999996, x1+57.6, y1+23.4, x1+58.83333333333331, y1+25.35, x1+59.7, y1+26.85, x1+60.75, y1+29.253333333333337, x1+61.79999999999999, y1+31.799999999999994, x1+62.84999999999999, y1+34.8, x1+63.45, y1+37.2, x1+64.2, y1+39.6, x1+64.94999999999999, y1+42.599999999999994, x1+65.85, y1+47.25, x1+66.45, y1+50.4, x1+66.9, y1+53.7, x1+67.35333333000001, y1+57.15, x1+67.65, y1+60.63333333333331, x1+67.65, y1+60.63333333333331, x1+67.8, y1+62.4, x1+68.1, y1+65.4, x1+68.1, y1+69.3, x1+68.1, y1+69.3]
	ar22=[x1+6.333333333333001, y1+48.33333333333301, x1+7.353333333333331, y1+47.25, x1+8.85, y1+46.2, x1+9.75, y1+45.3, x1+9.75, y1+44.55, x1+9.6, y1+43.8, x1+9.3, y1+43.199999999999996, x1+8.7, y1+42.9, x1+7.8, y1+42.9, x1+6.9, y1+43.49999999999999, x1+6.3, y1+44.699999999999996, x1+6.333333333333001, y1+45.9, x1+5.85, y1+46.8, x1+6.333333333333001, y1+48.33333333333301]
	ar33=[x1+15.153333333333332, y1+28.65, x1+16.65, y1+28.05, x1+18.15, y1+27.15, x1+19.653333333333332, y1+25.95, x1+20.4, y1+25.053333333333334, x1+21.15, y1+24.333333333333004, x1+21.599999999999998, y1+23.25, x1+21.749999999999996, y1+22.799999999999997, x1+21.749999999999996, y1+22.5, x1+20.85, y1+22.199999999999996, x1+19.653333333333332, y1+22.349999999999998, x1+18.75, y1+22.95, x1+18.0, y1+23.7, x1+16.95, y1+25.35, x1+16.2, y1+26.55, x1+15.899999999999997, y1+27.3, x1+15.153333333333332, y1+28.5, x1+15.153333333333332, y1+28.65]


	
	cc.create_polygon(ar11,outline=col2,fill=col,width=1)
	cc.create_polygon(ar22,outline=col2,fill=col,width=1)
	cc.create_polygon(ar33,outline=col2,fill=col,width=1)






def draw_knight(col,pos):
	global can,st

	x,y=pos[0],pos[1]
	arr=valid1(x,y)

	x=arr[0]
	y=arr[1]
	sz=75
	




	x1=x-sz-3.75
	x2=x-3.75
	y1=y-sz-3.75
	y2=y-3.75

	if col==0:
		col="#ffffff"
		col2="#333333"
	elif col==1:
		col="#333333"
		col2="#ffffff"

	ar11=[x1+21.599999999999998, y1+69.3, x1+21.599999999999998, y1+67.2, x1+21.599999999999998, y1+65.55, x1+21.9, y1+64.2, x1+22.199999999999996, y1+63.3, x1+22.95, y1+61.95, x1+23.4, y1+61.19999999999999, x1+24.45, y1+59.85333333000001, x1+25.35, y1+58.65, x1+26.249999999999993, y1+57.6, x1+27.9, y1+56.25, x1+30.599999999999994, y1+53.4, x1+31.65, y1+52.2, x1+32.55, y1+50.85, x1+33.153333333333336, y1+49.95, x1+33.6, y1+49.053333333333334, x1+34.05, y1+47.85, x1+34.5, y1+46.8, x1+34.95, y1+44.85, x1+35.4, y1+42.0, x1+35.25, y1+40.05, x1+35.25, y1+38.4, x1+35.25, y1+37.5, x1+35.1, y1+36.89999999999999, x1+33.6, y1+37.95, x1+32.4, y1+38.7, x1+31.05, y1+39.45, x1+29.85, y1+40.2, x1+28.35, y1+40.95, x1+26.85, y1+41.7, x1+26.1, y1+42.15, x1+25.053333333333334, y1+42.75, x1+23.85, y1+43.49999999999999, x1+22.5, y1+44.39999999999999, x1+21.599999999999998, y1+45.0, x1+20.733333333333303, y1+46.05, x1+20.1, y1+46.95, x1+19.5, y1+47.85, x1+19.053333333333334, y1+48.75, x1+18.3, y1+50.25, x1+17.7, y1+51.45, x1+16.65, y1+52.95, x1+15.449999999999998, y1+54.15, x1+14.85, y1+54.45, x1+13.5, y1+55.05, x1+12.45, y1+54.9, x1+11.7, y1+54.45, x1+11.25, y1+53.55, x1+11.25, y1+52.65, x1+11.25, y1+52.499999999999986, x1+9.45, y1+52.65, x1+8.7, y1+52.499999999999986, x1+7.05, y1+51.9, x1+5.1, y1+50.25, x1+4.2, y1+48.9, x1+3.6, y1+47.1, x1+3.6, y1+45.45, x1+4.05, y1+42.75, x1+4.8, y1+40.8, x1+5.699999999999999, y1+39.333333333333304, x1+7.5, y1+36.6, x1+9.0, y1+34.2, x1+10.649999999999999, y1+31.65, x1+11.25, y1+30.453333333333336, x1+11.7, y1+28.65, x1+12.15, y1+27.15, x1+12.15, y1+25.053333333333334, x1+12.333333333333002, y1+24.75, x1+12.333333333333002, y1+22.65, x1+12.6, y1+21.599999999999998, x1+13.5, y1+20.4, x1+14.55, y1+19.35, x1+16.5, y1+17.55, x1+17.4, y1+16.35, x1+18.15, y1+15.299999999999997, x1+17.25, y1+5.699999999999999, x1+26.7, y1+11.399999999999999, x1+32.25, y1+5.549999999999999, x1+36.15, y1+13.65, x1+37.8, y1+13.5, x1+39.0, y1+13.2, x1+40.35333333000001, y1+13.2, x1+42.15, y1+13.35, x1+43.8, y1+13.65, x1+45.45, y1+14.1, x1+46.8, y1+14.4, x1+48.153333333333336, y1+15.0, x1+50.25, y1+16.05, x1+51.75, y1+17.1, x1+52.95, y1+18.0, x1+53.85, y1+18.9, x1+55.35, y1+20.253333333333334, x1+56.85, y1+22.199999999999996, x1+57.6, y1+23.4, x1+58.83333333333331, y1+25.35, x1+59.7, y1+26.85, x1+60.75, y1+29.253333333333337, x1+61.79999999999999, y1+31.799999999999994, x1+62.84999999999999, y1+34.8, x1+63.45, y1+37.2, x1+64.2, y1+39.6, x1+64.94999999999999, y1+42.599999999999994, x1+65.85, y1+47.25, x1+66.45, y1+50.4, x1+66.9, y1+53.7, x1+67.35333333000001, y1+57.15, x1+67.65, y1+60.63333333333331, x1+67.65, y1+60.63333333333331, x1+67.8, y1+62.4, x1+68.1, y1+65.4, x1+68.1, y1+69.3, x1+68.1, y1+69.3]
	ar22=[x1+6.333333333333001, y1+48.33333333333301, x1+7.353333333333331, y1+47.25, x1+8.85, y1+46.2, x1+9.75, y1+45.3, x1+9.75, y1+44.55, x1+9.6, y1+43.8, x1+9.3, y1+43.199999999999996, x1+8.7, y1+42.9, x1+7.8, y1+42.9, x1+6.9, y1+43.49999999999999, x1+6.3, y1+44.699999999999996, x1+6.333333333333001, y1+45.9, x1+5.85, y1+46.8, x1+6.333333333333001, y1+48.33333333333301]
	ar33=[x1+15.153333333333332, y1+28.65, x1+16.65, y1+28.05, x1+18.15, y1+27.15, x1+19.653333333333332, y1+25.95, x1+20.4, y1+25.053333333333334, x1+21.15, y1+24.333333333333004, x1+21.599999999999998, y1+23.25, x1+21.749999999999996, y1+22.799999999999997, x1+21.749999999999996, y1+22.5, x1+20.85, y1+22.199999999999996, x1+19.653333333333332, y1+22.349999999999998, x1+18.75, y1+22.95, x1+18.0, y1+23.7, x1+16.95, y1+25.35, x1+16.2, y1+26.55, x1+15.899999999999997, y1+27.3, x1+15.153333333333332, y1+28.5, x1+15.153333333333332, y1+28.65]



	
	
	can.create_polygon(ar11,outline=col2,fill=col,width=1)
	can.create_polygon(ar22,outline=col2,fill=col,width=1)
	can.create_polygon(ar33,outline=col2,fill=col,width=1)




cau=()
def main():
	global st,can,dict_,turn, selp,ava,red_,flag,flag_,pre_pos,cur_pos,con_pp,pqueen,prook,pknight,pbishop,pppval,qu
	global castle,cau
	can.delete("all")


	cal="#B1E4B9"

	can["width"]=740
	can.place(in_=root,x=0,y=0)


	colo="#222222"

	if flag==1 or flag==2:
		colo="#b80f0a"


	can.create_rectangle(0,0,700,700,fill=colo,outline=colo)

	can.create_rectangle(20,20,680,680,fill="#B1E4B9",outline="#B1E4B9")




	x_1=20
	x_2=20+82.5
	y_=20



	x__=61.25
	y__=61.25





	al=["a","b","c","d","e","f","g","h"]
	for x in range(8):

		if st==1:
			can.create_text(x__,10,text=al[x],fill=cal,font=("FreeMono","13"))
			can.create_text(x__,690,text=al[x],fill=cal,font=("FreeMono","13"))
			x__+=82.5

		elif st==0:
			can.create_text(x__,10,text=al[-x-1],fill=cal,font=("FreeMono","13"))
			can.create_text(x__,690,text=al[-x-1],fill=cal,font=("FreeMono","13"))
			x__+=82.5

	nm=8
	for y in range(8):
		if st==1:
			can.create_text(10,y__,text=str(nm),fill=cal,font=("FreeMono","13") )
			can.create_text(690,y__,text=str(nm),fill=cal,font=("FreeMono","13") )

			nm-=1
		elif st==0:
			can.create_text(10,y__,text=str(y+1),fill=cal,font=("FreeMono","13") )
			can.create_text(690,y__,text=str(y+1),fill=cal,font=("FreeMono","13") )

		y__+=82.5

	a1=[]
	a2=[]

	if st==1:
		sz=0
	elif st==0:
		sz=1

	for z in range(8):
		sx=sz
		a1=[]

		for x in range(8):
			a1.append(sx)
			if sx==0:
				sx=1
			elif sx==1:
				sx=0
		a2.append(a1)

		if sz==0:
			sz=1
		elif sz==1:
			sz=0

	for y in range(8):
		if st==0:
			x_=x_1
		else:
			x_=x_2

		for x in range(4):
			can.create_rectangle(x_,y_,x_+82.5,y_+82.5,fill="#70A2A3",outline="#70A2A3")

			x_+=82.5*2

		if st==0:
			st=1
		elif st==1:
			st=0

		y_+=82.5





	def gp(pos):

		x=pos[0]
		y=pos[1]



		if st==1:
			if x=="a":
				x=82.5
			elif x=="b":
				x=82.5*2
			elif x=="c":
				x=82.5*3
			elif x=="d":
				x=82.5*4
			elif x=="e":
				x=82.5*5
			elif x=="f":
				x=82.5*6	
			elif x=="g":
				x=82.5*7
			elif x=="h":
				x=82.5*8


			if y=="8":
				y=82.5
			elif y=="7":
				y=82.5*2
			elif y=="6":
				y=82.5*3
			elif y=="5":
				y=82.5*4
			elif y=="4":
				y=82.5*5
			elif y=="3":
				y=82.5*6
			elif y=="2":
				y=82.5*7
			elif y=="1":
				y=82.5*8
		elif st==0:


			if x=="h":
				x=82.5
			elif x=="g":
				x=82.5*2
			elif x=="f":
				x=82.5*3
			elif x=="e":
				x=82.5*4
			elif x=="d":
				x=82.5*5
			elif x=="c":
				x=82.5*6	
			elif x=="b":
				x=82.5*7
			elif x=="a":
				x=82.5*8

			if y=="1":
				y=82.5
			elif y=="2":
				y=82.5*2
			elif y=="3":
				y=82.5*3
			elif y=="4":
				y=82.5*4
			elif y=="5":
				y=82.5*5
			elif y=="6":
				y=82.5*6
			elif y=="7":
				y=82.5*7
			elif y=="8":
				y=82.5*8


		x=x+20
		y=y+20
		sz=82.5

		return(x,y,x-sz,y-sz)



	def d_w(pos):
		al=["a","b","c","d","e","f","g","h"]

		x=pos[0]
		y=int(pos[1])
		
		x_=al.index(x)

		if st==1:
			y_=y-1
		elif st==0:
			y_=7-y-1

		return(a2[y_][x_])
	
	
	if not selp=="":
		v=gp(selp)
		v2=d_w(selp)
		if v2==1:
			col="#58f25c"
		elif v2==0:
			col="#43c762"

		if st==0:
			if v2==0:
				col="#58f25c"
			elif v2==1:
				col="#43c762"


		can.create_rectangle(v[0],v[1],v[2],v[3],fill=col,outline=col)

	if not len(ava)<=0:
		for a in ava:

			v=gp(a)
			v2=d_w(a)


			if v2==1:
				col="#58f25c"
				col2="#B1E4B9"
			elif v2==0:
				col="#43c762"
				col2="#70A2A3"
			if st==0:
				if v2==0:
					col="#58f25c"
					col2="#B1E4B9"
				elif v2==1:
					col="#43c762"
					col2="#70A2A3"
			can.create_rectangle(v[0],v[1],v[2],v[3],fill=col,outline=col)

			can.create_oval(v[0]-(82.5/2)-10,v[1]-(82.5/2)-10, v[0]-(82.5/2)+10,v[1]-(82.5/2)+10,
				fill=col2,outline=col2)




	if flag==1 or flag==2:

		p=dict_[turn+"_king"][0]

		v=gp(p)

		can.create_rectangle(v[0],v[1],v[2],v[3],fill="#b80f0a",outline="#b80f0a")		


	if not len(red_)<=0:
		for a in red_:
			v=gp(a)

			can.create_rectangle(v[0],v[1],v[2],v[3],fill="#b80f0a",outline="#b80f0a")




	if not pre_pos=="":
		v=gp(pre_pos)
		v2=d_w(pre_pos)

		if v2==1:
			col="#58f25c"
		elif v2==0:
			col="#43c762"

		if st==0:

			if v2==0:
				col="#58f25c"
			elif v2==1:
				col="#43c762"

		can.create_rectangle(v[0],v[1],v[2],v[3],fill=col,outline=col)


	if not cur_pos=="":
		v=gp(cur_pos)
		v2=d_w(cur_pos)

		if v2==1:
			col="#58f25c"
		elif v2==0:
			col="#43c762"

		if st==0:

			if v2==0:
				col="#58f25c"
			elif v2==1:
				col="#43c762"

		can.create_rectangle(v[0],v[1],v[2],v[3],fill=col,outline=col)

	if not len(castle)==0:

		for ca in castle:

			v=gp(ca[:2])
			v2=d_w(ca[:2])

			if v2==1:
				col="#6a89d5"
				col2="#B1E4B9"
			elif v2==0:
				col="#3851d1"
				col2="#70A2A3"

			if st==0:
				if v2==0:
					col="#6a89d5"
					col2="#B1E4B9"
				elif v2==1:
					col="#3851d1"
					col2="#70A2A3"


			can.create_rectangle(v[0],v[1],v[2],v[3],fill=col,outline=col)
			can.create_oval(v[0]-(82.5/2)-10,v[1]-(82.5/2)-10, v[0]-(82.5/2)+10,v[1]-(82.5/2)+10,
				fill=col2,outline=col2)


	for a in dict_:

		col=a.split("_")[0]
		piece=a.split("_")[1]

		if dict_[a][0]=="x":
			pass

		else:

			if col=="w":
				if piece=="pawn":
					draw_pawn(0,dict_[a][0])
				elif piece=="rook":
					draw_rook(0,dict_[a][0])
				elif piece=="bishop":
					draw_bishop(0,dict_[a][0])

				elif piece=="knight":
					draw_knight(0,dict_[a][0])

				elif piece=="queen":
					draw_queen(0,dict_[a][0])

				elif piece=="king":
					draw_king(0,dict_[a][0])

			elif col=="b":
				if piece=="pawn":
					draw_pawn(1,dict_[a][0])
				elif piece=="rook":
					draw_rook(1,dict_[a][0])
				elif piece=="bishop":
					draw_bishop(1,dict_[a][0])

				elif piece=="knight":
					draw_knight(1,dict_[a][0])

				elif piece=="queen":
					draw_queen(1,dict_[a][0])

				elif piece=="king":
					draw_king(1,dict_[a][0])



	can.create_line(20,20, 680,20, 680,680, 20,680, 20,20,fill="#B1E4B9")
	

	if con_pp==1:

		pbishop.delete("all")
		pknight.delete("all")
		prook.delete("all")
		pqueen.delete("all")

		xq,yq=700-350-200,700-350-100

		if cpu=="w":
			cp=1
		elif cpu=="b":
			cp=0



		create_rectangle(can,0, 0, 700, 700, fill='#000000', alpha=.5)

		


		
		col1p,col2p="#ffffff","#333333"


		

		can.create_oval(xq,yq,xq+20,yq+20,fill=col1p,outline=col1p)

		can.create_oval(xq+400,yq+20,xq-20+400,yq,fill=col1p,outline=col1p)

		can.create_oval(xq,yq+200, xq+20,yq+200-20,fill=col1p,outline=col1p)

		can.create_oval(xq+400,yq+200,  xq+400-20,yq+200-20,fill=col1p)
		can.create_polygon(xq+10,yq, xq+400-10,yq, xq+400,yq+10, xq+400,yq+200-10,
			xq+400-10,yq+200, xq+10,yq+200, xq,yq+200-10, xq,yq+10,fill=col1p,outline=col1p)




		can.create_text(xq+200,yq+16.5+10,text="Choose Piece",fill="#333333",font=("FreeMono","14"))

		draw_queen2(cp,0,0,pqueen)
		draw_rook2(cp,0,0,prook)
		draw_knight2(cp,0,0,pknight)
		draw_bishop2(cp,0,0,pbishop)


		ll=90
		can.create_oval(xq+200-(ll/2),440+2-30, xq+200-(ll/2)+30,440+30-2-30,fill=col2p,outline=col2p)


		can.create_oval(xq+200+(ll/2),440+2-30, xq+200+(ll/2)-30,440+30-2-30,fill=col2p,outline=col2p)
		can.create_rectangle(xq+200-(ll/2)+15,440+2-30,  xq+200+(ll/2)-30+15,440+30-2-30,fill=col2p,outline=col2p)

		can.create_arc(xq+200-(ll/2),440+2-30, xq+200-(ll/2)+30,440+30-2-30,outline=col2p,start=90,extent=180,style="arc")
		can.create_arc(xq+200+(ll/2),440+2-30, xq+200+(ll/2)-30,440+30-2-30,outline=col2p,start=270,extent=180,style="arc")

		can.create_line(xq+200-(ll/2)+15,440+2-30,  xq+200+(ll/2)-30+15,440+2-30,fill=col2p)
		can.create_line(xq+200-(ll/2)+15,440+30-2-30,  xq+200+(ll/2)-30+15,440+30-2-30,fill=col2p)

		can.create_text(xq+200,440+15-30,text="OK",font=("FreeMono","13",),fill=col1p)

		pqueen["bg"]=col1p
		prook["bg"]=col1p
		pknight["bg"]=col1p
		pbishop["bg"]=col1p

		if pppval=="bishop":

			pbishop["bg"]="#5ef774"


			ar=[1+10,0]

			cx,cy=1+10,1+10

			a_=180

			for a in range(90):
				x=11*math.sin(math.radians(a_))+cx
				y=11*math.cos(math.radians(a_))+cy

				ar.append(x)
				ar.append(y)

				a_+=1

			ar.append(0)
			ar.append(0)

			pbishop.create_polygon(ar,fill="#ffffff",outline="#ffffff")



			ar=[82.5-11,0]

			cx,cy=82.5-1-10,1+10

			a_=180

			for a in range(90):
				x=11*math.sin(math.radians(a_))+cx
				y=11*math.cos(math.radians(a_))+cy

				ar.append(x)
				ar.append(y)

				a_-=1

			ar.append(82.5)
			ar.append(0)

			pbishop.create_polygon(ar,fill="#ffffff",outline="#ffffff")





			ar=[0,82.5-1-10]

			cx,cy=1+10,82.5-1-10

			a_=270

			for a in range(90):
				x=11*math.sin(math.radians(a_))+cx
				y=11*math.cos(math.radians(a_))+cy

				ar.append(x)
				ar.append(y)

				a_+=1

			ar.append(0)
			ar.append(82.5)

			pbishop.create_polygon(ar,fill="#ffffff",outline="#ffffff")



			ar=[82.5,82.5]

			cx,cy=82.5-1-10,82.5-1-10

			a_=90

			for a in range(90):
				x=11*math.sin(math.radians(a_))+cx
				y=11*math.cos(math.radians(a_))+cy

				ar.append(x)
				ar.append(y)

				a_-=1

			ar.append(82.5)
			ar.append(82.5)

			pbishop.create_polygon(ar,fill="#ffffff",outline="#ffffff")


			pbishop.create_arc(1,1, 21,21,start=90,extent=90,style="arc",outline="#08bb21",width=1)
			pbishop.create_arc(82.5-1-20,1, 82.5-1,21,start=0,extent=90,style="arc",outline="#08bb21",width=1)
			pbishop.create_arc(1,82.5-1-20, 21,82.5-1,start=180,extent=90,style="arc",outline="#08bb21",width=1)
			pbishop.create_arc(82.5-1-20,82.5-1-20, 82.5-1,82.5-1, start=270,extent=90,style="arc",outline="#08bb21",width=1)

			pbishop.create_line(1+10,1, 82.5-1-10,1,fill="#08bb21",width=1)
			pbishop.create_line(1+10-1,82.5-1, 82.5-1-10,82.5-1,fill="#08bb21",width=1)

			pbishop.create_line(1,1+10-1, 1,82.5-1-10,fill="#08bb21" ,width=1)
			pbishop.create_line(82.5-1,1+10, 82.5-1,82.5-1-10,fill="#08bb21" ,width=1)

			#pbishop.create_line(1,1, 1,82.5-1, 82.5-1,82.5-1, 82.5-1,1, 1,1, fill=col2p)
		elif pppval=="knight":


			pknight["bg"]="#5ef774"




			ar=[1+10,0]

			cx,cy=1+10,1+10

			a_=180

			for a in range(90):
				x=11*math.sin(math.radians(a_))+cx
				y=11*math.cos(math.radians(a_))+cy

				ar.append(x)
				ar.append(y)

				a_+=1

			ar.append(0)
			ar.append(0)

			pknight.create_polygon(ar,fill="#ffffff",outline="#ffffff")



			ar=[82.5-11,0]

			cx,cy=82.5-1-10,1+10

			a_=180

			for a in range(90):
				x=11*math.sin(math.radians(a_))+cx
				y=11*math.cos(math.radians(a_))+cy

				ar.append(x)
				ar.append(y)

				a_-=1

			ar.append(82.5)
			ar.append(0)

			pknight.create_polygon(ar,fill="#ffffff",outline="#ffffff")





			ar=[0,82.5-1-10]

			cx,cy=1+10,82.5-1-10

			a_=270

			for a in range(90):
				x=11*math.sin(math.radians(a_))+cx
				y=11*math.cos(math.radians(a_))+cy

				ar.append(x)
				ar.append(y)

				a_+=1

			ar.append(0)
			ar.append(82.5)

			pknight.create_polygon(ar,fill="#ffffff",outline="#ffffff")



			ar=[82.5,82.5]

			cx,cy=82.5-1-10,82.5-1-10

			a_=90

			for a in range(90):
				x=11*math.sin(math.radians(a_))+cx
				y=11*math.cos(math.radians(a_))+cy

				ar.append(x)
				ar.append(y)

				a_-=1

			ar.append(82.5)
			ar.append(82.5)

			pknight.create_polygon(ar,fill="#ffffff",outline="#ffffff")


			pknight.create_arc(1,1, 21,21,start=90,extent=90,style="arc",outline="#08bb21",width=1)
			pknight.create_arc(82.5-1-20,1, 82.5-1,21,start=0,extent=90,style="arc",outline="#08bb21",width=1)
			pknight.create_arc(1,82.5-1-20, 21,82.5-1,start=180,extent=90,style="arc",outline="#08bb21",width=1)
			pknight.create_arc(82.5-1-20,82.5-1-20, 82.5-1,82.5-1, start=270,extent=90,style="arc",outline="#08bb21",width=1)

			pknight.create_line(1+10,1, 82.5-1-10,1,fill="#08bb21",width=1)
			pknight.create_line(1+10-1,82.5-1, 82.5-1-10,82.5-1,fill="#08bb21",width=1)

			pknight.create_line(1,1+10-1, 1,82.5-1-10,fill="#08bb21" ,width=1)
			pknight.create_line(82.5-1,1+10, 82.5-1,82.5-1-10,fill="#08bb21" ,width=1)

		elif pppval=="rook":


			prook["bg"]="#5ef774"




			ar=[1+10,0]

			cx,cy=1+10,1+10

			a_=180

			for a in range(90):
				x=11*math.sin(math.radians(a_))+cx
				y=11*math.cos(math.radians(a_))+cy

				ar.append(x)
				ar.append(y)

				a_+=1

			ar.append(0)
			ar.append(0)

			prook.create_polygon(ar,fill="#ffffff",outline="#ffffff")



			ar=[82.5-11,0]

			cx,cy=82.5-1-10,1+10

			a_=180

			for a in range(90):
				x=11*math.sin(math.radians(a_))+cx
				y=11*math.cos(math.radians(a_))+cy

				ar.append(x)
				ar.append(y)

				a_-=1

			ar.append(82.5)
			ar.append(0)

			prook.create_polygon(ar,fill="#ffffff",outline="#ffffff")





			ar=[0,82.5-1-10]

			cx,cy=1+10,82.5-1-10

			a_=270

			for a in range(90):
				x=11*math.sin(math.radians(a_))+cx
				y=11*math.cos(math.radians(a_))+cy

				ar.append(x)
				ar.append(y)

				a_+=1

			ar.append(0)
			ar.append(82.5)

			prook.create_polygon(ar,fill="#ffffff",outline="#ffffff")



			ar=[82.5,82.5]

			cx,cy=82.5-1-10,82.5-1-10

			a_=90

			for a in range(90):
				x=11*math.sin(math.radians(a_))+cx
				y=11*math.cos(math.radians(a_))+cy

				ar.append(x)
				ar.append(y)

				a_-=1

			ar.append(82.5)
			ar.append(82.5)

			prook.create_polygon(ar,fill="#ffffff",outline="#ffffff")


			prook.create_arc(1,1, 21,21,start=90,extent=90,style="arc",outline="#08bb21",width=1)
			prook.create_arc(82.5-1-20,1, 82.5-1,21,start=0,extent=90,style="arc",outline="#08bb21",width=1)
			prook.create_arc(1,82.5-1-20, 21,82.5-1,start=180,extent=90,style="arc",outline="#08bb21",width=1)
			prook.create_arc(82.5-1-20,82.5-1-20, 82.5-1,82.5-1, start=270,extent=90,style="arc",outline="#08bb21",width=1)

			prook.create_line(1+10,1, 82.5-1-10,1,fill="#08bb21",width=1)
			prook.create_line(1+10-1,82.5-1, 82.5-1-10,82.5-1,fill="#08bb21",width=1)

			prook.create_line(1,1+10-1, 1,82.5-1-10,fill="#08bb21" ,width=1)
			prook.create_line(82.5-1,1+10, 82.5-1,82.5-1-10,fill="#08bb21" ,width=1)

		elif pppval=="queen":

			pqueen["bg"]="#5ef774"



			ar=[1+10,0]

			cx,cy=1+10,1+10

			a_=180

			for a in range(90):
				x=11*math.sin(math.radians(a_))+cx
				y=11*math.cos(math.radians(a_))+cy

				ar.append(x)
				ar.append(y)

				a_+=1

			ar.append(0)
			ar.append(0)

			pqueen.create_polygon(ar,fill="#ffffff",outline="#ffffff")



			ar=[82.5-11,0]

			cx,cy=82.5-1-10,1+10

			a_=180

			for a in range(90):
				x=11*math.sin(math.radians(a_))+cx
				y=11*math.cos(math.radians(a_))+cy

				ar.append(x)
				ar.append(y)

				a_-=1

			ar.append(82.5)
			ar.append(0)

			pqueen.create_polygon(ar,fill="#ffffff",outline="#ffffff")





			ar=[0,82.5-1-10]

			cx,cy=1+10,82.5-1-10

			a_=270

			for a in range(90):
				x=11*math.sin(math.radians(a_))+cx
				y=11*math.cos(math.radians(a_))+cy

				ar.append(x)
				ar.append(y)

				a_+=1

			ar.append(0)
			ar.append(82.5)

			pqueen.create_polygon(ar,fill="#ffffff",outline="#ffffff")



			ar=[82.5,82.5]

			cx,cy=82.5-1-10,82.5-1-10

			a_=90

			for a in range(90):
				x=11*math.sin(math.radians(a_))+cx
				y=11*math.cos(math.radians(a_))+cy

				ar.append(x)
				ar.append(y)

				a_-=1

			ar.append(82.5)
			ar.append(82.5)

			pqueen.create_polygon(ar,fill="#ffffff",outline="#ffffff")


			pqueen.create_arc(1,1, 21,21,start=90,extent=90,style="arc",outline="#08bb21",width=1)
			pqueen.create_arc(82.5-1-20,1, 82.5-1,21,start=0,extent=90,style="arc",outline="#08bb21",width=1)
			pqueen.create_arc(1,82.5-1-20, 21,82.5-1,start=180,extent=90,style="arc",outline="#08bb21",width=1)
			pqueen.create_arc(82.5-1-20,82.5-1-20, 82.5-1,82.5-1, start=270,extent=90,style="arc",outline="#08bb21",width=1)

			pqueen.create_line(1+10,1, 82.5-1-10,1,fill="#08bb21",width=1)
			pqueen.create_line(1+10-1,82.5-1, 82.5-1-10,82.5-1,fill="#08bb21",width=1)

			pqueen.create_line(1,1+10-1, 1,82.5-1-10,fill="#08bb21" ,width=1)
			pqueen.create_line(82.5-1,1+10, 82.5-1,82.5-1-10,fill="#08bb21" ,width=1)


		pqueen.place(in_=root,x=xq+14,y=315-10)
		prook.place(in_=root,x=xq+110.5,y=315-10)
		pknight.place(in_=root,x=xq+207,y=315-10)
		pbishop.place(in_=root,x=xq+303.5,y=315-10)

	else:
		pqueen.place_forget()
		prook.place_forget()
		pknight.place_forget()
		pbishop.place_forget()


	can.create_line(20,20,20,680,680,680,680,20,20,20,fill="#70A2A3",width=1)


	if not turn=="x":
		if cpu==turn:
			create_rectangle(can,0, 0, 700, 20, fill='#00ff00', alpha=.5)
		else:
			create_rectangle(can,0, 700-20, 700, 700, fill='#00ff00', alpha=.5)

 
	if flag==2:
		xq,yq=700-350-200,700-350-36.5








		create_rectangle(can,0, 0, 700, 700, fill='#000000', alpha=.5)


		col2p,col1p="#ee6b6e","#333333"



		can.create_oval(xq+2,yq+2-50, xq+2+20,yq+2-50+20,fill="#ffffff",outline="#ffffff")
		can.create_oval(xq+400-2-20,yq+2-50, xq+400-2,yq+2-50+20,fill="#ffffff",outline="#ffffff")
		can.create_oval(xq+2,yq+73-2-20, xq+2+20,yq+73-2,fill="#ffffff",outline="#ffffff")
		can.create_oval(xq+400-2-20,yq+73-2-20,xq+400-2,yq+73-2,fill="#ffffff",outline="#ffffff")


		can.create_polygon(xq+2+10,yq+2-50, xq+400-2-10,yq+2-50, xq+400-2,yq+2-50+10,
			xq+400-2,yq+73-2-10, xq+400-2-10,yq+73-2, xq+2+10,yq+73-2, xq+2,yq+73-2-10,
			xq+2,yq+2-50+10,fill="#ffffff",outline="#ffffff")







		if cpu=="w":
			col="black"
			col2="white"
		elif cpu=="b":
			col="white"
			col2="black"

		cau=ImageTk.PhotoImage(file="data/warning.png")

		can.create_image(xq+30,yq-50+10,image=cau,anchor="nw")



		if killer==cpu:
			can.create_text(xq+30+100-15,yq-50+45,text="Checkmate, "+col2+" wins.",fill="#111111",font=("FreeMono","15"),anchor="w")
		else:
			can.create_text(xq+30+100-15,yq-50+45,text="Checkmate, "+col+" wins.",fill="#111111",font=("FreeMono","15"),anchor="w")

		
		ll=130

		col2p="red"
		can.create_oval(xq+102-(ll/2),yq+31+2, xq+102-(ll/2)+30,yq+61-2,fill=col2p,outline=col2p)

		can.create_oval(xq+102+(ll/2),yq+31+2, xq+102+(ll/2)-30,yq+61-2,fill=col2p,outline=col2p)
		can.create_rectangle(xq+102-(ll/2)+15,yq+31+2,  xq+102+(ll/2)-30+15,yq+61-2,fill=col2p,outline=col2p)

		can.create_arc(xq+102-(ll/2),yq+31+2, xq+102-(ll/2)+30,yq+61-2,outline=col2p,start=90,extent=180,style="arc")
		can.create_arc(xq+102+(ll/2),yq+31+2, xq+102+(ll/2)-30,yq+61-2,outline=col2p,start=270,extent=180,style="arc")

		can.create_line(xq+102-(ll/2)+15,yq+31+2,  xq+102+(ll/2)-30+15,yq+31+2,fill=col2p)
		can.create_line(xq+102-(ll/2)+15,yq+61-2,  xq+102+(ll/2)-30+15,yq+61-2,fill=col2p)

		can.create_text(xq+102,yq+46,text="Quit",fill="#ffffff",font=("FreeMono","13"))




		ll=130
		col1p,col2p="#222222","#222222"
		can.create_oval(xq+298-(ll/2),yq+31+2, xq+298-(ll/2)+30,yq+61-2,fill=col2p,outline=col2p)


		can.create_oval(xq+298+(ll/2),yq+31+2, xq+298+(ll/2)-30,yq+61-2,fill=col2p,outline=col2p)
		can.create_rectangle(xq+298-(ll/2)+15,yq+31+2,  xq+298+(ll/2)-30+15,yq+61-2,fill=col2p,outline=col2p)

		can.create_arc(xq+298-(ll/2),yq+31+2, xq+298-(ll/2)+30,yq+61-2,outline=col1p,start=90,extent=180,style="arc")
		can.create_arc(xq+298+(ll/2),yq+31+2, xq+298+(ll/2)-30,yq+61-2,outline=col1p,start=270,extent=180,style="arc")

		can.create_line(xq+298-(ll/2)+15,yq+31+2,  xq+298+(ll/2)-30+15,yq+31+2,fill=col1p)
		can.create_line(xq+298-(ll/2)+15,yq+61-2,  xq+298+(ll/2)-30+15,yq+61-2,fill=col1p)

		can.create_text(xq+298,yq+46,text="New game",fill="#ffffff",font=("FreeMono","13"))


	qu=ImageTk.PhotoImage(file="data/quitb.png")

	
	
	can.create_oval(707.5-1,5-1, 707.5+25,5+25,fill="darkred",outline="darkred")
	can.create_image(707.5,5,image=qu,anchor="nw")

	

	#can.create_line(707.5+12.5-4,5+12.5-4, 707.5+12.5+4,5+12.5+4,fill="#ffffff",width=1)
	#can.create_line(707.5+12.5-4,5+12.5+4, 707.5+12.5+4,5+12.5-4,fill="#ffffff",width=1)

def val_knight(pos,col):
	global al

	arz=[]
	if col=="w":


		try:

			v_=al.index(pos[0])-1
			v1=al[al.index(pos[0])-1]
			v2=int(pos[1])+2
			vx=str(v1)+str(v2)
		except:
			v_="x"
		if not v_=="x":
			if not v2>8:
				if not v2<1:
					if not v_<0:
						if not v_>7:

							qt=0
							for i in dict_:
								if dict_[i][0]==vx:
									if i.split("_")[0]=="b":
										arz.append("_"+str(vx))
										qt=1
									elif i.split("_")[0]=="w":
										qt=1
							if qt==0:
								arz.append(vx)


		try:
			v_=al.index(pos[0])+1
			v1=al[al.index(pos[0])+1]
			v2=int(pos[1])+2
			vx=str(v1)+str(v2)
		except:
			v_="x"
		
		if not v_=="x":
			if not v2>8:
				if not v2<1:
					if not v_<0:
						if not v_>7:
							qt=0
							for i in dict_:
								if dict_[i][0]==vx:
									if i.split("_")[0]=="b":
										arz.append("_"+str(vx))
										qt=1
									elif i.split("_")[0]=="w":
										qt=1
							if qt==0:
								arz.append(vx)

		try:

			v_=al.index(pos[0])+2
			v1=al[al.index(pos[0])+2]
			v2=int(pos[1])+1
			vx=str(v1)+str(v2)
		except:
			v_="x"

		if not v_=="x":
			if not v2>8:
				if not v2<1:
					if not v_<0:
						if not v_>7:
							qt=0
							for i in dict_:
								if dict_[i][0]==vx:
									if i.split("_")[0]=="b":
										arz.append("_"+str(vx))
										qt=1
									elif i.split("_")[0]=="w":
										qt=1
							if qt==0:
								arz.append(vx)


		try:
			v_=al.index(pos[0])-2
			v1=al[al.index(pos[0])-2]
			v2=int(pos[1])+1
			vx=str(v1)+str(v2)
		except:
			v_="x"
		if not v_=="x":
			if not v2>8:
				if not v2<1:
					if not v_<0:
						if not v_>7:
							qt=0
							for i in dict_:
								if dict_[i][0]==vx:
									if i.split("_")[0]=="b":
										arz.append("_"+str(vx))
										qt=1
									elif i.split("_")[0]=="w":
										qt=1
							if qt==0:
								arz.append(vx)

		try:
			v_=al.index(pos[0])-2
			v1=al[al.index(pos[0])-2]
			v2=int(pos[1])-1
			vx=str(v1)+str(v2)
		except:
			v_="x"

		if not v_=="x":
			if not v2>8:
				if not v2<1:
					if not v_<0:
						if not v_>7:
							qt=0
							for i in dict_:
								if dict_[i][0]==vx:
									if i.split("_")[0]=="b":
										arz.append("_"+str(vx))
										qt=1
									elif i.split("_")[0]=="w":
										qt=1
							if qt==0:
								arz.append(vx)

		try:
			v_=al.index(pos[0])+2
			v1=al[al.index(pos[0])+2]
			v2=int(pos[1])-1
			vx=str(v1)+str(v2)
		except:
			v_="x"
		if not v_=="x":
			if not v2>8:
				if not v2<1:
					if not v_<0:
						if not v_>7:
							qt=0
							for i in dict_:
								if dict_[i][0]==vx:
									if i.split("_")[0]=="b":
										arz.append("_"+str(vx))
										qt=1
									elif i.split("_")[0]=="w":
										qt=1
							if qt==0:
								arz.append(vx)

		try:
			v_=al.index(pos[0])-1
			v1=al[al.index(pos[0])-1]
			v2=int(pos[1])-2
			vx=str(v1)+str(v2)
		except:
			v_="x"
		if not v_=="x":
			if not v2>8:
				if not v2<1:
					if not v_<0:
						if not v_>7:
							qt=0
							for i in dict_:
								if dict_[i][0]==vx:
									if i.split("_")[0]=="b":
										arz.append("_"+str(vx))
										qt=1
									elif i.split("_")[0]=="w":
										qt=1
							if qt==0:
								arz.append(vx)


		try:
			v_=al.index(pos[0])+1
			v1=al[al.index(pos[0])+1]
			v2=int(pos[1])-2
			vx=str(v1)+str(v2)
		except:
			v_="x"
		if not v_=="x":
			if not v2>8:
				if not v2<1:
					if not v_<0:
						if not v_>7:

							qt=0
							for i in dict_:
								if dict_[i][0]==vx:
									if i.split("_")[0]=="b":
										arz.append("_"+str(vx))
										qt=1
									elif i.split("_")[0]=="w":
										qt=1
							if qt==0:
								arz.append(vx)




		

	if col=="b":


		try:

			v_=al.index(pos[0])-1
			v1=al[al.index(pos[0])-1]
			v2=int(pos[1])-2
			vx=str(v1)+str(v2)
		except:
			v_="x"
		if not v_=="x":
			if not v2>8:
				if not v2<1:
					if not v_<0:
						if not v_>7:

							qt=0
							for i in dict_:
								if dict_[i][0]==vx:
									if i.split("_")[0]=="w":
										arz.append("_"+str(vx))
										qt=1
									elif i.split("_")[0]=="b":
										qt=1
							if qt==0:
								arz.append(vx)


		try:
			v_=al.index(pos[0])+1
			v1=al[al.index(pos[0])+1]
			v2=int(pos[1])-2
			vx=str(v1)+str(v2)
		except:
			v_="x"
		
		if not v_=="x":
			if not v2>8:
				if not v2<1:
					if not v_<0:
						if not v_>7:
							qt=0
							for i in dict_:
								if dict_[i][0]==vx:
									if i.split("_")[0]=="w":
										arz.append("_"+str(vx))
										qt=1
									elif i.split("_")[0]=="b":
										qt=1
							if qt==0:
								arz.append(vx)

		try:

			v_=al.index(pos[0])+2
			v1=al[al.index(pos[0])+2]
			v2=int(pos[1])-1
			vx=str(v1)+str(v2)
		except:
			v_="x"

		if not v_=="x":
			if not v2>8:
				if not v2<1:
					if not v_<0:
						if not v_>7:
							qt=0
							for i in dict_:
								if dict_[i][0]==vx:
									if i.split("_")[0]=="w":
										arz.append("_"+str(vx))
										qt=1
									elif i.split("_")[0]=="b":
										qt=1
							if qt==0:
								arz.append(vx)


		try:
			v_=al.index(pos[0])-2
			v1=al[al.index(pos[0])-2]
			v2=int(pos[1])-1
			vx=str(v1)+str(v2)
		except:
			v_="x"
		if not v_=="x":
			if not v2>8:
				if not v2<1:
					if not v_<0:
						if not v_>7:
							qt=0
							for i in dict_:
								if dict_[i][0]==vx:
									if i.split("_")[0]=="w":
										arz.append("_"+str(vx))
										qt=1
									elif i.split("_")[0]=="b":
										qt=1
							if qt==0:
								arz.append(vx)

		try:
			v_=al.index(pos[0])-2
			v1=al[al.index(pos[0])-2]
			v2=int(pos[1])+1
			vx=str(v1)+str(v2)
		except:
			v_="x"

		if not v_=="x":
			if not v2>8:
				if not v2<1:
					if not v_<0:
						if not v_>7:
							qt=0
							for i in dict_:
								if dict_[i][0]==vx:
									if i.split("_")[0]=="w":
										arz.append("_"+str(vx))
										qt=1
									elif i.split("_")[0]=="b":
										qt=1
							if qt==0:
								arz.append(vx)

		try:
			v_=al.index(pos[0])+2
			v1=al[al.index(pos[0])+2]
			v2=int(pos[1])+1
			vx=str(v1)+str(v2)
		except:
			v_="x"
		if not v_=="x":
			if not v2>8:
				if not v2<1:
					if not v_<0:
						if not v_>7:
							qt=0
							for i in dict_:
								if dict_[i][0]==vx:
									if i.split("_")[0]=="w":
										arz.append("_"+str(vx))
										qt=1
									elif i.split("_")[0]=="b":
										qt=1
							if qt==0:
								arz.append(vx)

		try:
			v_=al.index(pos[0])-1
			v1=al[al.index(pos[0])-1]
			v2=int(pos[1])+2
			vx=str(v1)+str(v2)
		except:
			v_="x"
		if not v_=="x":
			if not v2>8:
				if not v2<1:
					if not v_<0:
						if not v_>7:
							qt=0
							for i in dict_:
								if dict_[i][0]==vx:
									if i.split("_")[0]=="w":
										arz.append("_"+str(vx))
										qt=1
									elif i.split("_")[0]=="b":
										qt=1
							if qt==0:
								arz.append(vx)


		try:
			v_=al.index(pos[0])+1
			v1=al[al.index(pos[0])+1]
			v2=int(pos[1])+2
			vx=str(v1)+str(v2)
		except:
			v_="x"
		if not v_=="x":
			if not v2>8:
				if not v2<1:
					if not v_<0:
						if not v_>7:

							qt=0
							for i in dict_:
								if dict_[i][0]==vx:
									if i.split("_")[0]=="w":
										arz.append("_"+str(vx))
										qt=1
									elif i.split("_")[0]=="b":
										qt=1
							if qt==0:
								arz.append(vx)

	return arz


		
def val_king(pos,col):
	global al

	arz=[]

	if col=="w":


		try:
			ind=al.index(pos[0])-1
			p=int(pos[1])+1

			if ind<0 or ind>7:
				ind="x"

			if p>8:
				ind="x"
		except:
			ind="x"

		if not ind=="x":
			v=str(al[ind])+str(p)

			c=0
			for i in dict_:
				if dict_[i][0]==v:
					if i.split("_")[0]=="b":
						arz.append("_"+str(v))
					c=1

			if c==0:
				arz.append(v)







		try:
			ind=al.index(pos[0])
			p=int(pos[1])+1

			if ind<0 or ind>7:
				ind="x"

			if p>8:
				ind="x"
		except:
			ind="x"

		if not ind=="x":
			v=str(al[ind])+str(p)

			c=0
			for i in dict_:
				if dict_[i][0]==v:
					if i.split("_")[0]=="b":
						arz.append("_"+str(v))
					c=1

			if c==0:
				arz.append(v)

		try:
			ind=al.index(pos[0])+1
			p=int(pos[1])+1

			if ind<0 or ind>7:
				ind="x"

			if p>8:
				ind="x"
		except:
			ind="x"

		if not ind=="x":
			v=str(al[ind])+str(p)

			c=0
			for i in dict_:
				if dict_[i][0]==v:
					if i.split("_")[0]=="b":
						arz.append("_"+str(v))
					c=1

			if c==0:
				arz.append(v)





		try:
			ind=al.index(pos[0])-1
			p=int(pos[1])

			if ind<0 or ind>7:
				ind="x"

			if p>8:
				ind="x"
		except:
			ind="x"

		if not ind=="x":
			v=str(al[ind])+str(p)

			c=0
			for i in dict_:
				if dict_[i][0]==v:
					if i.split("_")[0]=="b":
						arz.append("_"+str(v))
					c=1

			if c==0:
				arz.append(v)




		try:
			ind=al.index(pos[0])+1
			p=int(pos[1])

			if ind<0 or ind>7:
				ind="x"

			if p>8:
				ind="x"
		except:
			ind="x"


		if not ind=="x":
			v=str(al[ind])+str(p)

			c=0
			for i in dict_:
				if dict_[i][0]==v:
					if i.split("_")[0]=="b":
						arz.append("_"+str(v))
					c=1



			if c==0:
				arz.append(v)



		try:
			ind=al.index(pos[0])-1
			p=int(pos[1])-1

			if ind<0 or ind>7:
				ind="x"

			if p<1:
				ind="x"
		except:
			ind="x"

		if not ind=="x":
			v=str(al[ind])+str(p)

			c=0
			for i in dict_:
				if dict_[i][0]==v:
					if i.split("_")[0]=="b":
						arz.append("_"+str(v))
					c=1

			if c==0:
				arz.append(v)


		try:
			ind=al.index(pos[0])
			p=int(pos[1])-1

			if ind<0 or ind>7:
				ind="x"

			if p<1:
				ind="x"
		except:
			ind="x"

		if not ind=="x":
			v=str(al[ind])+str(p)

			c=0
			for i in dict_:
				if dict_[i][0]==v:
					if i.split("_")[0]=="b":
						arz.append("_"+str(v))
					c=1

			if c==0:
				arz.append(v)



		try:
			ind=al.index(pos[0])+1
			p=int(pos[1])-1

			if ind<0 or ind>7:
				ind="x"

			if p<1:
				ind="x"
		except:
			ind="x"

		if not ind=="x":
			v=str(al[ind])+str(p)

			c=0
			for i in dict_:
				if dict_[i][0]==v:
					if i.split("_")[0]=="b":
						arz.append("_"+str(v))
					c=1

			if c==0:
				arz.append(v)

	elif col=="b":

		try:
			ind=al.index(pos[0])-1
			p=int(pos[1])+1

			if ind<0 or ind>7:
				ind="x"

			if p>8:
				ind="x"
		except:
			ind="x"

		if not ind=="x":
			v=str(al[ind])+str(p)

			c=0
			for i in dict_:
				if dict_[i][0]==v:
					if i.split("_")[0]=="w":
						arz.append("_"+str(v))
					c=1

			if c==0:
				arz.append(v)


		try:
			ind=al.index(pos[0])
			p=int(pos[1])+1

			if ind<0 or ind>7:
				ind="x"

			if p>8:
				ind="x"
		except:
			ind="x"

		if not ind=="x":
			v=str(al[ind])+str(p)

			c=0
			for i in dict_:
				if dict_[i][0]==v:
					if i.split("_")[0]=="w":
						arz.append("_"+str(v))
					c=1

			if c==0:
				arz.append(v)

		try:
			ind=al.index(pos[0])+1
			p=int(pos[1])+1

			if ind<0 or ind>7:
				ind="x"

			if p>8:
				ind="x"
		except:
			ind="x"

		if not ind=="x":
			v=str(al[ind])+str(p)

			c=0
			for i in dict_:
				if dict_[i][0]==v:
					if i.split("_")[0]=="w":
						arz.append("_"+str(v))
					c=1

			if c==0:
				arz.append(v)





		try:
			ind=al.index(pos[0])-1
			p=int(pos[1])

			if ind<0 or ind>7:
				ind="x"

			if p>8:
				ind="x"
		except:
			ind="x"

		if not ind=="x":
			v=str(al[ind])+str(p)

			c=0
			for i in dict_:
				if dict_[i][0]==v:
					if i.split("_")[0]=="w":
						arz.append("_"+str(v))
					c=1

			if c==0:
				arz.append(v)




		try:
			ind=al.index(pos[0])+1
			p=int(pos[1])

			if ind<0 or ind>7:
				ind="x"

			if p>8:
				ind="x"
		except:
			ind="x"

		if not ind=="x":
			v=str(al[ind])+str(p)

			c=0
			for i in dict_:
				if dict_[i][0]==v:
					if i.split("_")[0]=="w":
						arz.append("_"+str(v))
					c=1

			if c==0:
				arz.append(v)



		try:
			ind=al.index(pos[0])-1
			p=int(pos[1])-1

			if ind<0 or ind>7:
				ind="x"

			if p<1:
				ind="x"
		except:
			ind="x"

		if not ind=="x":
			v=str(al[ind])+str(p)

			c=0
			for i in dict_:
				if dict_[i][0]==v:
					if i.split("_")[0]=="w":
						arz.append("_"+str(v))
					c=1

			if c==0:
				arz.append(v)


		try:
			ind=al.index(pos[0])
			p=int(pos[1])-1

			if ind<0 or ind>7:
				ind="x"

			if p<1:
				ind="x"
		except:
			ind="x"

		if not ind=="x":
			v=str(al[ind])+str(p)

			c=0
			for i in dict_:
				if dict_[i][0]==v:
					if i.split("_")[0]=="w":
						arz.append("_"+str(v))
					c=1

			if c==0:
				arz.append(v)



		try:
			ind=al.index(pos[0])+1
			p=int(pos[1])-1

			if ind<0 or ind>7:
				ind="x"

			if p<1:
				ind="x"
		except:
			ind="x"

		if not ind=="x":
			v=str(al[ind])+str(p)

			c=0
			for i in dict_:
				if dict_[i][0]==v:
					if i.split("_")[0]=="w":
						arz.append("_"+str(v))
					c=1

			if c==0:
				arz.append(v)

	return arz

def val_rook(pos,col):
	global al
	arz=[]

	p1=pos[0]
	p2=pos[1]

	if col=="b":
		ar1=[]
		ar2=[]
		ar3=[]
		ar4=[]


		ind=al.index(p1)

		val1=ind
		val2=int(p2)+1


		while 1:
			if not val2>8:

				c=0
				for i in dict_:
					if dict_[i][0]==str(al[val1])+str(val2):

						col=i.split("_")[0]
						typ=i.split("_")[1]

						if col=="w":
							ar1.append("_"+str(al[val1])+str(val2))
						
						c=1
						break

				if c==1:
					break


				ar1.append(str(al[val1])+str(val2))
			else:
				break

			val2+=1




		val1=ind
		val2=int(p2)-1

		while 1:
			if not val2<1:



				c=0
				for i in dict_:
					if dict_[i][0]==str(al[val1])+str(val2):

						col=i.split("_")[0]
						typ=i.split("_")[1]

						if col=="w":
							ar2.append("_"+str(al[val1])+str(val2))
						
						c=1
						break

				if c==1:
					break


				ar2.append(str(al[val1])+str(val2))
			else:
				break

			val2-=1



		val1=ind-1
		val2=int(p2)

		while 1:
			if not val1<0:

				c=0
				for i in dict_:
					if dict_[i][0]==str(al[val1])+str(val2):

						col=i.split("_")[0]
						typ=i.split("_")[1]

						if col=="w":
							ar3.append("_"+str(al[val1])+str(val2))
						
						c=1
						break

				if c==1:
					break

				ar3.append(str(al[val1])+str(val2))

			else:
				break


			val1-=1





		val1=ind+1
		val2=int(p2)

		while 1:
			if not val1>7:

				c=0
				for i in dict_:
					if dict_[i][0]==str(al[val1])+str(val2):

						col=i.split("_")[0]
						typ=i.split("_")[1]

						if col=="w":
							ar4.append("_"+str(al[val1])+str(val2))
						
						c=1
						break

				if c==1:
					break

				ar4.append(str(al[val1])+str(val2))

			else:
				break


			val1+=1

		arz=ar1+ar2+ar3+ar4


	elif col=="w":
		ar1=[]
		ar2=[]
		ar3=[]
		ar4=[]


		ind=al.index(p1)

		val1=ind
		val2=int(p2)+1


		while 1:
			if not val2>8:

				c=0
				for i in dict_:
					if dict_[i][0]==str(al[val1])+str(val2):

						col=i.split("_")[0]
						typ=i.split("_")[1]

						if col=="b":
							ar1.append("_"+str(al[val1])+str(val2))
						
						c=1
						break

				if c==1:
					break


				ar1.append(str(al[val1])+str(val2))
			else:
				break

			val2+=1




		val1=ind
		val2=int(p2)-1

		while 1:
			if not val2<1:



				c=0
				for i in dict_:
					if dict_[i][0]==str(al[val1])+str(val2):

						col=i.split("_")[0]
						typ=i.split("_")[1]

						if col=="b":
							ar2.append("_"+str(al[val1])+str(val2))
						
						c=1
						break

				if c==1:
					break


				ar2.append(str(al[val1])+str(val2))
			else:
				break

			val2-=1



		val1=ind-1
		val2=int(p2)

		while 1:
			if not val1<0:

				c=0
				for i in dict_:
					if dict_[i][0]==str(al[val1])+str(val2):

						col=i.split("_")[0]
						typ=i.split("_")[1]

						if col=="b":
							ar3.append("_"+str(al[val1])+str(val2))
						
						c=1
						break

				if c==1:
					break

				ar3.append(str(al[val1])+str(val2))

			else:
				break


			val1-=1





		val1=ind+1
		val2=int(p2)

		while 1:
			if not val1>7:

				c=0
				for i in dict_:
					if dict_[i][0]==str(al[val1])+str(val2):

						col=i.split("_")[0]
						typ=i.split("_")[1]

						if col=="b":
							ar4.append("_"+str(al[val1])+str(val2))
						
						c=1
						break

				if c==1:
					break

				ar4.append(str(al[val1])+str(val2))

			else:
				break


			val1+=1

		arz=ar1+ar2+ar3+ar4
	return arz

def val_queen(pos,col):
	global al
	arz=[]

	p1=pos[0]
	p2=pos[1]

	if col=="w":
		ar1=[]
		ar2=[]
		ar3=[]
		ar4=[]

		ar5=[]
		ar6=[]
		ar7=[]
		ar8=[]
		ind=al.index(p1)

		val1=ind
		val2=int(p2)+1


		while 1:
			if not val2>8:

				c=0
				for i in dict_:
					if dict_[i][0]==str(al[val1])+str(val2):

						col=i.split("_")[0]
						typ=i.split("_")[1]

						if col=="b":
							ar5.append("_"+str(al[val1])+str(val2))
						
						c=1
						break

				if c==1:
					break


				ar5.append(str(al[val1])+str(val2))
			else:
				break

			val2+=1




		val1=ind
		val2=int(p2)-1

		while 1:
			if not val2<1:



				c=0
				for i in dict_:
					if dict_[i][0]==str(al[val1])+str(val2):

						col=i.split("_")[0]
						typ=i.split("_")[1]

						if col=="b":
							ar6.append("_"+str(al[val1])+str(val2))
						
						c=1
						break

				if c==1:
					break


				ar6.append(str(al[val1])+str(val2))
			else:
				break

			val2-=1



		val1=ind-1
		val2=int(p2)

		while 1:
			if not val1<0:

				c=0
				for i in dict_:
					if dict_[i][0]==str(al[val1])+str(val2):

						col=i.split("_")[0]
						typ=i.split("_")[1]

						if col=="b":
							ar7.append("_"+str(al[val1])+str(val2))
						
						c=1
						break

				if c==1:
					break

				ar7.append(str(al[val1])+str(val2))

			else:
				break


			val1-=1





		val1=ind+1
		val2=int(p2)

		while 1:
			if not val1>7:

				c=0
				for i in dict_:
					if dict_[i][0]==str(al[val1])+str(val2):

						col=i.split("_")[0]
						typ=i.split("_")[1]

						if col=="b":
							ar7.append("_"+str(al[val1])+str(val2))
						
						c=1
						break

				if c==1:
					break

				ar7.append(str(al[val1])+str(val2))

			else:
				break


			val1+=1








		val1=ind-1
		val2=int(p2)+1

		while 1:
			if val1<0:
				break

			

			c=0
			for i in dict_:
				if dict_[i][0]==str(al[val1])+str(val2):

					col=i.split("_")[0]
					typ=i.split("_")[1]

					if col=="b":
						ar1.append("_"+str(al[val1])+str(val2))
					
					c=1
					break

			if c==1:
				break
				

			if not val2>8:
				ar1.append(str(al[val1])+str(val2))


			val2+=1
			val1-=1



		val1=ind-1
		val3=int(p2)-1

		while 1:
			if val1<0:
				break
			c=0
			for i in dict_:
				if dict_[i][0]==str(al[val1])+str(val3):
					col=i.split("_")[0]
					typ=i.split("_")[1]

					if col=="b":
						ar2.append("_"+str(al[val1])+str(val3))
					c=1
					break

			if c==1:
				break


			if not val3<1:
				ar2.append(str(al[val1])+str(val3))

			

			val1-=1
			val3-=1




		val1=ind+1
		val2=int(p2)+1

		while 1:
			if val1>7:
				break

			c=0
			for i in dict_:
				if dict_[i][0]==str(al[val1])+str(val2):

					col=i.split("_")[0]
					typ=i.split("_")[1]

					if col=="b":
						ar3.append("_"+str(al[val1])+str(val2))
					c=1
					break

			if c==1:
				break



			if not val2>8:
				ar3.append(str(al[val1])+str(val2))

			val2+=1
			val1+=1



		val1=ind+1
		val3=int(p2)-1
		while 1:
			
			if val1>7:
				break
			c=0

			for i in dict_:
				if dict_[i][0]==str(al[val1])+str(val3):

					col=i.split("_")[0]
					typ=i.split("_")[1]

					if col=="b":
						ar4.append("_"+str(al[val1])+str(val3))
					c=1
					break

			if c==1:
				break

			if not val3<1:
				ar4.append(str(al[val1])+str(val3))

			val1+=1
			val3-=1

		arz=ar1+ar2+ar3+ar4+ar5+ar6+ar7+ar8

		

	elif col=="b":
		ar1=[]
		ar2=[]
		ar3=[]
		ar4=[]
		ar5=[]
		ar6=[]
		ar7=[]
		ar8=[]

		ind=al.index(p1)




		val1=ind
		val2=int(p2)+1


		while 1:
			if not val2>8:

				c=0
				for i in dict_:
					if dict_[i][0]==str(al[val1])+str(val2):

						col=i.split("_")[0]
						typ=i.split("_")[1]

						if col=="w":
							ar5.append("_"+str(al[val1])+str(val2))
						
						c=1
						break

				if c==1:
					break


				ar5.append(str(al[val1])+str(val2))
			else:
				break

			val2+=1




		val1=ind
		val2=int(p2)-1

		while 1:
			if not val2<1:



				c=0
				for i in dict_:
					if dict_[i][0]==str(al[val1])+str(val2):

						col=i.split("_")[0]
						typ=i.split("_")[1]

						if col=="w":
							ar6.append("_"+str(al[val1])+str(val2))
						
						c=1
						break

				if c==1:
					break


				ar6.append(str(al[val1])+str(val2))
			else:
				break

			val2-=1



		val1=ind-1
		val2=int(p2)

		while 1:
			if not val1<0:

				c=0
				for i in dict_:
					if dict_[i][0]==str(al[val1])+str(val2):

						col=i.split("_")[0]
						typ=i.split("_")[1]

						if col=="w":
							ar7.append("_"+str(al[val1])+str(val2))
						
						c=1
						break

				if c==1:
					break

				ar7.append(str(al[val1])+str(val2))

			else:
				break


			val1-=1





		val1=ind+1
		val2=int(p2)

		while 1:
			if not val1>7:

				c=0
				for i in dict_:
					if dict_[i][0]==str(al[val1])+str(val2):

						col=i.split("_")[0]
						typ=i.split("_")[1]

						if col=="w":
							ar7.append("_"+str(al[val1])+str(val2))
						
						c=1
						break

				if c==1:
					break

				ar7.append(str(al[val1])+str(val2))

			else:
				break


			val1+=1








		val1=ind-1
		val2=int(p2)+1

		while 1:
			if val1<0:
				break

			

			c=0
			for i in dict_:
				if dict_[i][0]==str(al[val1])+str(val2):

					col=i.split("_")[0]
					typ=i.split("_")[1]

					if col=="w":
						ar1.append("_"+str(al[val1])+str(val2))
					c=1
					break

			if c==1:
				break
				

			if not val2>8:
				ar1.append(str(al[val1])+str(val2))


			val2+=1
			val1-=1



		val1=ind-1
		val3=int(p2)-1

		while 1:
			if val1<0:
				break
			c=0
			for i in dict_:
				if dict_[i][0]==str(al[val1])+str(val3):
					col=i.split("_")[0]
					typ=i.split("_")[1]

					if col=="w":
						ar2.append("_"+str(al[val1])+str(val3))
					c=1
					break

			if c==1:
				break


			if not val3<1:
				ar2.append(str(al[val1])+str(val3))

			

			val1-=1
			val3-=1




		val1=ind+1
		val2=int(p2)+1

		while 1:
			if val1>7:
				break

			c=0
			for i in dict_:
				if dict_[i][0]==str(al[val1])+str(val2):

					col=i.split("_")[0]
					typ=i.split("_")[1]

					if col=="w":
						ar3.append("_"+str(al[val1])+str(val2))
					c=1
					break

			if c==1:
				break



			if not val2>8:
				ar3.append(str(al[val1])+str(val2))

			val2+=1
			val1+=1



		val1=ind+1
		val3=int(p2)-1
		while 1:
			
			if val1>7:
				break
			c=0

			for i in dict_:
				if dict_[i][0]==str(al[val1])+str(val3):

					col=i.split("_")[0]
					typ=i.split("_")[1]

					if col=="w":
						ar4.append("_"+str(al[val1])+str(val3))
					c=1
					break

			if c==1:
				break

			if not val3<1:
				ar4.append(str(al[val1])+str(val3))

			val1+=1
			val3-=1

		arz=ar1+ar2+ar3+ar4+ar5+ar6+ar7+ar8
	return arz

def val_bishop(pos,col):
	global al
	arz=[]
	p1=pos[0]
	p2=pos[1]

	if col=="w":
		ar1=[]
		ar2=[]
		ar3=[]
		ar4=[]
		ind=al.index(p1)

		val1=ind-1
		val2=int(p2)+1

		while 1:
			if val1<0:
				break

			

			c=0
			for i in dict_:
				if dict_[i][0]==str(al[val1])+str(val2):

					col=i.split("_")[0]
					typ=i.split("_")[1]

					if col=="b":
						ar1.append("_"+str(al[val1])+str(val2))
					
					c=1
					break

			if c==1:
				break
				

			if not val2>8:
				ar1.append(str(al[val1])+str(val2))


			val2+=1
			val1-=1



		val1=ind-1
		val3=int(p2)-1

		while 1:
			if val1<0:
				break
			c=0
			for i in dict_:
				if dict_[i][0]==str(al[val1])+str(val3):
					col=i.split("_")[0]
					typ=i.split("_")[1]

					if col=="b":
						ar2.append("_"+str(al[val1])+str(val3))
					c=1
					break

			if c==1:
				break


			if not val3<1:
				ar2.append(str(al[val1])+str(val3))

			

			val1-=1
			val3-=1




		val1=ind+1
		val2=int(p2)+1

		while 1:
			if val1>7:
				break

			c=0
			for i in dict_:
				if dict_[i][0]==str(al[val1])+str(val2):

					col=i.split("_")[0]
					typ=i.split("_")[1]

					if col=="b":
						ar3.append("_"+str(al[val1])+str(val2))
					c=1
					break

			if c==1:
				break



			if not val2>8:
				ar3.append(str(al[val1])+str(val2))

			val2+=1
			val1+=1



		val1=ind+1
		val3=int(p2)-1
		while 1:
			
			if val1>7:
				break
			c=0

			for i in dict_:
				if dict_[i][0]==str(al[val1])+str(val3):

					col=i.split("_")[0]
					typ=i.split("_")[1]

					if col=="b":
						ar4.append("_"+str(al[val1])+str(val3))
					c=1
					break

			if c==1:
				break

			if not val3<1:
				ar4.append(str(al[val1])+str(val3))

			val1+=1
			val3-=1

		arz=ar1+ar2+ar3+ar4


	elif col=="b":
		ar1=[]
		ar2=[]
		ar3=[]
		ar4=[]
		ind=al.index(p1)

		val1=ind-1
		val2=int(p2)+1

		while 1:
			if val1<0:
				break

			

			c=0
			for i in dict_:
				if dict_[i][0]==str(al[val1])+str(val2):

					col=i.split("_")[0]
					typ=i.split("_")[1]

					if col=="w":
						ar1.append("_"+str(al[val1])+str(val2))
					c=1
					break

			if c==1:
				break
				

			if not val2>8:
				ar1.append(str(al[val1])+str(val2))


			val2+=1
			val1-=1



		val1=ind-1
		val3=int(p2)-1

		while 1:
			if val1<0:
				break
			c=0
			for i in dict_:
				if dict_[i][0]==str(al[val1])+str(val3):
					col=i.split("_")[0]
					typ=i.split("_")[1]

					if col=="w":
						ar2.append("_"+str(al[val1])+str(val3))
					c=1
					break

			if c==1:
				break


			if not val3<1:
				ar2.append(str(al[val1])+str(val3))

			

			val1-=1
			val3-=1




		val1=ind+1
		val2=int(p2)+1

		while 1:
			if val1>7:
				break

			c=0
			for i in dict_:
				if dict_[i][0]==str(al[val1])+str(val2):

					col=i.split("_")[0]
					typ=i.split("_")[1]

					if col=="w":
						ar3.append("_"+str(al[val1])+str(val2))
					c=1
					break

			if c==1:
				break



			if not val2>8:
				ar3.append(str(al[val1])+str(val2))

			val2+=1
			val1+=1



		val1=ind+1
		val3=int(p2)-1
		while 1:
			
			if val1>7:
				break
			c=0

			for i in dict_:
				if dict_[i][0]==str(al[val1])+str(val3):

					col=i.split("_")[0]
					typ=i.split("_")[1]

					if col=="w":
						ar4.append("_"+str(al[val1])+str(val3))
					c=1
					break

			if c==1:
				break

			if not val3<1:
				ar4.append(str(al[val1])+str(val3))

			val1+=1
			val3-=1

		arz=ar1+ar2+ar3+ar4

	return arz

def val_pawn(pos,col):
	global al,dict_
	arz=[]


	p1=pos[0]
	p2=pos[1]

	for i in dict_:
		if dict_[i][0]==pos:
			dd=i

	moved=dict_[dd][1]

	if col=="w":
		if moved==0:
			con=0
			for i in dict_:
				if dict_[i][0]==str(p1)+str(int(p2)+1):
					con=1
			if con==0:
				arz.append(str(p1)+str(int(p2)+1))
				cx=0
				for i in dict_:
					if dict_[i][0]==str(p1)+str(int(p2)+2):
						cx=1

				if cx==0:
					arz.append(str(p1)+str(int(p2)+2))


		else:
			con=0
			for i in dict_:
				if dict_[i][0]==str(p1)+str(int(p2)+1):
					con=1
			if con==0:
				arz.append(str(p1)+str(int(p2)+1))	

		index_=al.index(p1)


		if index_==0:
			v1=""
			v2=str(al[index_+1])+str(int(p2)+1)
		elif index_==7:
			v1=str(al[index_-1])+str(int(p2)+1)
			v2=""

		else:
			v1=str(al[index_-1])+str(int(p2)+1)
			v2=str(al[index_+1])+str(int(p2)+1)

		for i in dict_:
			if dict_[i][0]==v1:
				typ=i.split("_")[1]
				col_=i.split("_")[0]


				if not col_=="w":
					arz.append("_"+str(dict_[i][0]))  
			if dict_[i][0]==v2:
				typ=i.split("_")[1]
				col_=i.split("_")[0]


				if not col_=="w":
					arz.append("_"+str(dict_[i][0])) 
		



	elif col=="b":
		if moved==0:
			con=0
			for i in dict_:
				if dict_[i][0]==str(p1)+str(int(p2)-1):
					con=1
			if con==0:
				arz.append(str(p1)+str(int(p2)-1))
				cx=0
				for i in dict_:
					if dict_[i][0]==str(p1)+str(int(p2)-2):
						cx=1

				if cx==0:
					arz.append(str(p1)+str(int(p2)-2))



		else:
			con=0
			for i in dict_:
				if dict_[i][0]==str(p1)+str(int(p2)-1):
					con=1
			if con==0:
				arz.append(str(p1)+str(int(p2)-1))	

		index_=al.index(p1)


		if index_==0:
			v1=""
			v2=str(al[index_+1])+str(int(p2)-1)
		elif index_==7:
			v1=str(al[index_-1])+str(int(p2)-1)
			v2=""

		else:
			v1=str(al[index_-1])+str(int(p2)-1)
			v2=str(al[index_+1])+str(int(p2)-1)

		for i in dict_:
			if dict_[i][0]==v1:
				typ=i.split("_")[1]
				col_=i.split("_")[0]


				if not col_=="b":
					arz.append("_"+str(dict_[i][0]))
			if dict_[i][0]==v2:
				typ=i.split("_")[1]
				col_=i.split("_")[0]


				if not col_=="b":
					arz.append("_"+str(dict_[i][0])) 

	return arz

def check_ava_moves(c):
	global dict_

	for i in dict_:

		col=i.split("_")[0]
		typ=i.split("_")[1]
		po=dict_[i][0]

		if col==c:

			if not po=="x":

				arv=[]
				

				if typ=="pawn":
					arv=val_pawn(po,col)
				elif typ=="bishop":
					arv=val_bishop(po,col)				
				elif typ=="knight":
					arv=val_knight(po,col)
				elif typ=="rook":
					arv=val_rook(po,col)
				elif typ=="queen":
					arv=val_queen(po,col)
				elif typ=="king":
					arv=val_king(po,col)			



def check_(s):


	global flag,ars,dict_,st2

	

	
	c=0
	att=""

	pk=dict_[s+"_king"][0]

	for i in dict_:




		col=i.split("_")[0]
		po=dict_[i][0]
		typ=i.split("_")[1]
		

		if not col==s:
			if not po=="x":


				arv=[]
				

				if typ=="pawn":
					arv=val_pawn(po,col)
				elif typ=="bishop":
					arv=val_bishop(po,col)				
				elif typ=="knight":
					arv=val_knight(po,col)
				elif typ=="rook":
					arv=val_rook(po,col)
				elif typ=="queen":
					arv=val_queen(po,col)
				elif typ=="king":
					arv=val_king(po,col)



				for a in arv:

					if a[0]=="_":

						if a.split("_")[1]==pk:

							con=0


							
							return [1,i]






	return [c,att]



def get_pos(e):
	global user,st,st2,sel_piece,turn,ar,posz, selp,ava,red_,ars,ars_,can,cpu,start_time,conm,timerx,dead_opps,pre_pos,cur_pos,con_pp
	global pppval,flag,killer,stt1,stt2,opp_p,opp_c,sttw,sttb,sttr1,sttr2,sell_,side_,dict_,con2,castle

	global can2,ss1,ss2,ss3
	global difficulty,cwd2
	global moves,_m_
	cx,cy=720,17.5

	r=math.sqrt(((e.x-cx)**2)+((e.y-cy)**2))

	if r<=15:

		root.geometry("700x700")

		can2.delete(ss1)
		can2.delete(ss2)
		can2.delete(ss3)

		can2.place(in_=root,x=0,y=0)


		cwd = os.getcwd()

		cwd2=""
		c=cwd.split("\\")

		for i in c:
			cwd2+=i

			cwd2+="/"




		dict_={
				"w_pawn_1":["a2",0],
				"w_pawn_2":["b2",0],
				"w_pawn_3":["c2",0],
				"w_pawn_4":["d2",0],
				"w_pawn_5":["e2",0],
				"w_pawn_6":["f2",0],
				"w_pawn_7":["g2",0],
				"w_pawn_8":["h2",0],

				"w_rook_1":["a1",0],
				"w_bishop_1":["c1",0],
				"w_knight_1":["b1",0],
				"w_queen":["d1",0],
				"w_king":["e1",0],
				"w_knight_2":["g1",0],
				"w_bishop_2":["f1",0],
				"w_rook_2":["h1",0],


				"b_pawn_1":["a7",0],
				"b_pawn_2":["b7",0],
				"b_pawn_3":["c7",0],
				"b_pawn_4":["d7",0],
				"b_pawn_5":["e7",0],
				"b_pawn_6":["f7",0],
				"b_pawn_7":["g7",0],
				"b_pawn_8":["h7",0],

				"b_rook_1":["a8",0],
				"b_bishop_1":["c8",0],
				"b_knight_1":["b8",0],
				"b_queen":["d8",0],
				"b_king":["e8",0],
				"b_knight_2":["g8",0],
				"b_bishop_2":["f8",0],
				"b_rook_2":["h8",0],


				}


		stockfish.set_fen_position("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR/ w KQkq - 0 1")

		sttw=()
		sttb=()
		sttr1=()
		sttr2=()
		sell_=()
		side_=""


		pppval=""#


		stt1=0
		stt2=0

		dead_opps=[]#
		dead_ps=[]#
		killer=""#


		con_pp=0#
		timerx=0#
		opp_p=""
		opp_c=""

		conm=0#
		cpu=""#
		user=""


		flag=0#
		st=1#
		st2=0#
		sel_piece=""#
		turn="_"#
		ar=[]#
		posz=()#

		pre_pos=""#
		cur_pos=""#

		selp=""#
		ava=[]#
		red_=[]#
		ars=[]#
		ars_=[]#

		moves=[]


		ran2.delete("all")
		ran1.delete("all")
		black_.delete("all")
		white_.delete("all")

		draw_pawn2(0,0,0,white_)
		draw_pawn2(1,0,0,black_)
		draw_pawn2(0,0,0,ran1)
		draw_pawn2(1,-(82.5/2),0,ran2)

		xq,yq=700-350-200,700-350-36.5


		ran2.place(in_=root,x=xq+158.75+(82.5/2),y=215)
		ran1.place(in_=root,x=xq+158.75,y=215)
		black_.place(in_=root,x=xq+279.375,y=215)
		white_.place(in_=root,x=xq+38.125,y=215)

		return



	x=e.x
	y=e.y





	if st==1:

		if x<20:
			pass
		elif x<=(20+82.5):
			x="a"
		elif x<=(20+82.5*2):
			x="b"
		elif x<=(20+82.5*3):
			x="c"
		elif x<=(20+82.5*4):
			x="d"
		elif x<=(20+82.5*5):
			x="e"
		elif x<=(20+82.5*6):
			x="f"
		elif x<=(20+82.5*7):
			x="g"
		elif x<=(20+82.5*8):
			x="h"


		if y<20:
			pass
		elif 20<=y<=(20+82.5):
			y="8"
		elif y<=(20+82.5*2):
			y="7"		
		elif y<=(20+82.5*3):
			y="6"
		elif y<=(20+82.5*4):
			y="5"
		elif y<=(20+82.5*5):
			y="4"
		elif y<=(20+82.5*6):
			y="3"
		elif y<=(20+82.5*7):
			y="2"
		elif y<=(20+82.5*8):
			y="1"
	elif st==0:


		if x<20:
			pass
		elif x<=(20+82.5):
			x="h"
		elif x<=(20+82.5*2):
			x="g"
		elif x<=(20+82.5*3):
			x="f"
		elif x<=(20+82.5*4):
			x="e"
		elif x<=(20+82.5*5):
			x="d"
		elif x<=(20+82.5*6):
			x="c"
		elif x<=(20+82.5*7):
			x="b"
		elif x<=(20+82.5*8):
			x="a"


		if y<20:
			pass
		elif y<=(20+82.5):
			y="1"
		elif y<=(20+82.5*2):
			y="2"		
		elif y<=(20+82.5*3):
			y="3"
		elif y<=(20+82.5*4):
			y="4"
		elif y<=(20+82.5*5):
			y="5"
		elif y<=(20+82.5*6):
			y="6"
		elif y<=(20+82.5*7):
			y="7"
		elif y<=(20+82.5*8):
			y="8"

	def show_pos(ar_):

		for i in ar_:
			
			if i[0]=="_":
				red_.append(i.split("_")[1])
			else:
				ava.append(i)




	pre_pos=""
	cur_pos=""


	try:
		if not timerx=="x": 

			pos=x+y




			if st2==1:



				selp=pos
				ava=[]
				red_=[]

				conc=0
				if check_(user)[0]==1 :

					#dict_[user+"_king"][1]=1
					conc=1
					st2=0

					cona=0

					type_=sel_piece.split("_")[1]
					if type_=="king":

						_m_=""
						_m_=str(dict_[sel_piece][0])

						for a in range(len(ar)):

							if ar[a][0]=="_":
								if ar[a].split("_")[1]==pos:

									for i in dict_:

										p=dict_[i][0]

										if p==pos:
											_m_=""
											_m_=str(dict_[sel_piece][0])
											
											dict_[i][0]="x"

									cona=1
									dict_[sel_piece][0]=pos
									dict_[sel_piece][1]=1
									_m_+=str(pos)

									moves.append(_m_)


									red_=[]
									selp=""



									if check_(user)[0]==0 :
										selp=""
										ava=[]
										red_=[]						

										if turn=="w":
											turn="b"
										elif turn=="b":
											turn="w" 


										if cpu==turn:
											conm=1
											start_time=time.time()

										st2=0
							else:

								if ar[a]==pos:

									
									cona=1
									dict_[sel_piece][0]=pos
									dict_[sel_piece][1]=1

									_m_+=str(pos)
									moves.append(_m_)


									red_=[]
									selp=""



									if check_(user)[0]==0 :
										selp=""
										ava=[]
										red_=[]						

										if turn=="w":
											turn="b"
										elif turn=="b":
											turn="w" 


										if cpu==turn:
											conm=1
											start_time=time.time()

										st2=0		

						if not cona==1:

							ary=val_king(dict_[sel_piece][0],sel_piece.split("_")[0])
							att=check_(user)[1]

							for a in range(len(ary)):
								if ary[a]=="_"+ars_[0]:

									for t in range(len(ar)):

										if ar[t][0]=="_":
											valz=ar[t].split("_")[1]
										else:
											valz=ar[t]

										if pos==valz:

											for i in dict_:
												if dict_[i][0]==pos:
													dict_[i][0]="x"
													dead_opps.append(i)

											dict_[sel_piece][0]=pos
											dict_[sel_piece][1]=1


											_m_+=str(pos)
											moves.append(_m_)

											red_=[]
											selp=""



									if check_(user)[0]==0:
										selp=""
										ava=[]
										red_=[]						

										if turn=="w":
											turn="b"
										elif turn=="b":
											turn="w" 


										if cpu==turn:
											conm=1
											start_time=time.time()

										st2=0		




					else:


						_m_=""
						_m_=str(dict_[sel_piece][0])


						for a in ar:

							con=0
							if a[0]=="_":

								if a.split("_")[1]==pos:

									for i in dict_:
										if dict_[i][0]==pos:
											dict_[i][0]="x"
									dict_[sel_piece][0]=pos	
									con=1
									_m_+=str(pos)
									moves.append(_m_)

							else:
								if a==pos:
									dict_[sel_piece][0]=pos	
									dict_[sel_piece][1]=1
									con=1

									_m_+=str(pos)
									moves.append(_m_)
							if con==1:

								if turn=="w":
									turn="b"
								elif turn=="b":
									turn="w" 


								if cpu==turn:
									conm=1
									start_time=time.time()

								st2=0	



				if conc==0:

					_m_=""
					_m_=str(dict_[sel_piece][0])


					flag=0
					

					typ=sel_piece.split("_")[1]
					col=sel_piece.split("_")[0]

					if turn==col:


						con=0
						for a in ar:
							if a[0]=="_":
								a=a.split("_")[1]
							if a ==pos:

								concastle=0

								if not len(castle)==0:

									for ca in castle:
										if a==ca[:2]:
											concastle=1

											dict_[sel_piece][0]=ca[:2]
											dict_[ca.split("-")[1]][0]=ca[2:][:2]


											dict_[sel_piece][1]=1
											dict_[ca.split("-")[1]][1]=1



											_m_+=str(pos)
											moves.append(_m_)


											castle=""

											if cpu==turn:
												conm=1
												start_time=time.time()

											turn=cpu
											selp=""

										else:
											castle=[]

								if concastle==0:




									con=1

									for i in dict_:
										if dict_[i][0]==pos:
											dict_[i][0]="x"
											dead_opps.append(i)

									tp=sel_piece.split("_")[1]

									if tp=="pawn":
										bv=int(pos[1])

										if cpu=="w":
											user="b"
											var=1
										elif cpu=="b":
											user="w"
											var=8

										if bv==var:
											con_pp=1
											ava=[]






									dict_[sel_piece][0]=pos
									dict_[sel_piece][1]=1



									_c_=0


									red_=[]
									selp=""
									if typ=="pawn":
										dict_[sel_piece][1]=1

										if user=="w":

											if dict_[sel_piece][0][1]=="8":
												_c_=1
												

										elif user=="b":
											if dict_[sel_piece][0][1]=="1":
												_c_=1

									elif typ=="king":
										dict_[sel_piece][1]=1
									elif typ=="rook":
										dict_[sel_piece][1]=1
									
									if turn=="w":
										turn="b"
										vv=dict_["b_king"][0]
									elif turn=="b":
										turn="w" 
										vv=dict_["w_king"][0]

									if not con_pp==1:
										if cpu==turn:
											conm=1
											start_time=time.time()

									selp=""

									st2=0
									#pos=0


									if _c_==0:


										_m_+=str(pos)
										moves.append(_m_)

						if con==0:
							st2=0
						if con2==1:
							con2=0
					else:
						st2=0

				s=check_(user)[0]
				if s==1:
					st2=0
					flag=1




				if check_(user)[0]==0:
					flag=0


				st2=0
			
				if con_pp==1:
					st2=4






			if st2==4:
				xq,yq=700-350-200,700-350-100

				selp=""
				ava=[]
				red_=[]
				if xq+155<=e.x<=xq+245:
					if 412<=e.y<=442:
						
						if not pppval=="":
							cpx=sel_piece.split("_")[0]

							ppx=dict_[sel_piece][0]
							dict_[sel_piece][0]="x"

							npiece=cpx+"_"+pppval+"_"+sel_piece
							dict_[npiece]=[ppx,0]


							p1=ppx[0]

							_t_=pppval[0]

							if pppval[0]=="k":
								_t_="n"

							_m_+=str(pos)

							_m_+=_t_
							moves.append(_m_)

							p_=p1

							_m_=""
							_m_=p_+ppx

							st2=0
							con_pp=0
							pppval=""

							s=check_(cpu)

							if s[0]==1:
								flag=1




							if cpu==turn:
								conm=1
								start_time=time.time()

			
			if st2==0:
				castle=[]
				ar=[]

				if cpu==turn:
					conm=1
					start_time=time.time()
					check_(cpu)
				else:

					selp=pos
					ava=[]
					red_=[]

					sel_piece=""
					for a in dict_:
						if dict_[a][0]==pos:
							sel_piece=a
							col=sel_piece.split("_")[0]
							ps=dict_[sel_piece][0]
							type_=sel_piece.split("_")[1]

		

							
							if col==turn:
								if type_=="king":

									arq=val_king(pos,col)
									ar=[]


									ppos=dict_[sel_piece][0]

									at=[]
									

									for a in range(len(arq)):

										l=0

										if arq[a][0]=="_":
											val=arq[a].split("_")[1]
											l=1

											for i in dict_:
												ps=dict_[i][0]

												if val==ps:
													at.append([i,ps])
													dict_[i][0]="x"

										else:
											val=arq[a]


										dict_[sel_piece][0]=val

										d=check_(user)[0]

										if not d==1:
											ar.append(arq[a])

										for t in at:

											dict_[t[0]][0]=t[1]


									red_=[]

									dict_[sel_piece][0]=ppos



									if check_(user)[0]==0:
										if col=="w":



											v1=check_pwp("f1")[0]
											v2=check_pwp("g1")[0]


											if v1==0 and v2==0:
												if dict_["w_rook_2"][0]=="h1":
													if dict_["w_rook_2"][1]==0:
														if dict_[sel_piece][1]==0:

															dict_[sel_piece][0]="g1"
															if check_(user)[0]==0:
																ar.append("g1")
																castle.append("g1f1-w_rook_2")

															dict_[sel_piece][0]=ppos

											v1=check_pwp("d1")[0]
											v2=check_pwp("c1")[0]
											v3=check_pwp("b1")[0]

											if v1==0 and v2==0 and v3==0:
												if dict_["w_rook_1"][0]=="a1":
													if dict_["w_rook_1"][1]==0:	
														if dict_[sel_piece][1]==0:

															dict_[sel_piece][0]="c1"

															if check_(user)[0]==0:	
																ar.append("c1")		
																castle.append("c1d1-w_rook_1")

															dict_[sel_piece][0]=ppos						


										elif col=="b":

											v1=check_pwp("f8")[0]
											v2=check_pwp("g8")[0]

											if v1==0 and v2==0:
												if dict_["b_rook_2"][0]=="h8":
													if dict_["b_rook_2"][1]==0:
														if dict_[sel_piece][1]==0:

															dict_[sel_piece][0]="g8"

															if check_(user)[0]==0:
																ar.append("g8")
																castle.append("g8f8-b_rook_2")

															dict_[sel_piece][0]=ppos

											v1=check_pwp("d8")[0]
											v2=check_pwp("c8")[0]
											v3=check_pwp("b8")[0]

											if v1==0 and v2==0 and v3==0:
												if dict_["b_rook_1"][0]=="a8":
													if dict_["b_rook_1"][1]==0:	
														if dict_[sel_piece][1]==0:	

															dict_[sel_piece][0]="c8"

															if check_(user)[0]==0:
																ar.append("c8")		
																castle.append("c8d8-b_rook_1")

															dict_[sel_piece][0]=ppos

									show_pos(ar)
									st2=1

								else:

									if not col==cpu:

										if not ps=="x":
											if type_=="king":
												arc=val_king(ps,col)
											elif type_=="knight":
												arc=val_knight(ps,col)
											elif type_=="rook":
												arc=val_rook(ps,col)
											elif type_=="queen":
												arc=val_queen(ps,col)
											elif type_=="bishop":
												arc=val_bishop(ps,col)
											elif type_=="pawn":
												arc=val_pawn(ps,col)

											#print(arc)



											ps=dict_[sel_piece][0]

											for a in arc:
												p=0

												if a[0]=="_":

													p=check_pwp2(a.split("_")[1])
													pp=a.split("_")[1]

													dict_[p][0]="x"
												else:
													pp=a

												dict_[sel_piece][0]=pp

												s=check_(user)[0]

												

												if s==0:
													ar.append(a)


												

												if not p==0:
													dict_[p][0]=pp

												dict_[sel_piece][0]=ps



											red_=[]
											show_pos(ar)



											st2=1



			if st2==3:
				flag=2
			
				selp=""
				ava=[]
				red_=[]

				xq,yq=700-350-200,700-350-36.5




				if e.x>=xq+37 and e.x<=xq+167:
					if e.y>=yq+33 and e.y<=yq+59:
						
						root.quit()




				if e.x>=xq+233 and e.x<=xq+363:
					if e.y>=yq+33 and e.y<=yq+59:



						can2.delete(ss1)
						can2.delete(ss2)
						can2.delete(ss3)
						can2.place(in_=root,x=0,y=0)
						root.geometry("700x700")



						#stockfish.update_engine_parameters({"Skill Level": 30})


						dict_={
								"w_pawn_1":["a2",0],
								"w_pawn_2":["b2",0],
								"w_pawn_3":["c2",0],
								"w_pawn_4":["d2",0],
								"w_pawn_5":["e2",0],
								"w_pawn_6":["f2",0],
								"w_pawn_7":["g2",0],
								"w_pawn_8":["h2",0],

								"w_rook_1":["a1",0],
								"w_bishop_1":["c1",0],
								"w_knight_1":["b1",0],
								"w_queen":["d1",0],
								"w_king":["e1",0],
								"w_knight_2":["g1",0],
								"w_bishop_2":["f1",0],
								"w_rook_2":["h1",0],


								"b_pawn_1":["a7",0],
								"b_pawn_2":["b7",0],
								"b_pawn_3":["c7",0],
								"b_pawn_4":["d7",0],
								"b_pawn_5":["e7",0],
								"b_pawn_6":["f7",0],
								"b_pawn_7":["g7",0],
								"b_pawn_8":["h7",0],

								"b_rook_1":["a8",0],
								"b_bishop_1":["c8",0],
								"b_knight_1":["b8",0],
								"b_queen":["d8",0],
								"b_king":["e8",0],
								"b_knight_2":["g8",0],
								"b_bishop_2":["f8",0],
								"b_rook_2":["h8",0],


								}

						stockfish.set_fen_position("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR/ w KQkq - 0 1")

						sttw=()
						sttb=()
						sttr1=()
						sttr2=()
						sell_=()
						side_=""


						pppval=""#


						stt1=0
						stt2=0

						dead_opps=[]#
						dead_ps=[]#
						killer=""#


						con_pp=0#
						timerx=0#
						opp_p=""
						opp_c=""

						conm=0#
						cpu=""#
						user=""


						flag=0#
						st=1#
						st2=0#
						sel_piece=""#
						turn="_"#
						ar=[]#
						posz=()#

						pre_pos=""#
						cur_pos=""#

						selp=""#
						ava=[]#
						red_=[]#
						ars=[]#
						ars_=[]#

						moves=[]


						ran2.delete("all")
						ran1.delete("all")
						black_.delete("all")
						white_.delete("all")

						draw_pawn2(0,0,0,white_)
						draw_pawn2(1,0,0,black_)
						draw_pawn2(0,0,0,ran1)
						draw_pawn2(1,-(82.5/2),0,ran2)


						ran2.place(in_=root,x=xq+158.75+(82.5/2),y=215)
						ran1.place(in_=root,x=xq+158.75,y=215)
						black_.place(in_=root,x=xq+279.375,y=215)
						white_.place(in_=root,x=xq+38.125,y=215)



		main()
	except:
		pass


def get_pos2(e):
	global user,can2,side_,st, white_,black_,ran1,ran2,cpu,conm,start_time,start_time_,turn,cwd2,difficulty,stockfish,moves

	xq,yq=700-350-200,720-360-100+20-100
	xq+100,440-100


	if e.x>=xq+140 and e.x<=xq+260:
		if e.y>=340 and e.y<=370:




			if not side_=="":
				can2.place_forget()
				white_.place_forget()
				black_.place_forget()
				ran1.place_forget()
				ran2.place_forget()

				if side_=="random":
					aa=random.randint(0,1)
					if aa==0:
						st=0
						cpu="w"
						conm=1
						start_time=time.time()
						turn="w"
						user="b"

						stockfish.set_fen_position("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR/ w KQkq - 0 1")
						moves=[]


					elif aa==1:
						st=1
						cpu="b"
						turn="w"
						user="w"

						stockfish.set_fen_position("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR/ w KQkq - 0 1")
						moves=[]


				if side_=="white":
					st=1
					cpu="b"
					turn="w"
					user="w"

					stockfish.set_fen_position("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR/ w KQkq - 0 1")
					moves=[]
				elif side_=="black":
					st=0
					cpu="w"
					conm=1
					start_time=time.time()
					turn="w"
					user="b"

					stockfish.set_fen_position("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR/ w KQkq - 0 1")
					moves=[]


				can.place_forget()

				root.geometry("740x700")
				

				main()
				




def checkmate_(v):

	global dict_,cpu,user

	zz=1

	for i in dict_:
		col=i.split("_")[0]
		typ=i.split("_")[1]
		pos=dict_[i][0]



		if col==v:
			if not pos=="x":
				ar_=[]
				if typ=="pawn":
					ar_=val_pawn(pos,col)
				elif typ=="bishop":
					ar_=val_bishop(pos,col)
				elif typ=="knight":
					ar_=val_knight(pos,col)
				elif typ=="rook":
					ar_=val_rook(pos,col)
				elif typ=="queen":
					ar_=val_queen(pos,col)
				elif typ=="king":
					ar_=val_king(pos,col)
				
				pp=dict_[i][0]
				pp2=""

				for _ in ar_:

					if _[0]=="_":
						p=_.split("_")[1]

						p_=check_pwp(p)[1]

						#print(p_)

						pp2=dict_[p_][0]

						dict_[p_][0]="x"
						dict_[i][0]=p


						c=check_(v)[0]

						#print(c)

						dict_[p_][0]=pp2
						dict_[i][0]=pos

						if c==0:
							return 0



					else:
						dict_[i][0]=_

						c=check_(v)[0]

						#print(c)

						dict_[i][0]=pos

						if c==0:
							return 0

						






	return zz		



def ava_moves(pos,col,typ):
	ar10=[]
	if not pos=="x":
		if typ=="pawn":
			ar10=val_pawn(pos,col)
		elif typ=="bishop":
			ar10=val_bishop(pos,col)
		elif typ=="knight":
			ar10=val_knight(pos,col)
		elif typ=="rook":
			ar10=val_rook(pos,col)
		elif typ=="queen":
			ar10=val_queen(pos,col)
		elif typ=="king":
			ar10=val_king(pos,col)
	return ar10

def check_pwp(p):
	global dict_

	for i in dict_:
		col=i.split("_")[0]
		type_=i.split("_")[1]
		ps=dict_[i][0]

		if p==ps:
			if col=="w":
				if type_=="pawn":
					return ["P",i]
				if type_=="rook":
					return ["R",i]
				if type_=="knight":
					return ["N",i]
				if type_=="queen":
					return ["Q",i]
				if type_=="bishop":
					return ["B",i]
				if type_=="king":
					return ["K",i]


			elif col=="b":
				if type_=="pawn":
					return ["p",i]
				if type_=="rook":
					return ["r",i]
				if type_=="knight":
					return ["n",i]
				if type_=="queen":
					return ["q",i]
				if type_=="bishop":
					return ["b",i]
				if type_=="king":
					return ["k",i]
	return [0,""]


def check_pwp2(p):
	global dict_

	for i in dict_:
		col=i.split("_")[0]
		type_=i.split("_")[1]
		ps=dict_[i][0]

		if p==ps:
			return i
	return 0
def get_fen_pieces(board):
    """
    Read board and return piece locations in fen format.
    """
    ret = None
    cnt = 0  # counter for successive empty cell along the row
    save = []  # temp container
    
    board = board[::-1]  # reverse first

    for i, v in enumerate(board):
        if v == ' ':
            cnt += 1
            
            # sum up the successive empty cell and update save
            if cnt > 1:
                save[len(save)-1] = str(cnt)
            else:
                save.append(str(cnt))  # add
        else:
            save.append(v)  # add
            cnt = 0  # reset, there is no successive number

        if (i+1)%8 == 0:  # end of row
            save.append('/')
            cnt = 0
            
        ret = ''.join(save)  # convert list to string

    retn=""
    ar=ret.split("/")

    for i in ar:
        if not i=="":

            v=len(i)
            c=1
            for q in range(v):
                retn+=i[-c]
                c+=1

            retn+="/"



    
    return retn

def best_move():
	global user,cpu,can,st2,turn,dict_,side_,red_,flag,timerx,dead_ps,pre_pos,cur_pos,selp,conm,stockfish,moves

	"""
	board=[]
	y_=1
	for y in range(8):
		ll=["a","b","c","d","e","f","g","h"]

		for x in range(8):

			val=check_pwp(ll[x]+str(y_))[0]

			if val==0 or val=="x":
				board.append(' ')

			else:
				board.append(val)
		y_+=1


	board_pieces = get_fen_pieces(board)
	board_pieces+=" "+cpu+" KQkq - 0 1"

	"""


	if len(moves)>0:
		stockfish.set_position(moves)







	
	res=stockfish.get_best_move()

	moves.append(str(res))

	
	
	"""
	except:
		c=0
		

		for _ in range(8):
			a=[]
			for __ in range(8):

				a.append(board[c])
				c+=1


			print(a)

		print("\n"+str(board_pieces))"""


	#print(res)

	pre_pos=res[:2]
	cur_pos=res[2:][:2]

	def check_castle(res):
		global dict_

		c=0
		c2=""

		for i in dict_:
			col=i.split("_")[0]
			typ=i.split("_")[1]
			pos=dict_[i][0]

			if pos==pre_pos:
				if typ=="king":
					c=1

					if cur_pos[0]=="c":
						c2="long"
					elif cur_pos[0]=="g":
						c2="short"


		return [c,c2]



	for i in dict_:

		col=i.split("_")[0]
		type_=i.split("_")[1]
		ps=dict_[i][0]

		if ps==cur_pos:
			dict_[i][0]="x"



	an=[]

	cc=0

	if check_castle(res)[0]==1:
		cc=1
		c2=check_castle(res)[1]


	if len(res)==5:



		for i in dict_:

			col=i.split("_")[0]
			type_=i.split("_")[1]
			ps=dict_[i][0]

			if ps==pre_pos:
				if type_=="pawn":

					dict_[i][0]="x"

					piece=i

		if res[-1]=="q":
			typ2="queen"
		elif res[-1]=="b":
			typ2="bishop"
		elif res[-1]=="n":
			typ2="knight"
		elif res[-1]=="r":
			typ2="rook"



		dict_[piece.split("_")[0]+"_"+typ2+"_"+piece.split("_")[-1]]=[cur_pos,1]




	else:



		for i in dict_:

			col=i.split("_")[0]
			type_=i.split("_")[1]
			ps=dict_[i][0]

			if ps==pre_pos:

				if cpu=="w":
					b="e1"
				elif cpu=="b":
					b="e8"




				if cc==1 and dict_[cpu+"_king"]==b:
					
					if col=="w":
						if c2=="long":
							dict_["w_rook_1"][0]="d1"
						elif c2=="short":
							dict_["w_rook_2"][0]="f1"
					
					elif col=="b":

						if c2=="long":
							dict_["b_rook_1"][0]="d8"
						elif c2=="short":
							dict_["b_rook_2"][0]="f8"
					


				dict_[i][0]=cur_pos








	if turn=="w":
		turn="b"
	elif turn=="b":
		turn="w"

	red_=[]



	if check_(user)[0]==1 or check_(cpu)[0]==1:
		flag=1
		st2=0

		s_=checkmate_(user)

		if s_==1:
			flag=2
			st2=3
	else:
		st2=0

	conm=0

	
	main()



def __move():
	global user,cpu,conm,start_time,st2,turn,flag,killer


	vart=0.2


	con__=0

	if conm==1:



		if check_(cpu)[0]==1:
			flag=1
		if checkmate_(user)==1 or checkmate_(cpu)==1:
			st2=3
			flag=2
			main()
			return





		if time.time()>start_time+vart:


			best_move()
			conm=0


			if check_(cpu)[0]==1 or check_(user)[0]==1:

				flag=1
				s_=checkmate_(user)

				if s_==0:
					st2=0

				else:
					killer=check_(user)[1].split("_")[0]

					flag=2
					
					st2=3

				

			else:
				flag=0
		main()


	root.after(1,__move)





def check_turn():

	global turn,stx,timerx,time1,can3,can4,time2


	if not timerx=="x":
		if not turn=="_":

			if not turn==cpu:
				stx=1
			elif turn==cpu:
				stx=0
			



				


	root.after(1,check_turn)






root=t.Tk()
xx=int((int(root.winfo_screenwidth())-740)/2)
root.geometry("700x700+"+str(xx)+"+0")
root.resizable(0,0)
root.title("hchess")
root.iconbitmap(r"icon.ico")
root["bg"]="#b80f0a"
root.wm_attributes("-transparentcolor","violet")

can=t.Canvas(width=740,height=700,bg="violet",relief="flat",highlightthickness=0,border=0)
can.place(in_=root,x=0,y=0)
can.bind("<Button-1>",get_pos)



stt1=0
stt2=0

dead_opps=[]
dead_ps=[]
killer=""


con_pp=0
timerx=0
opp_p=""
opp_c=""

start_time=""
start_time_=""
conm=0
cpu=""
user=""


flag=0
st=1
st2=0
sel_piece=""
turn="_"
ar=[]
posz=()

pre_pos=""
cur_pos=""

selp=""
ava=[]
red_=[]
ars=[]
ars_=[]




sttw=()
sttb=()
sttr1=()
sttr2=()
sell_=()
side_=""

con1=3
time_1=300
time_1_l="5:00"
time_2=300
time_2_l="5:00"
time1=()
pppval=""

castle=""


moves=[]




al=["a","b","c","d","e","f","g","h"]



dict_={
		"w_pawn_1":["a2",0],
		"w_pawn_2":["b2",0],
		"w_pawn_3":["c2",0],
		"w_pawn_4":["d2",0],
		"w_pawn_5":["e2",0],
		"w_pawn_6":["f2",0],
		"w_pawn_7":["g2",0],
		"w_pawn_8":["h2",0],

		"w_rook_1":["a1",0],
		"w_bishop_1":["c1",0],
		"w_knight_1":["b1",0],
		"w_queen":["d1",0],
		"w_king":["e1",0],
		"w_knight_2":["g1",0],
		"w_bishop_2":["f1",0],
		"w_rook_2":["h1",0],


		"b_pawn_1":["a7",0],
		"b_pawn_2":["b7",0],
		"b_pawn_3":["c7",0],
		"b_pawn_4":["d7",0],
		"b_pawn_5":["e7",0],
		"b_pawn_6":["f7",0],
		"b_pawn_7":["g7",0],
		"b_pawn_8":["h7",0],

		"b_rook_1":["a8",0],
		"b_bishop_1":["c8",0],
		"b_knight_1":["b8",0],
		"b_queen":["d8",0],
		"b_king":["e8",0],
		"b_knight_2":["g8",0],
		"b_bishop_2":["f8",0],
		"b_rook_2":["h8",0],


		}





ss1=0
ss2=0
ss3=0
can2=t.Canvas(width=700,height=700,bg="#7f007f",relief="flat",highlightthickness=0,border=0)
can2.place(in_=root,x=0,y=0)
can2.bind("<Button-1>",get_pos2,)




cal="#B1E4B9"


can2.create_rectangle(0,0,700,700,fill="#70A2A3",outline="#70A2A3")
can2.create_rectangle(20,20,680,680,fill="#70A2A3",outline="#70A2A3")


can2.create_rectangle(0,0,20,700,fill="#222222",outline="#222222")
can2.create_rectangle(700-20,0,700,700,fill="#222222",outline="#222222")
can2.create_rectangle(0,0,700,20,fill="#222222",outline="#222222")
can2.create_rectangle(0,700-20,700,700,fill="#222222",outline="#222222")

x_1=20
x_2=20+82.5
y_=20

x__=61.25
y__=61.25

al=["a","b","c","d","e","f","g","h"]
for x in range(8):
	can2.create_text(x__,10,text=al[x],fill=cal,font=("FreeMono","13"))
	can2.create_text(x__,690,text=al[x],fill=cal,font=("FreeMono","13"))
	x__+=82.5
nm=8
for y in range(8):
	if st==1:
		can2.create_text(10,y__,text=str(nm),fill=cal,font=("FreeMono","13") )
		can2.create_text(690,y__,text=str(nm),fill=cal,font=("FreeMono","13") )

		nm-=1
	elif st==0:
		can2.create_text(10,y__,text=str(y+1),fill=cal,font=("FreeMono","13") )
		can2.create_text(690,y__,text=str(y+1),fill=cal,font=("FreeMono","13") )

	y__+=82.5


st=0
for y in range(8):
	if st==0:
		x_=x_1
	else:
		x_=x_2

	for x in range(4):
		can2.create_rectangle(x_,y_,x_+82.5,y_+82.5,fill="#B1E4B9",outline="#B1E4B9")

		x_+=82.5*2

	if st==0:
		st=1
	elif st==1:
		st=0

	y_+=82.5



can2.create_line(20,20, 680,20, 680,680, 20,680, 20,20,fill="#B1E4B9")






xq,yq=700-350-200,720-360-100+20-100






can2.create_oval(xq,yq,xq+20,yq+20,fill="#ffffff",outline="#ffffff")
can2.create_oval(xq+400,yq+20,xq-20+400,yq,fill="#ffffff",outline="#ffffff")

can2.create_oval(xq,yq+200, xq+20,yq+200-20,fill="#ffffff",outline="#ffffff")

can2.create_oval(xq+400,yq+200,  xq+400-20,yq+200-20,fill="#ffffff",outline="#ffffff")

can2.create_polygon(xq+10,yq, xq+400-10,yq, xq+400,yq+10, xq+400,yq+200-10,
	xq+400-10,yq+200, xq+10,yq+200, xq,yq+200-10, xq,yq+10,fill="#ffffff",outline="#ffffff")




can2.create_text(xq+200,yq+16,text="Choose Side",font=("FreeMono","14",),fill="#333333")


can2.create_text(xq+79.375,409+5-100-7,text="White",fill="#333333",font=("FreeMono","13",))
can2.create_text(xq+200,409+5-100-7,text="Random",fill="#333333",font=("FreeMono","13",))
can2.create_text(xq+320.625,409+5-100-7,text="Black",fill="#333333",font=("FreeMono","13",))

ll=120
can2.create_oval(xq+200-(ll/2),440-100, xq+200-(ll/2)+30,440+30-100,fill="#333333",outline="#333333")
can2.create_oval(xq+200+(ll/2),440-100, xq+200+(ll/2)-30,440+30-100,fill="#333333",outline="#333333")
can2.create_rectangle(xq+200-(ll/2)+15,440-100,  xq+200+(ll/2)-30+15,440+30-100,fill="#333333",outline="#333333")

can2.create_text(xq+200,440+15-100,text="PLAY",font=("FreeMono","11",),fill="#ffffff")

def swhite(e):
	global can,black_,white_,ran1,ran2,side_,ss1,ss2,ss3

	can2.delete(ss1)
	can2.delete(ss2)
	can2.delete(ss3)


	ss1=can2.create_oval(188.125,215+82.5+20,188.125+5,215+82.5+20+5,outline="#323232",fill="#323232")
	ss2=can2.create_rectangle(188.125+2.5,215+82.5+20, 188.125+82.5-2.5,215+82.5+20+5, outline="#323232",fill="#323232",width=1)
	ss3=can2.create_oval(188.125+82.5-5,215+82.5+20, 188.125+82.5,215+82.5+20+5,outline="#323232",fill="#323232")

	side_="white"

def sblack(e):
	global can,black_,white_,ran1,ran2,side_,ss1,ss2,ss3


	
	can2.delete(ss1)
	can2.delete(ss2)
	can2.delete(ss3)

	ss1=can2.create_oval(429.375,215+82.5+20, 429.375+5,215+82.5+20+5,outline="#323232",fill="#323232")
	ss2=can2.create_rectangle(429.375+2.5,215+82.5+20, 429.375+82.5-2.5,215+82.5+20+5, outline="#323232",fill="#323232",width=1)
	ss3=can2.create_oval(429.375+82.5-5,215+82.5+20,429.375+82.5,215+82.5+20+5,outline="#323232",fill="#323232")


	side_="black"



def rann(e):
	global can,black_,white_,ran1,ran2,side_,ss1,ss2,ss3


	can2.delete(ss1)
	can2.delete(ss2)
	can2.delete(ss3)

	ss1=can2.create_oval(308.75,215+82.5+20, 308.75+5,215+82.5+20+5,outline="#323232",fill="#323232")
	ss2=can2.create_rectangle(308.75+2.5,215+82.5+20, 308.75+82.5-2.5,215+82.5+20+5, outline="#323232",fill="#323232",width=1)
	ss3=can2.create_oval(308.75+82.5-5,215+82.5+20,308.75+82.5,215+82.5+20+5,outline="#323232",fill="#323232")


	side_="random"




white_=t.Canvas(width=82.5,height=82.5,bg="#ffffff",relief="flat",highlightthickness=0,border=0)
white_.place(in_=root,x=xq+38.125,y=215)
white_.bind("<Button-1>",swhite)



black_=t.Canvas(width=82.5,height=82.5,bg="#ffffff",relief="flat",highlightthickness=0,border=0)
black_.place(in_=root,x=xq+279.375,y=215)
black_.bind("<Button-1>",sblack)



draw_pawn2(0,0,0,white_)
draw_pawn2(1,0,0,black_)


ran1=t.Canvas(width=(82.5/2),height=82.5,bg="#ffffff",relief="flat",highlightthickness=0,border=0)
ran1.place(in_=root,x=xq+158.75,y=215)
ran1.bind("<Button-1>",rann)



ran2=t.Canvas(width=(82.5/2),height=82.5,bg="#ffffff",relief="flat",highlightthickness=0,border=0)
ran2.place(in_=root,x=xq+158.75+(82.5/2),y=215)
ran2.bind("<Button-1>",rann)



draw_pawn2(0,0,0,ran1)
draw_pawn2(1,-(82.5/2),0,ran2)













stx=0


def selpqueen(e):
	global pppval
	

	pppval="queen"
	main()
def selprook(e):
	global pppval
	
	pppval="rook"
	main()
def selpknight(e):
	global pppval
	
	pppval="knight"
	main()
def selpbishop(e):
	global pppval
	
	pppval="bishop"
	main()






pqueen=t.Canvas(width=82.5,height=82.5,relief="flat",highlightthickness=0,border=0)
pqueen.bind("<Button-1>",selpqueen)
prook=t.Canvas(width=82.5,height=82.5,relief="flat",highlightthickness=0,border=0)		
prook.bind("<Button-1>",selprook)
pknight=t.Canvas(width=82.5,height=82.5,relief="flat",highlightthickness=0,border=0)
pknight.bind("<Button-1>",selpknight)
pbishop=t.Canvas(width=82.5,height=82.5,relief="flat",highlightthickness=0,border=0)
pbishop.bind("<Button-1>",selpbishop)




time2=()


check_turn()



__move()



qu=()

con2=0
root.mainloop()
