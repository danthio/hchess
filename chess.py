import tkinter as t 
import random


def valid1(x,y):

	if x=="a":
		x=82.5
	elif x=="b":
		x=82.5*2
	elif x=="c":
		x=82.5*3
	elif x=="d":
		x=82.5*4
	elif x=="e":
		x=82.5*5
	elif x=="f":
		x=82.5*6	
	elif x=="g":
		x=82.5*7
	elif x=="h":
		x=82.5*8

	if st==1:

		if y=="8":
			y=82.5
		elif y=="7":
			y=82.5*2
		elif y=="6":
			y=82.5*3
		elif y=="5":
			y=82.5*4
		elif y=="4":
			y=82.5*5
		elif y=="3":
			y=82.5*6
		elif y=="2":
			y=82.5*7
		elif y=="1":
			y=82.5*8
	elif st==0:

		if y=="1":
			y=82.5
		elif y=="2":
			y=82.5*2
		elif y=="3":
			y=82.5*3
		elif y=="4":
			y=82.5*4
		elif y=="5":
			y=82.5*5
		elif y=="6":
			y=82.5*6
		elif y=="7":
			y=82.5*7
		elif y=="8":
			y=82.5*8


	x=x+20
	y=y+20
	sz=82.5
	return (x,y,sz)

def draw_pawn(col,pos):
	global can,st

	x,y=pos[0],pos[1]
	arr=valid1(x,y)

	x=arr[0]
	y=arr[1]
	sz=arr[2]



	x1=x-sz
	x2=x
	y1=y-sz
	y2=y


	if col==0:
		col="#ffffff"
		col2="#111111"
	elif col==1:
		col="#111111"
		col2="#ffffff"


	can.create_oval(x1+(sz/2)-10,y1+5, x2-(sz/2)+10,y1+25 ,fill=col,outline=col2,width=1 )
	can.create_oval(x1+(sz/2)-15,y1+25-3, x2-(sz/2)+15,y1+55-3 ,fill=col,outline=col2,width=1 )
	can.create_arc(x1+(sz/2)-25,y1+55-6, x2-(sz/2)+25,y1+105-6,start=0,extent=180,fill=col,outline=col2,width=1 )


	can.create_oval(x1+(sz/2)-10+6,y1+5+13, x2-(sz/2)+10-6,y1+25-12+13 ,fill=col,outline=col,width=1 )

	can.create_oval(x1+(sz/2)-10+5,y1+5+39, x2-(sz/2)+10-5,y1+25-8+39 ,fill=col,outline=col,width=1 )
	
def draw_rook(col,pos):
	global can,st

	x,y=pos[0],pos[1]
	arr=valid1(x,y)

	x=arr[0]
	y=arr[1]
	sz=arr[2]



	x1=x-sz
	x2=x
	y1=y-sz
	y2=y


	if col==0:
		col="#ffffff"
		col2="#111111"
	elif col==1:
		col="#111111"
		col2="#ffffff"


	can.create_polygon(x1+(sz/2),y1+5,x1+(sz/2)-7,y1+5, x1+(sz/2)-7,y1+5+5, x1+(sz/2)-7-14+5,y1+5+5,
	 x1+(sz/2)-7-14+5,y1+5,  x1+(sz/2)-7-14-14+5,y1+5, x1+(sz/2)-7-14-14+5,y1+5+10, x2-(sz/2)+7+14+14-5,y1+5+10,
	 x2-(sz/2)+7+14+14-5,y1+5,x2-(sz/2)+7+14-5,y1+5,x2-(sz/2)+7+14-5,y1+5+5,x2-(sz/2)+7,y1+5+5,x2-(sz/2)+7,y1+5,
	 x1+(sz/2),y1+5,fill=col,outline=col2)


	can.create_polygon(x1+(sz/2)-7-14-14+5,y1+5+10, x1+(sz/2)-7-14-14+5+5+2,y1+5+10+5+3,
		x2-(sz/2)+7+14+14-5-5-2,y1+5+10+5+3,x2-(sz/2)+7+14+14-5,y1+5+10, fill=col,outline=col2)



	can.create_rectangle(x1+(sz/2)-7-14-10+5+2,y1+5+10+5+3, x2-(sz/2)+7+14+10-5-2,y2-5-5-5-5-3,fill=col,outline=col2)


	can.create_polygon(x1+(sz/2)-7-14-14+5,y2-5-5-5, x1+(sz/2)-7-14-14+5+5+2,y2-5-5-5-5-3,
		x2-(sz/2)+7+14+10-5-2,y2-5-5-5-5-3, x2-(sz/2)+7+14+14-5,y2-5-5-5 ,fill=col,outline=col2)

	can.create_polygon(x2-(sz/2)+7+14+10,y2-5-5-5, x2-(sz/2)+7+14+10,y2-5-5,
		x1+(sz/2)-7-14-10,y2-5-5,x1+(sz/2)-7-14-10,y2-5-5-5,x2-(sz/2)+7+14+10,y2-5-5-5,fill=col,outline=col2)


	can.create_polygon(x1+(sz/2)-7-14-14,y2-5, x1+(sz/2)-7-14-14-3+3,y2-5-5,
		x2-(sz/2)+7+14+14,y2-5-5, x2-(sz/2)+7+14+14,y2-5,x1+(sz/2)-7-14-14,y2-5,fill=col,outline=col2)

def draw_king(col,pos):
	global can,st

	x,y=pos[0],pos[1]
	arr=valid1(x,y)

	x=arr[0]
	y=arr[1]
	sz=arr[2]



	x1=x-sz
	x2=x
	y1=y-sz
	y2=y


	if col==0:
		col="#ffffff"
		col2="#111111"
	elif col==1:
		col="#111111"
		col2="#ffffff"


	ar1=[x1+14.696356275303643, y1+72.47975708502024, x1+14.696356275303643, y1+70.80971659919028, x1+15.030364372469636, y1+68.47165991902834, x1+15.030364372469636, y1+66.46761133603239, x1+15.030364372469636, y1+64.79757085020243, x1+15.030364372469636, y1+62.45951417004049, x1+15.030364372469636, y1+60.121457489878544, x1+14.696356275303643, y1+58.78542510121457, x1+14.696356275303643, y1+56.78137651821862, x1+14.362348178137653, y1+55.111336032388664, x1+12.3582995951417, y1+51.77125506072875, x1+11.022267206477734, y1+49.7672064777328, x1+8.68421052631579, y1+46.76113360323887, x1+6.012145748987853, y1+43.08704453441296, x1+5.010121457489879, y1+41.082995951417004, x1+3.6740890688259107, y1+39.07894736842105, x1+3.340080971659919, y1+37.074898785425106, x1+3.340080971659919, y1+33.40080971659919, x1+4.008097165991903, y1+31.062753036437247, x1+5.010121457489879, y1+28.724696356275306, x1+6.012145748987853, y1+27.38866396761134, x1+6.680161943319838, y1+26.38663967611336, x1+7.682186234817814, y1+25.384615384615387, x1+9.352226720647772, y1+24.38259109311741, x1+11.022267206477734, y1+23.714574898785425, x1+14.02834008097166, y1+23.046558704453442, x1+16.700404858299596, y1+23.046558704453442, x1+19.37246963562753, y1+23.380566801619434, x1+22.044534412955468, y1+24.048582995951413, x1+24.048582995951413, y1+24.7165991902834, x1+27.722672064777328, y1+26.720647773279353, x1+31.062753036437247, y1+29.392712550607285, x1+34.068825910931174, y1+32.064777327935225, x1+36.406882591093115, y1+34.73684210526316, x1+38.41093117408907, y1+38.07692307692308, x1+40.08097165991903, y1+41.417004048582996, x1+41.417004048582996, y1+46.093117408906885, x1+41.417004048582996, y1+46.093117408906885, x1+41.417004048582996, y1+48.09716599190283, x1+41.417004048582996, y1+50.769230769230774, x1+41.417004048582996, y1+50.769230769230774, x1+41.417004048582996, y1+45.425101214574894, x1+41.417004048582996, y1+45.425101214574894, x1+42.75303643724696, y1+41.417004048582996, x1+44.089068825910935, y1+38.41093117408907, x1+45.75910931174089, y1+35.40485829959514, x1+48.09716599190283, y1+32.73279352226721, x1+50.435222672064775, y1+30.060728744939272, x1+53.441295546558706, y1+27.722672064777328, x1+56.11336032388664, y1+26.052631578947366, x1+59.787449392712546, y1+24.38259109311741, x1+63.79554655870445, y1+23.046558704453442, x1+67.80364372469636, y1+23.046558704453442, x1+71.47773279352226, y1+24.048582995951413, x1+73.48178137651821, y1+24.7165991902834, x1+75.81983805668017, y1+27.054655870445345, x1+77.15587044534414, y1+28.724696356275306, x1+78.4919028340081, y1+32.39878542510122, x1+78.82591093117409, y1+35.73886639676113, x1+78.1578947368421, y1+39.07894736842105, x1+78.1578947368421, y1+39.07894736842105, x1+75.81983805668017, y1+43.421052631578945, x1+72.81376518218623, y1+47.76315789473684, x1+72.81376518218623, y1+47.76315789473684, x1+69.8076923076923, y1+51.77125506072875, x1+68.13765182186235, y1+54.77732793522268, x1+67.80364372469636, y1+55.779352226720654, x1+67.46963562753037, y1+58.45141700404859, x1+67.13562753036437, y1+62.125506072874494, x1+67.13562753036437, y1+65.79959514170041, x1+67.46963562753037, y1+68.47165991902834, x1+67.80364372469636, y1+71.81174089068826, x1+66.46761133603239, y1+72.81376518218623, x1+63.12753036437247, y1+74.14979757085021, x1+58.78542510121457, y1+75.48582995951416, x1+54.10931174089069, y1+76.48785425101214, x1+49.4331983805668, y1+76.82186234817814, x1+49.4331983805668, y1+76.82186234817814, x1+43.75506072874494, y1+77.15587044534414, x1+36.072874493927124, y1+77.15587044534414, x1+29.72672064777328, y1+76.82186234817814, x1+24.38259109311741, y1+75.81983805668017, x1+20.708502024291498, y1+74.81781376518218, x1+17.36842105263158, y1+73.48178137651821, x1+14.696356275303643, y1+72.81376518218623, x1+14.696356275303643, y1+72.81376518218623]
	ar2=[x1+14.696356275303643, y1+72.47975708502024, x1+16.366396761133604, y1+70.80971659919028, x1+18.370445344129553, y1+69.47368421052632, x1+20.374493927125506, y1+68.13765182186235, x1+23.714574898785425, y1+66.80161943319838, x1+26.720647773279353, y1+66.1336032388664, x1+31.062753036437247, y1+65.13157894736842, x1+35.73886639676113, y1+64.79757085020243, x1+43.421052631578945, y1+64.46356275303644, x1+49.4331983805668, y1+65.13157894736842, x1+54.44331983805668, y1+65.79959514170041, x1+59.11943319838056, y1+67.13562753036437, x1+62.45951417004049, y1+68.13765182186235, x1+64.79757085020243, y1+69.47368421052632, x1+66.46761133603239, y1+70.47570850202429, x1+68.13765182186235, y1+71.81174089068826]
	ar3=[x1+15.364372469635628, y1+64.12955465587045, x1+18.704453441295545, y1+62.45951417004049, x1+23.380566801619434, y1+61.12348178137652, x1+27.722672064777328, y1+60.121457489878544, x1+33.73481781376518, y1+59.45344129554656, x1+38.74493927125506, y1+59.11943319838056, x1+42.41902834008097, y1+58.78542510121457, x1+48.431174089068826, y1+59.11943319838056, x1+54.10931174089069, y1+60.121457489878544, x1+58.45141700404859, y1+61.12348178137652, x1+63.79554655870445, y1+62.45951417004049, x1+63.79554655870445, y1+62.45951417004049, x1+67.13562753036437, y1+64.12955465587045]
	ar4=[x1+14.02834008097166, y1+54.10931174089069, x1+19.03846153846154, y1+52.77327935222672, x1+25.384615384615387, y1+51.77125506072875, x1+29.72672064777328, y1+51.43724696356275, x1+36.406882591093115, y1+50.769230769230774, x1+36.406882591093115, y1+50.769230769230774, x1+40.08097165991903, y1+50.769230769230774, x1+42.085020242914986, y1+50.769230769230774, x1+46.093117408906885, y1+50.769230769230774, x1+52.77327935222672, y1+51.10323886639676, x1+55.779352226720654, y1+51.43724696356275, x1+58.45141700404859, y1+51.77125506072875, x1+62.79352226720648, y1+52.77327935222672, x1+65.79959514170041, y1+53.7753036437247, x1+68.13765182186235, y1+55.111336032388664]
	ar5=[x1+41.417004048582996, y1+46.093117408906885, x1+39.412955465587046, y1+40.41497975708502, x1+37.40890688259109, y1+36.406882591093115, x1+34.402834008097166, y1+32.064777327935225, x1+33.73481781376518, y1+30.39473684210526, x1+33.0668016194332, y1+26.052631578947366, x1+33.40080971659919, y1+22.044534412955468, x1+34.73684210526316, y1+19.37246963562753, x1+36.072874493927124, y1+17.70242914979757, x1+38.07692307692308, y1+16.032388663967613, x1+40.74898785425101, y1+15.364372469635628, x1+42.41902834008097, y1+15.364372469635628, x1+44.42307692307692, y1+16.366396761133604, x1+47.09514170040485, y1+18.370445344129553, x1+48.09716599190283, y1+20.708502024291498, x1+49.09919028340081, y1+24.38259109311741, x1+49.09919028340081, y1+27.38866396761134, x1+48.431174089068826, y1+29.72672064777328, x1+47.76315789473684, y1+32.73279352226721, x1+46.427125506072876, y1+34.73684210526316, x1+45.425101214574894, y1+36.072874493927124, x1+44.089068825910935, y1+38.74493927125506, x1+42.75303643724696, y1+41.082995951417004, x1+41.75101214574899, y1+44.42307692307692, x1+41.417004048582996, y1+45.75910931174089]
	ar6=[x1+40.08097165991903, y1+15.364372469635628, x1+40.08097165991903, y1+9.352226720647772, x1+34.402834008097166+1, y1+9.352226720647772, x1+34.402834008097166+1, y1+6.680161943319838, x1+40.08097165991903, y1+6.680161943319838, x1+40.08097165991903, y1+3.0060728744939267, x1+42.75303643724696, y1+3.0060728744939267, x1+42.75303643724696, y1+6.680161943319838, x1+47.76315789473684, y1+6.680161943319838, x1+47.76315789473684, y1+9.352226720647772, x1+42.75303643724696, y1+9.352226720647772, x1+42.75303643724696, y1+15.364372469635628]

	can.create_polygon(ar1,fill=col,outline=col2)
	can.create_line(ar2,fill=col2)
	can.create_line(ar3,fill=col2)
	can.create_line(ar4,fill=col2)
	can.create_polygon(ar5,fill=col,outline=col2)
	can.create_polygon(ar6,fill=col,outline=col2)

def draw_bishop(col,pos):
	global can,st

	x,y=pos[0],pos[1]
	arr=valid1(x,y)

	x=arr[0]
	y=arr[1]
	sz=arr[2]



	x1=x-sz
	x2=x
	y1=y-sz
	y2=y


	if col==0:
		col="#ffffff"
		col2="#111111"
	elif col==1:
		col="#111111"
		col2="#ffffff"


	ar1=[x1+9.825842696629215, y1+80.46067415730337, x1+9.45505617977528, y1+80.2752808988764, x1+9.269662921348313, y1+80.08988764044943, x1+9.084269662921349, y1+79.90449438202248, x1+8.713483146067416, y1+79.71910112359551, x1+8.52808988764045, y1+79.53370786516854, x1+8.342696629213483, y1+79.34831460674157, x1+8.157303370786517, y1+79.1629213483146, x1+7.97191011235955, y1+78.97752808988764, x1+7.786516853932585, y1+78.79213483146067, x1+7.601123595505618, y1+78.60674157303372, x1+7.415730337078651, y1+78.42134831460675, x1+7.230337078651686, y1+78.23595505617978, x1+7.044943820224719, y1+78.0505617977528, x1+6.859550561797754, y1+77.86516853932584, x1+6.674157303370786, y1+77.67977528089888, x1+6.48876404494382, y1+77.49438202247191, x1+6.303370786516854, y1+77.30898876404494, x1+6.117977528089888, y1+77.12359550561798, x1+5.932584269662922, y1+76.938202247191, x1+5.747191011235954, y1+76.75280898876404, x1+5.561797752808989, y1+76.56741573033707, x1+5.376404494382022, y1+76.38202247191012, x1+5.191011235955057, y1+76.19662921348315, x1+5.00561797752809, y1+76.01123595505618, x1+4.820224719101124, y1+75.82584269662922, x1+4.634831460674157, y1+75.64044943820224, x1+4.449438202247191, y1+75.45505617977528, x1+4.264044943820225, y1+75.26966292134831, x1+4.078651685393258, y1+75.08426966292134, x1+3.8932584269662924, y1+74.89887640449439, x1+3.7078651685393256, y1+74.71348314606742, x1+3.7078651685393256, y1+74.52808988764045, x1+3.5224719101123596, y1+74.34269662921348, x1+3.337078651685393, y1+74.15730337078651, x1+3.151685393258427, y1+73.97191011235955, x1+3.151685393258427, y1+73.78651685393258, x1+3.151685393258427, y1+73.60112359550563, x1+3.151685393258427, y1+73.41573033707866, x1+3.337078651685393, y1+73.23033707865169, x1+3.337078651685393, y1+73.04494382022472, x1+3.5224719101123596, y1+72.85955056179775, x1+3.5224719101123596, y1+72.67415730337079, x1+3.7078651685393256, y1+72.48876404494382, x1+3.8932584269662924, y1+72.30337078651685, x1+4.078651685393258, y1+72.1179775280899, x1+4.264044943820225, y1+71.93258426966291, x1+4.634831460674157, y1+71.74719101123596, x1+4.820224719101124, y1+71.56179775280899, x1+5.00561797752809, y1+71.37640449438203, x1+5.191011235955057, y1+71.19101123595506, x1+5.376404494382022, y1+71.00561797752809, x1+5.747191011235954, y1+70.82022471910113, x1+5.932584269662922, y1+70.63483146067415, x1+6.303370786516854, y1+70.4494382022472, x1+6.48876404494382, y1+70.26404494382022, x1+6.674157303370786, y1+70.07865168539325, x1+7.044943820224719, y1+69.8932584269663, x1+7.230337078651686, y1+69.70786516853933, x1+7.601123595505618, y1+69.52247191011236, x1+7.97191011235955, y1+69.33707865168539, x1+8.157303370786517, y1+69.15168539325843, x1+8.52808988764045, y1+68.96629213483146, x1+8.898876404494382, y1+68.78089887640449, x1+9.269662921348313, y1+68.59550561797754, x1+9.640449438202248, y1+68.41011235955057, x1+10.01123595505618, y1+68.2247191011236, x1+10.382022471910114, y1+68.03932584269663, x1+10.938202247191013, y1+67.85393258426966, x1+11.308988764044944, y1+67.6685393258427, x1+11.865168539325843, y1+67.48314606741573, x1+12.235955056179776, y1+67.29775280898876, x1+12.792134831460675, y1+67.1123595505618, x1+13.348314606741573, y1+66.92696629213482, x1+14.089887640449438, y1+66.74157303370787, x1+14.831460674157302, y1+66.5561797752809, x1+15.57303370786517, y1+66.37078651685394, x1+16.314606741573034, y1+66.18539325842697, x1+17.6123595505618, y1+66.0, x1+20.02247191011236, y1+65.81460674157303, x1+31.331460674157302, y1+65.62921348314606, x1+32.258426966292134, y1+65.4438202247191, x1+33.0, y1+65.25842696629213, x1+33.5561797752809, y1+65.07303370786516, x1+34.1123595505618, y1+64.88764044943821, x1+34.48314606741573, y1+64.70224719101124, x1+34.853932584269664, y1+64.51685393258427, x1+35.2247191011236, y1+64.3314606741573, x1+35.41011235955057, y1+64.14606741573034, x1+35.59550561797753, y1+63.96067415730337, x1+34.853932584269664, y1+63.7752808988764, x1+34.1123595505618, y1+63.58988764044944, x1+33.37078651685393, y1+63.40449438202247, x1+32.62921348314607, y1+63.2191011235955, x1+32.07303370786517, y1+63.03370786516854, x1+31.51685393258427, y1+62.848314606741575, x1+30.96067415730337, y1+62.662921348314605, x1+30.40449438202247, y1+62.47752808988764, x1+29.84831460674157, y1+62.29213483146068, x1+29.292134831460675, y1+62.1067415730337, x1+28.921348314606742, y1+61.92134831460674, x1+28.365168539325843, y1+61.735955056179776, x1+27.994382022471907, y1+61.550561797752806, x1+27.623595505617978, y1+61.36516853932584, x1+27.252808988764045, y1+61.17977528089888, x1+26.696629213483146, y1+60.99438202247192, x1+26.325842696629216, y1+60.80898876404494, x1+25.95505617977528, y1+60.62359550561798, x1+25.58426966292135, y1+60.43820224719101, x1+25.213483146067414, y1+60.252808988764045, x1+24.84269662921348, y1+60.06741573033708, x1+24.657303370786515, y1+59.88202247191012, x1+24.286516853932582, y1+59.69662921348314, x1+24.101123595505616, y1+59.51123595505618, x1+23.915730337078653, y1+59.32584269662921, x1+23.915730337078653, y1+59.140449438202246, x1+23.730337078651687, y1+58.95505617977528, x1+23.730337078651687, y1+58.76966292134832, x1+23.730337078651687, y1+58.58426966292135, x1+23.730337078651687, y1+58.39887640449438, x1+23.730337078651687, y1+58.21348314606741, x1+23.730337078651687, y1+58.02808988764045, x1+23.730337078651687, y1+57.842696629213485, x1+23.915730337078653, y1+57.657303370786515, x1+23.915730337078653, y1+57.47191011235955, x1+23.915730337078653, y1+57.28651685393259, x1+23.915730337078653, y1+57.10112359550561, x1+23.915730337078653, y1+56.91573033707865, x1+24.101123595505616, y1+56.73033707865169, x1+24.101123595505616, y1+56.54494382022472, x1+24.101123595505616, y1+56.359550561797754, x1+24.101123595505616, y1+56.17415730337079, x1+24.286516853932582, y1+55.988764044943814, x1+24.286516853932582, y1+55.80337078651685, x1+24.286516853932582, y1+55.61797752808989, x1+24.286516853932582, y1+55.43258426966292, x1+24.471910112359552, y1+55.247191011235955, x1+24.471910112359552, y1+55.06179775280899, x1+24.471910112359552, y1+54.87640449438203, x1+24.471910112359552, y1+54.69101123595505, x1+24.657303370786515, y1+54.50561797752809, x1+24.657303370786515, y1+54.32022471910112, x1+24.657303370786515, y1+54.13483146067416, x1+24.657303370786515, y1+53.949438202247194, x1+24.84269662921348, y1+53.76404494382023, x1+24.84269662921348, y1+53.57865168539326, x1+24.84269662921348, y1+53.39325842696629, x1+24.84269662921348, y1+53.20786516853932, x1+25.02808988764045, y1+53.02247191011236, x1+25.02808988764045, y1+52.837078651685395, x1+25.02808988764045, y1+52.65168539325843, x1+25.02808988764045, y1+52.46629213483146, x1+25.02808988764045, y1+52.28089887640449, x1+25.213483146067414, y1+52.09550561797752, x1+25.213483146067414, y1+51.91011235955056, x1+25.213483146067414, y1+51.7247191011236, x1+25.39887640449438, y1+51.53932584269663, x1+25.39887640449438, y1+51.353932584269664, x1+25.39887640449438, y1+51.1685393258427, x1+25.39887640449438, y1+50.983146067415724, x1+25.39887640449438, y1+50.79775280898876, x1+25.58426966292135, y1+50.6123595505618, x1+25.58426966292135, y1+50.42696629213483, x1+25.58426966292135, y1+50.241573033707866, x1+25.58426966292135, y1+50.0561797752809, x1+25.769662921348313, y1+49.87078651685394, x1+25.769662921348313, y1+49.68539325842696, x1+25.769662921348313, y1+49.5, x1+25.769662921348313, y1+49.31460674157303, x1+25.95505617977528, y1+49.12921348314607, x1+25.95505617977528, y1+48.943820224719104, x1+25.95505617977528, y1+48.75842696629214, x1+25.95505617977528, y1+48.573033707865164, x1+25.769662921348313, y1+48.3876404494382, x1+25.58426966292135, y1+48.20224719101123, x1+25.39887640449438, y1+48.01685393258427, x1+25.213483146067414, y1+47.831460674157306, x1+24.84269662921348, y1+47.64606741573034, x1+24.657303370786515, y1+47.46067415730337, x1+24.471910112359552, y1+47.2752808988764, x1+24.286516853932582, y1+47.08988764044943, x1+23.915730337078653, y1+46.90449438202247, x1+23.730337078651687, y1+46.71910112359551, x1+23.544943820224717, y1+46.533707865168545, x1+23.359550561797754, y1+46.348314606741575, x1+23.174157303370787, y1+46.162921348314605, x1+22.988764044943817, y1+45.977528089887635, x1+22.803370786516854, y1+45.79213483146067, x1+22.803370786516854, y1+45.60674157303371, x1+22.617977528089888, y1+45.421348314606746, x1+22.432584269662918, y1+45.235955056179776, x1+22.247191011235955, y1+45.05056179775281, x1+22.06179775280899, y1+44.865168539325836, x1+22.06179775280899, y1+44.67977528089887, x1+21.876404494382026, y1+44.49438202247191, x1+21.691011235955056, y1+44.30898876404494, x1+21.50561797752809, y1+44.12359550561798, x1+21.50561797752809, y1+43.938202247191015, x1+21.320224719101127, y1+43.75280898876405, x1+21.320224719101127, y1+43.567415730337075, x1+21.134831460674157, y1+43.38202247191011, x1+20.94943820224719, y1+43.19662921348314, x1+20.94943820224719, y1+43.01123595505618, x1+20.764044943820227, y1+42.825842696629216, x1+20.764044943820227, y1+42.64044943820225, x1+20.578651685393258, y1+42.455056179775276, x1+20.578651685393258, y1+42.26966292134831, x1+20.39325842696629, y1+42.08426966292134, x1+20.39325842696629, y1+41.89887640449438, x1+20.20786516853933, y1+41.71348314606742, x1+20.20786516853933, y1+41.528089887640455, x1+20.02247191011236, y1+41.342696629213485, x1+20.02247191011236, y1+41.157303370786515, x1+20.02247191011236, y1+40.97191011235955, x1+19.837078651685392, y1+40.78651685393258, x1+19.837078651685392, y1+40.60112359550562, x1+19.837078651685392, y1+40.41573033707866, x1+19.65168539325843, y1+40.23033707865169, x1+19.65168539325843, y1+40.04494382022472, x1+19.65168539325843, y1+39.859550561797754, x1+19.46629213483146, y1+39.674157303370784, x1+19.46629213483146, y1+39.48876404494382, x1+19.46629213483146, y1+39.30337078651686, x1+19.280898876404496, y1+39.11797752808989, x1+19.280898876404496, y1+38.93258426966292, x1+19.280898876404496, y1+38.747191011235955, x1+19.280898876404496, y1+38.56179775280899, x1+19.09550561797753, y1+38.37640449438202, x1+19.09550561797753, y1+38.19101123595506, x1+19.09550561797753, y1+38.00561797752809, x1+19.09550561797753, y1+37.82022471910112, x1+19.09550561797753, y1+37.63483146067416, x1+19.09550561797753, y1+37.449438202247194, x1+19.09550561797753, y1+37.264044943820224, x1+19.09550561797753, y1+37.078651685393254, x1+19.09550561797753, y1+36.89325842696629, x1+19.09550561797753, y1+36.70786516853933, x1+19.09550561797753, y1+36.52247191011236, x1+19.09550561797753, y1+36.337078651685395, x1+18.91011235955056, y1+36.151685393258425, x1+18.91011235955056, y1+35.966292134831455, x1+18.91011235955056, y1+35.78089887640449, x1+18.91011235955056, y1+35.59550561797753, x1+18.91011235955056, y1+35.41011235955057, x1+18.91011235955056, y1+35.2247191011236, x1+18.91011235955056, y1+35.03932584269663, x1+19.09550561797753, y1+34.853932584269664, x1+19.09550561797753, y1+34.668539325842694, x1+19.09550561797753, y1+34.48314606741573, x1+19.09550561797753, y1+34.29775280898877, x1+19.09550561797753, y1+34.1123595505618, x1+19.09550561797753, y1+33.92696629213483, x1+19.09550561797753, y1+33.741573033707866, x1+19.09550561797753, y1+33.5561797752809, x1+19.09550561797753, y1+33.37078651685393, x1+19.09550561797753, y1+33.18539325842697, x1+19.09550561797753, y1+33.0, x1+19.280898876404496, y1+32.81460674157303, x1+19.280898876404496, y1+32.62921348314607, x1+19.280898876404496, y1+32.443820224719104, x1+19.280898876404496, y1+32.258426966292134, x1+19.280898876404496, y1+32.07303370786517, x1+19.46629213483146, y1+31.8876404494382, x1+19.46629213483146, y1+31.702247191011235, x1+19.46629213483146, y1+31.51685393258427, x1+19.46629213483146, y1+31.331460674157302, x1+19.65168539325843, y1+31.14606741573034, x1+19.65168539325843, y1+30.96067415730337, x1+19.65168539325843, y1+30.775280898876403, x1+19.837078651685392, y1+30.58988764044944, x1+19.837078651685392, y1+30.40449438202247, x1+20.02247191011236, y1+30.219101123595504, x1+20.02247191011236, y1+30.03370786516854, x1+20.02247191011236, y1+29.84831460674157, x1+20.20786516853933, y1+29.662921348314605, x1+20.20786516853933, y1+29.47752808988764, x1+20.39325842696629, y1+29.292134831460675, x1+20.39325842696629, y1+29.106741573033705, x1+20.578651685393258, y1+28.921348314606742, x1+20.578651685393258, y1+28.735955056179776, x1+20.764044943820227, y1+28.550561797752806, x1+20.764044943820227, y1+28.365168539325843, x1+20.94943820224719, y1+28.179775280898877, x1+20.94943820224719, y1+27.994382022471907, x1+21.134831460674157, y1+27.808988764044944, x1+21.134831460674157, y1+27.623595505617978, x1+21.320224719101127, y1+27.438202247191015, x1+21.320224719101127, y1+27.252808988764045, x1+21.50561797752809, y1+27.06741573033708, x1+21.691011235955056, y1+26.882022471910116, x1+21.691011235955056, y1+26.696629213483146, x1+21.876404494382026, y1+26.51123595505618, x1+22.06179775280899, y1+26.325842696629216, x1+22.06179775280899, y1+26.140449438202246, x1+22.247191011235955, y1+25.95505617977528, x1+22.432584269662918, y1+25.769662921348313, x1+22.617977528089888, y1+25.58426966292135, x1+22.617977528089888, y1+25.39887640449438, x1+22.803370786516854, y1+25.213483146067414, x1+22.988764044943817, y1+25.02808988764045, x1+23.174157303370787, y1+24.84269662921348, x1+23.359550561797754, y1+24.657303370786515, x1+23.359550561797754, y1+24.471910112359552, x1+23.544943820224717, y1+24.286516853932582, x1+23.730337078651687, y1+24.101123595505616, x1+23.915730337078653, y1+23.915730337078653, x1+24.101123595505616, y1+23.730337078651687, x1+24.286516853932582, y1+23.544943820224717, x1+24.471910112359552, y1+23.359550561797754, x1+24.657303370786515, y1+23.174157303370787, x1+24.84269662921348, y1+22.988764044943817, x1+25.02808988764045, y1+22.803370786516854, x1+25.213483146067414, y1+22.617977528089888, x1+25.58426966292135, y1+22.432584269662918, x1+25.769662921348313, y1+22.247191011235955, x1+25.95505617977528, y1+22.06179775280899, x1+26.140449438202246, y1+21.876404494382026, x1+26.325842696629216, y1+21.691011235955056, x1+26.51123595505618, y1+21.50561797752809, x1+26.882022471910116, y1+21.320224719101127, x1+27.06741573033708, y1+21.134831460674157, x1+27.252808988764045, y1+20.94943820224719, x1+27.438202247191015, y1+20.764044943820227, x1+27.808988764044944, y1+20.578651685393258, x1+27.994382022471907, y1+20.39325842696629, x1+28.179775280898877, y1+20.20786516853933, x1+28.550561797752806, y1+20.02247191011236, x1+28.735955056179776, y1+19.837078651685392, x1+28.921348314606742, y1+19.65168539325843, x1+29.292134831460675, y1+19.46629213483146, x1+29.47752808988764, y1+19.280898876404496, x1+29.662921348314605, y1+19.09550561797753, x1+29.84831460674157, y1+18.91011235955056, x1+30.219101123595504, y1+18.724719101123597, x1+30.40449438202247, y1+18.539325842696627, x1+30.775280898876403, y1+18.353932584269664, x1+30.96067415730337, y1+18.168539325842698, x1+31.14606741573034, y1+17.983146067415728, x1+31.51685393258427, y1+17.797752808988765, x1+31.702247191011235, y1+17.6123595505618, x1+32.07303370786517, y1+17.426966292134832, x1+32.258426966292134, y1+17.241573033707866, x1+32.443820224719104, y1+17.0561797752809, x1+32.81460674157303, y1+16.870786516853933, x1+33.0, y1+16.685393258426966, x1+33.37078651685393, y1+16.5, x1+33.5561797752809, y1+16.314606741573034, x1+33.741573033707866, y1+16.129213483146067, x1+34.1123595505618, y1+15.9438202247191, x1+34.29775280898877, y1+15.758426966292134, x1+34.668539325842694, y1+15.57303370786517, x1+34.853932584269664, y1+15.387640449438202, x1+35.03932584269663, y1+15.202247191011235, x1+35.41011235955057, y1+15.01685393258427, x1+35.59550561797753, y1+14.831460674157302, x1+35.78089887640449, y1+14.646067415730338, x1+36.151685393258425, y1+14.460674157303371, x1+36.337078651685395, y1+14.275280898876403, x1+36.52247191011236, y1+14.089887640449438, x1+36.89325842696629, y1+13.904494382022472, x1+37.078651685393254, y1+13.719101123595507, x1+37.264044943820224, y1+13.53370786516854, x1+37.63483146067416, y1+13.348314606741573, x1+37.82022471910112, y1+13.162921348314608, x1+37.82022471910112, y1+12.97752808988764, x1+37.82022471910112, y1+12.792134831460675, x1+37.63483146067416, y1+12.606741573033707, x1+37.449438202247194, y1+12.42134831460674, x1+37.264044943820224, y1+12.235955056179776, x1+37.078651685393254, y1+12.050561797752808, x1+36.89325842696629, y1+11.865168539325843, x1+36.70786516853933, y1+11.679775280898877, x1+36.52247191011236, y1+11.494382022471909, x1+36.337078651685395, y1+11.308988764044944, x1+36.337078651685395, y1+11.123595505617978, x1+36.151685393258425, y1+10.938202247191013, x1+35.966292134831455, y1+10.752808988764045, x1+35.966292134831455, y1+10.567415730337078, x1+35.78089887640449, y1+10.382022471910114, x1+35.78089887640449, y1+10.196629213483146, x1+35.59550561797753, y1+10.01123595505618, x1+35.59550561797753, y1+9.825842696629215, x1+35.59550561797753, y1+9.640449438202248, x1+35.41011235955057, y1+9.45505617977528, x1+35.41011235955057, y1+9.269662921348313, x1+35.41011235955057, y1+9.084269662921349, x1+35.41011235955057, y1+8.898876404494382, x1+35.2247191011236, y1+8.713483146067416, x1+35.2247191011236, y1+8.52808988764045, x1+35.2247191011236, y1+8.342696629213483, x1+35.2247191011236, y1+8.157303370786517, x1+35.2247191011236, y1+7.97191011235955, x1+35.2247191011236, y1+7.786516853932585, x1+35.2247191011236, y1+7.601123595505618, x1+35.2247191011236, y1+7.415730337078651, x1+35.2247191011236, y1+7.230337078651686, x1+35.2247191011236, y1+7.044943820224719, x1+35.2247191011236, y1+6.859550561797754, x1+35.41011235955057, y1+6.674157303370786, x1+35.41011235955057, y1+6.48876404494382, x1+35.41011235955057, y1+6.303370786516854, x1+35.41011235955057, y1+6.117977528089888, x1+35.41011235955057, y1+5.932584269662922, x1+35.59550561797753, y1+5.747191011235954, x1+35.59550561797753, y1+5.561797752808989, x1+35.78089887640449, y1+5.376404494382022, x1+35.78089887640449, y1+5.191011235955057, x1+35.966292134831455, y1+5.00561797752809, x1+35.966292134831455, y1+4.820224719101124, x1+36.151685393258425, y1+4.634831460674157, x1+36.151685393258425, y1+4.449438202247191, x1+36.337078651685395, y1+4.264044943820225, x1+36.52247191011236, y1+4.078651685393258, x1+36.70786516853933, y1+3.8932584269662924, x1+36.89325842696629, y1+3.7078651685393256, x1+37.078651685393254, y1+3.5224719101123596, x1+37.264044943820224, y1+3.337078651685393, x1+37.449438202247194, y1+3.151685393258427, x1+37.63483146067416, y1+2.966292134831461, x1+38.00561797752809, y1+2.7808988764044944, x1+38.37640449438202, y1+2.5955056179775284, x1+38.56179775280899, y1+2.410112359550562, x1+38.93258426966292, y1+2.2247191011235956, x1+39.48876404494382, y1+2.039325842696629, x1+40.41573033707866, y1+1.8539325842696628, x1+41.342696629213485, y1+1.8539325842696628, x1+41.89887640449438, y1+1.8539325842696628, x1+42.825842696629216, y1+2.039325842696629, x1+43.567415730337075, y1+2.410112359550562, x1+43.938202247191015, y1+2.5955056179775284, x1+44.12359550561798, y1+2.7808988764044944, x1+44.49438202247191, y1+2.966292134831461, x1+44.67977528089887, y1+3.151685393258427, x1+44.865168539325836, y1+3.337078651685393, x1+45.05056179775281, y1+3.5224719101123596, x1+45.235955056179776, y1+3.7078651685393256, x1+45.421348314606746, y1+3.8932584269662924, x1+45.60674157303371, y1+4.078651685393258, x1+45.79213483146067, y1+4.264044943820225, x1+45.977528089887635, y1+4.449438202247191, x1+45.977528089887635, y1+4.634831460674157, x1+46.162921348314605, y1+4.820224719101124, x1+46.162921348314605, y1+5.00561797752809, x1+46.348314606741575, y1+5.191011235955057, x1+46.348314606741575, y1+5.376404494382022, x1+46.533707865168545, y1+5.561797752808989, x1+46.533707865168545, y1+5.747191011235954, x1+46.71910112359551, y1+5.932584269662922, x1+46.71910112359551, y1+6.117977528089888, x1+46.71910112359551, y1+6.303370786516854, x1+46.71910112359551, y1+6.48876404494382, x1+46.90449438202247, y1+6.674157303370786, x1+46.90449438202247, y1+6.859550561797754, x1+46.90449438202247, y1+7.044943820224719, x1+46.90449438202247, y1+7.230337078651686, x1+46.90449438202247, y1+7.415730337078651, x1+46.90449438202247, y1+7.601123595505618, x1+46.90449438202247, y1+7.786516853932585, x1+46.90449438202247, y1+7.97191011235955, x1+46.90449438202247, y1+8.157303370786517, x1+46.90449438202247, y1+8.342696629213483, x1+46.90449438202247, y1+8.52808988764045, x1+46.90449438202247, y1+8.713483146067416, x1+46.90449438202247, y1+8.898876404494382, x1+46.90449438202247, y1+9.084269662921349, x1+46.71910112359551, y1+9.269662921348313, x1+46.71910112359551, y1+9.45505617977528, x1+46.71910112359551, y1+9.640449438202248, x1+46.533707865168545, y1+9.825842696629215, x1+46.533707865168545, y1+10.01123595505618, x1+46.348314606741575, y1+10.196629213483146, x1+46.348314606741575, y1+10.382022471910114, x1+46.162921348314605, y1+10.567415730337078, x1+46.162921348314605, y1+10.752808988764045, x1+45.977528089887635, y1+10.938202247191013, x1+45.79213483146067, y1+11.123595505617978, x1+45.79213483146067, y1+11.308988764044944, x1+45.60674157303371, y1+11.494382022471909, x1+45.421348314606746, y1+11.679775280898877, x1+45.235955056179776, y1+11.865168539325843, x1+45.05056179775281, y1+12.050561797752808, x1+44.865168539325836, y1+12.235955056179776, x1+44.67977528089887, y1+12.42134831460674, x1+44.49438202247191, y1+12.606741573033707, x1+44.49438202247191, y1+12.792134831460675, x1+44.30898876404494, y1+12.97752808988764, x1+44.30898876404494, y1+13.162921348314608, x1+44.67977528089887, y1+13.348314606741573, x1+44.865168539325836, y1+13.53370786516854, x1+45.05056179775281, y1+13.719101123595507, x1+45.421348314606746, y1+13.904494382022472, x1+45.60674157303371, y1+14.089887640449438, x1+45.79213483146067, y1+14.275280898876403, x1+45.977528089887635, y1+14.460674157303371, x1+46.348314606741575, y1+14.646067415730338, x1+46.533707865168545, y1+14.831460674157302, x1+46.71910112359551, y1+15.01685393258427, x1+47.08988764044943, y1+15.202247191011235, x1+47.2752808988764, y1+15.387640449438202, x1+47.64606741573034, y1+15.57303370786517, x1+47.831460674157306, y1+15.758426966292134, x1+48.01685393258427, y1+15.9438202247191, x1+48.3876404494382, y1+16.129213483146067, x1+48.573033707865164, y1+16.314606741573034, x1+48.943820224719104, y1+16.5, x1+49.12921348314607, y1+16.685393258426966, x1+49.31460674157303, y1+16.870786516853933, x1+49.68539325842696, y1+17.0561797752809, x1+49.87078651685394, y1+17.241573033707866, x1+50.241573033707866, y1+17.426966292134832, x1+50.42696629213483, y1+17.6123595505618, x1+50.6123595505618, y1+17.797752808988765, x1+50.983146067415724, y1+17.983146067415728, x1+51.1685393258427, y1+18.168539325842698, x1+51.353932584269664, y1+18.353932584269664, x1+51.7247191011236, y1+18.539325842696627, x1+51.91011235955056, y1+18.724719101123597, x1+52.28089887640449, y1+18.91011235955056, x1+52.46629213483146, y1+19.09550561797753, x1+52.65168539325843, y1+19.280898876404496, x1+53.02247191011236, y1+19.46629213483146, x1+53.20786516853932, y1+19.65168539325843, x1+53.39325842696629, y1+19.837078651685392, x1+53.76404494382023, y1+20.02247191011236, x1+53.949438202247194, y1+20.20786516853933, x1+54.13483146067416, y1+20.39325842696629, x1+54.32022471910112, y1+20.578651685393258, x1+54.69101123595505, y1+20.764044943820227, x1+54.87640449438203, y1+20.94943820224719, x1+55.06179775280899, y1+21.134831460674157, x1+55.247191011235955, y1+21.320224719101127, x1+55.61797752808989, y1+21.50561797752809, x1+55.80337078651685, y1+21.691011235955056, x1+55.988764044943814, y1+21.876404494382026, x1+56.17415730337079, y1+22.06179775280899, x1+56.359550561797754, y1+22.247191011235955, x1+56.54494382022472, y1+22.432584269662918, x1+56.91573033707865, y1+22.617977528089888, x1+57.10112359550561, y1+22.803370786516854, x1+57.28651685393259, y1+22.988764044943817, x1+57.47191011235955, y1+23.174157303370787, x1+57.657303370786515, y1+23.359550561797754, x1+57.842696629213485, y1+23.544943820224717, x1+58.02808988764045, y1+23.730337078651687, x1+58.21348314606741, y1+23.915730337078653, x1+58.39887640449438, y1+24.101123595505616, x1+58.58426966292135, y1+24.286516853932582, x1+58.76966292134832, y1+24.471910112359552, x1+58.95505617977528, y1+24.657303370786515, x1+59.140449438202246, y1+24.84269662921348, x1+59.140449438202246, y1+25.02808988764045, x1+59.32584269662921, y1+25.213483146067414, x1+59.51123595505618, y1+25.39887640449438, x1+59.69662921348314, y1+25.58426966292135, x1+59.69662921348314, y1+25.769662921348313, x1+59.88202247191012, y1+25.95505617977528, x1+60.06741573033708, y1+26.140449438202246, x1+60.252808988764045, y1+26.325842696629216, x1+60.252808988764045, y1+26.51123595505618, x1+60.43820224719101, y1+26.696629213483146, x1+60.62359550561798, y1+26.882022471910116, x1+60.62359550561798, y1+27.06741573033708, x1+60.80898876404494, y1+27.252808988764045, x1+60.80898876404494, y1+27.438202247191015, x1+60.99438202247192, y1+27.623595505617978, x1+60.99438202247192, y1+27.808988764044944, x1+61.17977528089888, y1+27.994382022471907, x1+61.36516853932584, y1+28.179775280898877, x1+61.36516853932584, y1+28.365168539325843, x1+61.550561797752806, y1+28.550561797752806, x1+61.550561797752806, y1+28.735955056179776, x1+61.735955056179776, y1+28.921348314606742, x1+61.735955056179776, y1+29.106741573033705, x1+61.735955056179776, y1+29.292134831460675, x1+61.92134831460674, y1+29.47752808988764, x1+61.92134831460674, y1+29.662921348314605, x1+62.1067415730337, y1+29.84831460674157, x1+62.1067415730337, y1+30.03370786516854, x1+62.29213483146068, y1+30.219101123595504, x1+62.29213483146068, y1+30.40449438202247, x1+62.29213483146068, y1+30.58988764044944, x1+62.47752808988764, y1+30.775280898876403, x1+62.47752808988764, y1+30.96067415730337, x1+62.47752808988764, y1+31.14606741573034, x1+62.662921348314605, y1+31.331460674157302, x1+62.662921348314605, y1+31.51685393258427, x1+62.662921348314605, y1+31.702247191011235, x1+62.848314606741575, y1+31.8876404494382, x1+62.848314606741575, y1+32.07303370786517, x1+62.848314606741575, y1+32.258426966292134, x1+62.848314606741575, y1+32.443820224719104, x1+62.848314606741575, y1+32.62921348314607, x1+63.03370786516854, y1+32.81460674157303, x1+63.03370786516854, y1+33.0, x1+63.03370786516854, y1+33.18539325842697, x1+63.03370786516854, y1+33.37078651685393, x1+63.03370786516854, y1+33.5561797752809, x1+63.03370786516854, y1+33.741573033707866, x1+63.03370786516854, y1+33.92696629213483, x1+63.03370786516854, y1+34.1123595505618, x1+63.03370786516854, y1+34.29775280898877, x1+63.2191011235955, y1+34.48314606741573, x1+63.2191011235955, y1+34.668539325842694, x1+63.2191011235955, y1+34.853932584269664, x1+63.2191011235955, y1+35.03932584269663, x1+63.2191011235955, y1+35.2247191011236, x1+63.2191011235955, y1+35.41011235955057, x1+63.2191011235955, y1+35.59550561797753, x1+63.2191011235955, y1+35.78089887640449, x1+63.2191011235955, y1+35.966292134831455, x1+63.2191011235955, y1+36.151685393258425, x1+63.2191011235955, y1+36.337078651685395, x1+63.2191011235955, y1+36.52247191011236, x1+63.2191011235955, y1+36.70786516853933, x1+63.2191011235955, y1+36.89325842696629, x1+63.2191011235955, y1+37.078651685393254, x1+63.03370786516854, y1+37.264044943820224, x1+63.03370786516854, y1+37.449438202247194, x1+63.03370786516854, y1+37.63483146067416, x1+63.03370786516854, y1+37.82022471910112, x1+63.03370786516854, y1+38.00561797752809, x1+63.03370786516854, y1+38.19101123595506, x1+63.03370786516854, y1+38.37640449438202, x1+63.03370786516854, y1+38.56179775280899, x1+62.848314606741575, y1+38.747191011235955, x1+62.848314606741575, y1+38.93258426966292, x1+62.848314606741575, y1+39.11797752808989, x1+62.848314606741575, y1+39.30337078651686, x1+62.662921348314605, y1+39.48876404494382, x1+62.662921348314605, y1+39.674157303370784, x1+62.662921348314605, y1+39.859550561797754, x1+62.47752808988764, y1+40.04494382022472, x1+62.47752808988764, y1+40.23033707865169, x1+62.47752808988764, y1+40.41573033707866, x1+62.29213483146068, y1+40.60112359550562, x1+62.29213483146068, y1+40.78651685393258, x1+62.1067415730337, y1+40.97191011235955, x1+62.1067415730337, y1+41.157303370786515, x1+62.1067415730337, y1+41.342696629213485, x1+61.92134831460674, y1+41.528089887640455, x1+61.92134831460674, y1+41.71348314606742, x1+61.735955056179776, y1+41.89887640449438, x1+61.735955056179776, y1+42.08426966292134, x1+61.550561797752806, y1+42.26966292134831, x1+61.550561797752806, y1+42.455056179775276, x1+61.36516853932584, y1+42.64044943820225, x1+61.36516853932584, y1+42.825842696629216, x1+61.17977528089888, y1+43.01123595505618, x1+61.17977528089888, y1+43.19662921348314, x1+60.99438202247192, y1+43.38202247191011, x1+60.99438202247192, y1+43.567415730337075, x1+60.80898876404494, y1+43.75280898876405, x1+60.62359550561798, y1+43.938202247191015, x1+60.62359550561798, y1+44.12359550561798, x1+60.43820224719101, y1+44.30898876404494, x1+60.252808988764045, y1+44.49438202247191, x1+60.252808988764045, y1+44.67977528089887, x1+60.06741573033708, y1+44.865168539325836, x1+59.88202247191012, y1+45.05056179775281, x1+59.69662921348314, y1+45.235955056179776, x1+59.69662921348314, y1+45.421348314606746, x1+59.51123595505618, y1+45.60674157303371, x1+59.32584269662921, y1+45.79213483146067, x1+59.140449438202246, y1+45.977528089887635, x1+58.95505617977528, y1+46.162921348314605, x1+58.76966292134832, y1+46.348314606741575, x1+58.58426966292135, y1+46.533707865168545, x1+58.39887640449438, y1+46.71910112359551, x1+58.21348314606741, y1+46.90449438202247, x1+58.02808988764045, y1+47.08988764044943, x1+57.657303370786515, y1+47.2752808988764, x1+57.47191011235955, y1+47.46067415730337, x1+57.28651685393259, y1+47.64606741573034, x1+57.10112359550561, y1+47.831460674157306, x1+56.73033707865169, y1+48.01685393258427, x1+56.54494382022472, y1+48.20224719101123, x1+56.359550561797754, y1+48.3876404494382, x1+56.17415730337079, y1+48.573033707865164, x1+56.17415730337079, y1+48.75842696629214, x1+56.17415730337079, y1+48.943820224719104, x1+56.359550561797754, y1+49.12921348314607, x1+56.359550561797754, y1+49.31460674157303, x1+56.359550561797754, y1+49.5, x1+56.359550561797754, y1+49.68539325842696, x1+56.54494382022472, y1+49.87078651685394, x1+56.54494382022472, y1+50.0561797752809, x1+56.54494382022472, y1+50.241573033707866, x1+56.54494382022472, y1+50.42696629213483, x1+56.54494382022472, y1+50.6123595505618, x1+56.73033707865169, y1+50.79775280898876, x1+56.73033707865169, y1+50.983146067415724, x1+56.73033707865169, y1+51.1685393258427, x1+56.73033707865169, y1+51.353932584269664, x1+56.91573033707865, y1+51.53932584269663, x1+56.91573033707865, y1+51.7247191011236, x1+56.91573033707865, y1+51.91011235955056, x1+56.91573033707865, y1+52.09550561797752, x1+57.10112359550561, y1+52.28089887640449, x1+57.10112359550561, y1+52.46629213483146, x1+57.10112359550561, y1+52.65168539325843, x1+57.10112359550561, y1+52.837078651685395, x1+57.28651685393259, y1+53.02247191011236, x1+57.28651685393259, y1+53.20786516853932, x1+57.28651685393259, y1+53.39325842696629, x1+57.28651685393259, y1+53.57865168539326, x1+57.47191011235955, y1+53.76404494382023, x1+57.47191011235955, y1+53.949438202247194, x1+57.47191011235955, y1+54.13483146067416, x1+57.47191011235955, y1+54.32022471910112, x1+57.657303370786515, y1+54.50561797752809, x1+57.657303370786515, y1+54.69101123595505, x1+57.657303370786515, y1+54.87640449438203, x1+57.657303370786515, y1+55.06179775280899, x1+57.842696629213485, y1+55.247191011235955, x1+57.842696629213485, y1+55.43258426966292, x1+57.842696629213485, y1+55.61797752808989, x1+57.842696629213485, y1+55.80337078651685, x1+58.02808988764045, y1+55.988764044943814, x1+58.02808988764045, y1+56.17415730337079, x1+58.02808988764045, y1+56.359550561797754, x1+58.02808988764045, y1+56.54494382022472, x1+58.21348314606741, y1+56.73033707865169, x1+58.21348314606741, y1+56.91573033707865, x1+58.21348314606741, y1+57.10112359550561, x1+58.21348314606741, y1+57.28651685393259, x1+58.21348314606741, y1+57.47191011235955, x1+58.39887640449438, y1+57.657303370786515, x1+58.39887640449438, y1+57.842696629213485, x1+58.39887640449438, y1+58.02808988764045, x1+58.39887640449438, y1+58.21348314606741, x1+58.39887640449438, y1+58.39887640449438, x1+58.39887640449438, y1+58.58426966292135, x1+58.39887640449438, y1+58.76966292134832, x1+58.39887640449438, y1+58.95505617977528, x1+58.21348314606741, y1+59.140449438202246, x1+58.21348314606741, y1+59.32584269662921, x1+58.02808988764045, y1+59.51123595505618, x1+57.842696629213485, y1+59.69662921348314, x1+57.47191011235955, y1+59.88202247191012, x1+57.28651685393259, y1+60.06741573033708, x1+56.91573033707865, y1+60.252808988764045, x1+56.54494382022472, y1+60.43820224719101, x1+56.17415730337079, y1+60.62359550561798, x1+55.80337078651685, y1+60.80898876404494, x1+55.43258426966292, y1+60.99438202247192, x1+55.06179775280899, y1+61.17977528089888, x1+54.50561797752809, y1+61.36516853932584, x1+54.13483146067416, y1+61.550561797752806, x1+53.76404494382023, y1+61.735955056179776, x1+53.20786516853932, y1+61.92134831460674, x1+52.837078651685395, y1+62.1067415730337, x1+52.28089887640449, y1+62.29213483146068, x1+51.91011235955056, y1+62.47752808988764, x1+51.353932584269664, y1+62.662921348314605, x1+50.6123595505618, y1+62.848314606741575, x1+50.0561797752809, y1+63.03370786516854, x1+49.5, y1+63.2191011235955, x1+48.75842696629214, y1+63.40449438202247, x1+48.01685393258427, y1+63.58988764044944, x1+47.2752808988764, y1+63.7752808988764, x1+46.533707865168545, y1+63.96067415730337, x1+46.71910112359551, y1+64.14606741573034, x1+47.08988764044943, y1+64.3314606741573, x1+47.2752808988764, y1+64.51685393258427, x1+47.64606741573034, y1+64.70224719101124, x1+48.01685393258427, y1+64.88764044943821, x1+48.573033707865164, y1+65.07303370786516, x1+49.12921348314607, y1+65.25842696629213, x1+49.87078651685394, y1+65.4438202247191, x1+50.983146067415724, y1+65.62921348314606, x1+62.29213483146068, y1+65.81460674157303, x1+64.51685393258427, y1+66.0, x1+65.81460674157303, y1+66.18539325842697, x1+66.5561797752809, y1+66.37078651685394, x1+67.48314606741573, y1+66.5561797752809, x1+68.03932584269663, y1+66.74157303370787, x1+68.78089887640449, y1+66.92696629213482, x1+69.33707865168539, y1+67.1123595505618, x1+69.8932584269663, y1+67.29775280898876, x1+70.4494382022472, y1+67.48314606741573, x1+70.82022471910113, y1+67.6685393258427, x1+71.19101123595506, y1+67.85393258426966, x1+71.74719101123596, y1+68.03932584269663, x1+72.1179775280899, y1+68.2247191011236, x1+72.48876404494382, y1+68.41011235955057, x1+72.85955056179775, y1+68.59550561797754, x1+73.23033707865169, y1+68.78089887640449, x1+73.60112359550563, y1+68.96629213483146, x1+73.97191011235955, y1+69.15168539325843, x1+74.15730337078651, y1+69.33707865168539, x1+74.52808988764045, y1+69.52247191011236, x1+74.89887640449439, y1+69.70786516853933, x1+75.08426966292134, y1+69.8932584269663, x1+75.45505617977528, y1+70.07865168539325, x1+75.64044943820224, y1+70.26404494382022, x1+76.01123595505618, y1+70.4494382022472, x1+76.19662921348315, y1+70.63483146067415, x1+76.38202247191012, y1+70.82022471910113, x1+76.75280898876404, y1+71.00561797752809, x1+76.938202247191, y1+71.19101123595506, x1+77.12359550561798, y1+71.37640449438203, x1+77.49438202247191, y1+71.56179775280899, x1+77.67977528089888, y1+71.74719101123596, x1+77.86516853932584, y1+71.93258426966291, x1+78.0505617977528, y1+72.1179775280899, x1+78.23595505617978, y1+72.30337078651685, x1+78.42134831460675, y1+72.48876404494382, x1+78.60674157303372, y1+72.67415730337079, x1+78.79213483146067, y1+72.85955056179775, x1+78.79213483146067, y1+73.04494382022472, x1+78.97752808988764, y1+73.23033707865169, x1+78.97752808988764, y1+73.41573033707866, x1+78.97752808988764, y1+73.60112359550563, x1+78.97752808988764, y1+73.78651685393258, x1+78.97752808988764, y1+73.97191011235955, x1+78.79213483146067, y1+74.15730337078651, x1+78.79213483146067, y1+74.34269662921348, x1+78.60674157303372, y1+74.52808988764045, x1+78.42134831460675, y1+74.71348314606742, x1+78.23595505617978, y1+74.89887640449439, x1+78.0505617977528, y1+75.08426966292134, x1+77.86516853932584, y1+75.26966292134831, x1+77.67977528089888, y1+75.45505617977528, x1+77.49438202247191, y1+75.64044943820224, x1+77.30898876404494, y1+75.82584269662922, x1+77.12359550561798, y1+76.01123595505618, x1+76.938202247191, y1+76.19662921348315, x1+76.75280898876404, y1+76.38202247191012, x1+76.56741573033707, y1+76.56741573033707, x1+76.38202247191012, y1+76.75280898876404, x1+76.19662921348315, y1+76.938202247191, x1+76.01123595505618, y1+77.12359550561798, x1+75.82584269662922, y1+77.30898876404494, x1+75.64044943820224, y1+77.49438202247191, x1+75.45505617977528, y1+77.67977528089888, x1+75.26966292134831, y1+77.86516853932584, x1+75.08426966292134, y1+78.0505617977528, x1+74.89887640449439, y1+78.23595505617978, x1+74.71348314606742, y1+78.42134831460675, x1+74.52808988764045, y1+78.60674157303372, x1+74.34269662921348, y1+78.79213483146067, x1+74.15730337078651, y1+78.97752808988764, x1+73.97191011235955, y1+79.1629213483146, x1+73.78651685393258, y1+79.34831460674157, x1+73.60112359550563, y1+79.53370786516854, x1+73.41573033707866, y1+79.71910112359551, x1+73.23033707865169, y1+79.90449438202248, x1+73.04494382022472, y1+80.08988764044943, x1+72.67415730337079, y1+80.2752808988764, x1+72.48876404494382, y1+80.46067415730337, x1+72.48876404494382, y1+80.46067415730337, x1+72.30337078651685, y1+80.46067415730337, x1+72.1179775280899, y1+80.46067415730337, x1+71.93258426966291, y1+80.46067415730337, x1+71.74719101123596, y1+80.2752808988764, x1+71.56179775280899, y1+80.2752808988764, x1+71.37640449438203, y1+80.08988764044943, x1+71.19101123595506, y1+79.90449438202248, x1+71.00561797752809, y1+79.90449438202248, x1+70.82022471910113, y1+79.71910112359551, x1+70.63483146067415, y1+79.53370786516854, x1+70.4494382022472, y1+79.53370786516854, x1+70.26404494382022, y1+79.34831460674157, x1+70.07865168539325, y1+79.1629213483146, x1+69.8932584269663, y1+78.97752808988764, x1+69.70786516853933, y1+78.97752808988764, x1+69.52247191011236, y1+78.79213483146067, x1+69.33707865168539, y1+78.60674157303372, x1+69.15168539325843, y1+78.60674157303372, x1+68.96629213483146, y1+78.42134831460675, x1+68.78089887640449, y1+78.23595505617978, x1+68.59550561797754, y1+78.23595505617978, x1+68.41011235955057, y1+78.0505617977528, x1+68.2247191011236, y1+78.0505617977528, x1+68.03932584269663, y1+77.86516853932584, x1+67.85393258426966, y1+77.86516853932584, x1+67.6685393258427, y1+77.67977528089888, x1+67.48314606741573, y1+77.49438202247191, x1+67.29775280898876, y1+77.49438202247191, x1+67.1123595505618, y1+77.49438202247191, x1+66.92696629213482, y1+77.30898876404494, x1+66.74157303370787, y1+77.30898876404494, x1+66.5561797752809, y1+77.12359550561798, x1+66.37078651685394, y1+77.12359550561798, x1+66.18539325842697, y1+76.938202247191, x1+66.0, y1+76.938202247191, x1+65.81460674157303, y1+76.75280898876404, x1+65.62921348314606, y1+76.75280898876404, x1+65.4438202247191, y1+76.75280898876404, x1+65.25842696629213, y1+76.56741573033707, x1+65.07303370786516, y1+76.56741573033707, x1+64.88764044943821, y1+76.38202247191012, x1+64.70224719101124, y1+76.38202247191012, x1+64.51685393258427, y1+76.38202247191012, x1+64.3314606741573, y1+76.38202247191012, x1+64.14606741573034, y1+76.19662921348315, x1+63.96067415730337, y1+76.19662921348315, x1+63.7752808988764, y1+76.19662921348315, x1+63.58988764044944, y1+76.01123595505618, x1+63.40449438202247, y1+76.01123595505618, x1+63.2191011235955, y1+76.01123595505618, x1+63.03370786516854, y1+76.01123595505618, x1+62.848314606741575, y1+76.01123595505618, x1+62.662921348314605, y1+76.01123595505618, x1+62.47752808988764, y1+75.82584269662922, x1+62.29213483146068, y1+75.82584269662922, x1+62.1067415730337, y1+75.82584269662922, x1+61.92134831460674, y1+75.82584269662922, x1+61.735955056179776, y1+75.82584269662922, x1+61.550561797752806, y1+75.82584269662922, x1+61.36516853932584, y1+75.64044943820224, x1+61.17977528089888, y1+75.64044943820224, x1+60.99438202247192, y1+75.64044943820224, x1+60.80898876404494, y1+75.64044943820224, x1+60.62359550561798, y1+75.64044943820224, x1+60.43820224719101, y1+75.64044943820224, x1+60.252808988764045, y1+75.64044943820224, x1+60.06741573033708, y1+75.64044943820224, x1+59.88202247191012, y1+75.64044943820224, x1+59.69662921348314, y1+75.45505617977528, x1+59.51123595505618, y1+75.45505617977528, x1+59.32584269662921, y1+75.45505617977528, x1+59.140449438202246, y1+75.45505617977528, x1+58.95505617977528, y1+75.45505617977528, x1+58.76966292134832, y1+75.45505617977528, x1+58.58426966292135, y1+75.45505617977528, x1+58.39887640449438, y1+75.45505617977528, x1+58.21348314606741, y1+75.45505617977528, x1+58.02808988764045, y1+75.45505617977528, x1+57.842696629213485, y1+75.45505617977528, x1+57.657303370786515, y1+75.45505617977528, x1+57.47191011235955, y1+75.45505617977528, x1+57.28651685393259, y1+75.45505617977528, x1+57.10112359550561, y1+75.45505617977528, x1+56.91573033707865, y1+75.26966292134831, x1+56.73033707865169, y1+75.26966292134831, x1+56.54494382022472, y1+75.26966292134831, x1+56.359550561797754, y1+75.26966292134831, x1+56.17415730337079, y1+75.26966292134831, x1+55.988764044943814, y1+75.26966292134831, x1+55.80337078651685, y1+75.26966292134831, x1+55.61797752808989, y1+75.26966292134831, x1+55.43258426966292, y1+75.26966292134831, x1+55.247191011235955, y1+75.26966292134831, x1+55.06179775280899, y1+75.26966292134831, x1+54.87640449438203, y1+75.26966292134831, x1+54.69101123595505, y1+75.26966292134831, x1+54.50561797752809, y1+75.26966292134831, x1+54.32022471910112, y1+75.26966292134831, x1+54.13483146067416, y1+75.26966292134831, x1+53.949438202247194, y1+75.26966292134831, x1+53.76404494382023, y1+75.08426966292134, x1+53.57865168539326, y1+75.08426966292134, x1+53.39325842696629, y1+75.08426966292134, x1+53.20786516853932, y1+75.08426966292134, x1+53.02247191011236, y1+75.08426966292134, x1+52.837078651685395, y1+75.08426966292134, x1+52.65168539325843, y1+75.08426966292134, x1+52.46629213483146, y1+75.08426966292134, x1+52.28089887640449, y1+75.08426966292134, x1+52.09550561797752, y1+75.08426966292134, x1+51.91011235955056, y1+75.08426966292134, x1+51.7247191011236, y1+75.08426966292134, x1+51.53932584269663, y1+75.08426966292134, x1+51.353932584269664, y1+75.08426966292134, x1+51.1685393258427, y1+75.08426966292134, x1+50.983146067415724, y1+75.08426966292134, x1+50.79775280898876, y1+74.89887640449439, x1+50.6123595505618, y1+74.89887640449439, x1+50.42696629213483, y1+74.89887640449439, x1+50.241573033707866, y1+74.89887640449439, x1+50.0561797752809, y1+74.89887640449439, x1+49.87078651685394, y1+74.89887640449439, x1+49.68539325842696, y1+74.89887640449439, x1+49.5, y1+74.89887640449439, x1+49.31460674157303, y1+74.71348314606742, x1+49.12921348314607, y1+74.71348314606742, x1+48.943820224719104, y1+74.71348314606742, x1+48.75842696629214, y1+74.71348314606742, x1+48.573033707865164, y1+74.71348314606742, x1+48.3876404494382, y1+74.71348314606742, x1+48.20224719101123, y1+74.71348314606742, x1+48.01685393258427, y1+74.52808988764045, x1+47.831460674157306, y1+74.52808988764045, x1+47.64606741573034, y1+74.52808988764045, x1+47.46067415730337, y1+74.52808988764045, x1+47.2752808988764, y1+74.34269662921348, x1+47.08988764044943, y1+74.34269662921348, x1+46.90449438202247, y1+74.34269662921348, x1+46.71910112359551, y1+74.34269662921348, x1+46.533707865168545, y1+74.34269662921348, x1+46.348314606741575, y1+74.15730337078651, x1+46.162921348314605, y1+74.15730337078651, x1+45.977528089887635, y1+74.15730337078651, x1+45.79213483146067, y1+73.97191011235955, x1+45.60674157303371, y1+73.97191011235955, x1+45.421348314606746, y1+73.97191011235955, x1+45.235955056179776, y1+73.78651685393258, x1+45.05056179775281, y1+73.78651685393258, x1+44.865168539325836, y1+73.78651685393258, x1+44.67977528089887, y1+73.60112359550563, x1+44.49438202247191, y1+73.60112359550563, x1+44.30898876404494, y1+73.41573033707866, x1+44.12359550561798, y1+73.41573033707866, x1+43.938202247191015, y1+73.41573033707866, x1+43.75280898876405, y1+73.23033707865169, x1+43.567415730337075, y1+73.23033707865169, x1+43.38202247191011, y1+73.04494382022472, x1+43.19662921348314, y1+73.04494382022472, x1+43.01123595505618, y1+72.85955056179775, x1+42.825842696629216, y1+72.85955056179775, x1+42.64044943820225, y1+72.67415730337079, x1+42.455056179775276, y1+72.67415730337079, x1+42.26966292134831, y1+72.48876404494382, x1+42.08426966292134, y1+72.48876404494382, x1+41.89887640449438, y1+72.30337078651685, x1+41.71348314606742, y1+72.30337078651685, x1+41.528089887640455, y1+72.1179775280899, x1+41.342696629213485, y1+72.1179775280899, x1+41.157303370786515, y1+71.93258426966291, x1+40.97191011235955, y1+71.93258426966291, x1+40.78651685393258, y1+72.1179775280899, x1+40.60112359550562, y1+72.1179775280899, x1+40.41573033707866, y1+72.30337078651685, x1+40.23033707865169, y1+72.30337078651685, x1+40.04494382022472, y1+72.48876404494382, x1+39.859550561797754, y1+72.48876404494382, x1+39.674157303370784, y1+72.67415730337079, x1+39.48876404494382, y1+72.67415730337079, x1+39.30337078651686, y1+72.85955056179775, x1+39.11797752808989, y1+72.85955056179775, x1+38.93258426966292, y1+73.04494382022472, x1+38.747191011235955, y1+73.04494382022472, x1+38.56179775280899, y1+73.23033707865169, x1+38.37640449438202, y1+73.23033707865169, x1+38.19101123595506, y1+73.41573033707866, x1+38.00561797752809, y1+73.41573033707866, x1+37.82022471910112, y1+73.41573033707866, x1+37.63483146067416, y1+73.60112359550563, x1+37.449438202247194, y1+73.60112359550563, x1+37.264044943820224, y1+73.78651685393258, x1+37.078651685393254, y1+73.78651685393258, x1+36.89325842696629, y1+73.78651685393258, x1+36.70786516853933, y1+73.97191011235955, x1+36.52247191011236, y1+73.97191011235955, x1+36.337078651685395, y1+73.97191011235955, x1+36.151685393258425, y1+74.15730337078651, x1+35.966292134831455, y1+74.15730337078651, x1+35.78089887640449, y1+74.15730337078651, x1+35.59550561797753, y1+74.34269662921348, x1+35.41011235955057, y1+74.34269662921348, x1+35.2247191011236, y1+74.34269662921348, x1+35.03932584269663, y1+74.34269662921348, x1+34.853932584269664, y1+74.52808988764045, x1+34.668539325842694, y1+74.52808988764045, x1+34.48314606741573, y1+74.52808988764045, x1+34.29775280898877, y1+74.52808988764045, x1+34.1123595505618, y1+74.52808988764045, x1+33.92696629213483, y1+74.71348314606742, x1+33.741573033707866, y1+74.71348314606742, x1+33.5561797752809, y1+74.71348314606742, x1+33.37078651685393, y1+74.71348314606742, x1+33.18539325842697, y1+74.71348314606742, x1+33.0, y1+74.71348314606742, x1+32.81460674157303, y1+74.89887640449439, x1+32.62921348314607, y1+74.89887640449439, x1+32.443820224719104, y1+74.89887640449439, x1+32.258426966292134, y1+74.89887640449439, x1+32.07303370786517, y1+74.89887640449439, x1+31.8876404494382, y1+74.89887640449439, x1+31.702247191011235, y1+74.89887640449439, x1+31.51685393258427, y1+74.89887640449439, x1+31.331460674157302, y1+74.89887640449439, x1+31.14606741573034, y1+75.08426966292134, x1+30.96067415730337, y1+75.08426966292134, x1+30.775280898876403, y1+75.08426966292134, x1+30.58988764044944, y1+75.08426966292134, x1+30.40449438202247, y1+75.08426966292134, x1+30.219101123595504, y1+75.08426966292134, x1+30.03370786516854, y1+75.08426966292134, x1+29.84831460674157, y1+75.08426966292134, x1+29.662921348314605, y1+75.08426966292134, x1+29.47752808988764, y1+75.08426966292134, x1+29.292134831460675, y1+75.08426966292134, x1+29.106741573033705, y1+75.08426966292134, x1+28.921348314606742, y1+75.08426966292134, x1+28.735955056179776, y1+75.08426966292134, x1+28.550561797752806, y1+75.08426966292134, x1+28.365168539325843, y1+75.08426966292134, x1+28.179775280898877, y1+75.26966292134831, x1+27.994382022471907, y1+75.26966292134831, x1+27.808988764044944, y1+75.26966292134831, x1+27.623595505617978, y1+75.26966292134831, x1+27.438202247191015, y1+75.26966292134831, x1+27.252808988764045, y1+75.26966292134831, x1+27.06741573033708, y1+75.26966292134831, x1+26.882022471910116, y1+75.26966292134831, x1+26.696629213483146, y1+75.26966292134831, x1+26.51123595505618, y1+75.26966292134831, x1+26.325842696629216, y1+75.26966292134831, x1+26.140449438202246, y1+75.26966292134831, x1+25.95505617977528, y1+75.26966292134831, x1+25.769662921348313, y1+75.26966292134831, x1+25.58426966292135, y1+75.26966292134831, x1+25.39887640449438, y1+75.26966292134831, x1+25.213483146067414, y1+75.26966292134831, x1+25.02808988764045, y1+75.45505617977528, x1+24.84269662921348, y1+75.45505617977528, x1+24.657303370786515, y1+75.45505617977528, x1+24.471910112359552, y1+75.45505617977528, x1+24.286516853932582, y1+75.45505617977528, x1+24.101123595505616, y1+75.45505617977528, x1+23.915730337078653, y1+75.45505617977528, x1+23.730337078651687, y1+75.45505617977528, x1+23.544943820224717, y1+75.45505617977528, x1+23.359550561797754, y1+75.45505617977528, x1+23.174157303370787, y1+75.45505617977528, x1+22.988764044943817, y1+75.45505617977528, x1+22.803370786516854, y1+75.45505617977528, x1+22.617977528089888, y1+75.45505617977528, x1+22.432584269662918, y1+75.45505617977528, x1+22.247191011235955, y1+75.64044943820224, x1+22.06179775280899, y1+75.64044943820224, x1+21.876404494382026, y1+75.64044943820224, x1+21.691011235955056, y1+75.64044943820224, x1+21.50561797752809, y1+75.64044943820224, x1+21.320224719101127, y1+75.64044943820224, x1+21.134831460674157, y1+75.64044943820224, x1+20.94943820224719, y1+75.64044943820224, x1+20.764044943820227, y1+75.64044943820224, x1+20.578651685393258, y1+75.82584269662922, x1+20.39325842696629, y1+75.82584269662922, x1+20.20786516853933, y1+75.82584269662922, x1+20.02247191011236, y1+75.82584269662922, x1+19.837078651685392, y1+75.82584269662922, x1+19.65168539325843, y1+75.82584269662922, x1+19.46629213483146, y1+76.01123595505618, x1+19.280898876404496, y1+76.01123595505618, x1+19.09550561797753, y1+76.01123595505618, x1+18.91011235955056, y1+76.01123595505618, x1+18.724719101123597, y1+76.01123595505618, x1+18.539325842696627, y1+76.19662921348315, x1+18.353932584269664, y1+76.19662921348315, x1+18.168539325842698, y1+76.19662921348315, x1+17.983146067415728, y1+76.19662921348315, x1+17.797752808988765, y1+76.38202247191012, x1+17.6123595505618, y1+76.38202247191012, x1+17.426966292134832, y1+76.38202247191012, x1+17.241573033707866, y1+76.38202247191012, x1+17.0561797752809, y1+76.56741573033707, x1+16.870786516853933, y1+76.56741573033707, x1+16.685393258426966, y1+76.75280898876404, x1+16.5, y1+76.75280898876404, x1+16.314606741573034, y1+76.75280898876404, x1+16.129213483146067, y1+76.938202247191, x1+15.9438202247191, y1+76.938202247191, x1+15.758426966292134, y1+77.12359550561798, x1+15.57303370786517, y1+77.12359550561798, x1+15.387640449438202, y1+77.30898876404494, x1+15.202247191011235, y1+77.30898876404494, x1+15.01685393258427, y1+77.49438202247191, x1+14.831460674157302, y1+77.49438202247191, x1+14.646067415730338, y1+77.67977528089888, x1+14.460674157303371, y1+77.67977528089888, x1+14.275280898876403, y1+77.86516853932584, x1+14.089887640449438, y1+77.86516853932584, x1+13.904494382022472, y1+78.0505617977528, x1+13.719101123595507, y1+78.0505617977528, x1+13.53370786516854, y1+78.23595505617978, x1+13.348314606741573, y1+78.23595505617978, x1+13.162921348314608, y1+78.42134831460675, x1+12.97752808988764, y1+78.60674157303372, x1+12.792134831460675, y1+78.60674157303372, x1+12.606741573033707, y1+78.79213483146067, x1+12.42134831460674, y1+78.97752808988764, x1+12.235955056179776, y1+78.97752808988764, x1+12.050561797752808, y1+79.1629213483146, x1+11.865168539325843, y1+79.34831460674157, x1+11.679775280898877, y1+79.53370786516854, x1+11.494382022471909, y1+79.53370786516854, x1+11.308988764044944, y1+79.71910112359551, x1+11.123595505617978, y1+79.90449438202248, x1+10.938202247191013, y1+79.90449438202248, x1+10.752808988764045, y1+80.08988764044943, x1+10.567415730337078, y1+80.2752808988764, x1+10.382022471910114, y1+80.2752808988764, x1+10.196629213483146, y1+80.46067415730337, x1+10.01123595505618, y1+80.46067415730337, x1+9.825842696629215, y1+80.46067415730337]
	ar2=[x1+35.41011235955057, y1+63.96067415730337, x1+37.449438202247194, y1+64.3314606741573, x1+39.30337078651686, y1+64.51685393258427, x1+41.71348314606742, y1+64.51685393258427, x1+44.12359550561798, y1+64.3314606741573, x1+45.79213483146067, y1+64.14606741573034, x1+47.831460674157306, y1+63.58988764044944]
	ar3=[x1+23.730337078651687, y1+59.140449438202246, x1+26.325842696629216, y1+57.47191011235955, x1+28.921348314606742, y1+55.988764044943814, x1+31.51685393258427, y1+54.69101123595505, x1+34.853932584269664, y1+53.39325842696629, x1+38.747191011235955, y1+52.65168539325843, x1+43.01123595505618, y1+52.65168539325843, x1+46.348314606741575, y1+53.02247191011236, x1+49.31460674157303, y1+53.949438202247194, x1+52.46629213483146, y1+55.247191011235955, x1+55.43258426966292, y1+56.73033707865169, x1+57.47191011235955, y1+58.02808988764045, x1+58.58426966292135, y1+58.95505617977528]
	ar4=[x1+25.95505617977528, y1+48.573033707865164, x1+28.365168539325843, y1+47.08988764044943, x1+30.775280898876403, y1+45.79213483146067, x1+33.92696629213483, y1+44.49438202247191, x1+37.63483146067416, y1+43.75280898876405, x1+43.19662921348314, y1+43.75280898876405, x1+47.64606741573034, y1+44.67977528089887, x1+51.1685393258427, y1+45.79213483146067, x1+54.13483146067416, y1+47.08988764044943, x1+56.359550561797754, y1+48.573033707865164]
	ar5=[x1+33.741573033707866, y1+30.775280898876403, x1+48.573033707865164, y1+30.775280898876403]
	ar6=[x1+41.157303370786515, y1+23.359550561797754, x1+41.157303370786515, y1+38.19101123595506]


	can.create_polygon(ar1,fill=col,outline=col2)
	can.create_line(ar2,fill=col2)
	can.create_line(ar3,fill=col2)
	can.create_line(ar4,fill=col2)
	can.create_line(ar5,fill=col2,width=2)
	can.create_line(ar6,fill=col2,width=2)

def draw_queen(col,pos):
	global can,st

	x,y=pos[0],pos[1]
	arr=valid1(x,y)

	x=arr[0]
	y=arr[1]
	sz=arr[2]



	x1=x-sz
	x2=x
	y1=y-sz
	y2=y


	if col==0:
		col="#ffffff"
		col2="#111111"
	elif col==1:
		col="#111111"
		col2="#ffffff"




	can.create_polygon(x1+(sz/2)-5-15-15+5,y1+20, x1+15,y2-25, x1+15+10.5*5,y2-25,
		x2-(sz/2)+5+15+15-5,y1+20, x1+15+10.5*4,y2-25-5, x2-(sz/2)+5+15-5,y1+15, x1+15+10.5*3,y2-25-10,
		x1+(sz/2)-5+5,y1+5+5, x1+15+10.5*2,y2-25-10, x1+(sz/2)-5-15+5,y1+15, x1+15+10.5,y2-25-5,
		x1+(sz/2)-5-15-15+5,y1+20, fill=col,outline=col2)
	

	can.create_polygon(x1+15,y2-25, x1+15+5,y2-25+5, x1+15-5+10.5*5,y2-25+5, x1+15+10.5*5,y2-25,fill=col,outline=col2)
	can.create_rectangle(x1+15+5,y2-25+5, x1+15-5+10.5*5,y2-25+5+5,fill=col,outline=col2)
	can.create_polygon(x1+15+5,y2-25+10,  x1+15,y2-25+10+5,  x1+15+5,y2-25+10+5+5, 
		x1+15-5+10.5*5,y2-25+10+5+5, x1+15+10.5*5,y2-25+10+5, x1+15-5+10.5*5,y2-25+10,fill=col,outline=col2)

	can.create_oval(x1+(sz/2)-5,y1+5,x2-(sz/2)+5,y1+15,fill=col,outline=col2,width=1)
	can.create_oval(x1+(sz/2)-5-15,y1+10,x1+(sz/2)-5-5,y1+20,fill=col,outline=col2,width=1)
	can.create_oval(x1+(sz/2)-5-15-15,y1+15,x1+(sz/2)-5-5-15,y1+25,fill=col,outline=col2,width=1)

	can.create_oval(x2-(sz/2)+5+15,y1+10,x2-(sz/2)+5+5,y1+20,fill=col,outline=col2,width=1)
	can.create_oval(x2-(sz/2)+5+15+15,y1+15,x2-(sz/2)+5+5+15,y1+25,fill=col,outline=col2,width=1)

def draw_knight(col,pos):
	global can,st

	x,y=pos[0],pos[1]
	arr=valid1(x,y)

	x=arr[0]
	y=arr[1]
	sz=arr[2]
	




	x1=x-sz
	x2=x
	y1=y-sz
	y2=y

	if col==0:
		col="#ffffff"
		col2="#111111"
	elif col==1:
		col="#111111"
		col2="#ffffff"

	ar11=[x1+23.759999999999998, y1+76.23, x1+23.759999999999998, y1+73.92, x1+23.759999999999998, y1+72.105, x1+24.09, y1+70.62, x1+24.419999999999998, y1+69.63, x1+25.245, y1+68.145, x1+25.74, y1+67.32, x1+26.895, y1+65.83500000000001, x1+27.885, y1+64.515, x1+28.874999999999996, y1+63.36, x1+30.69, y1+61.875, x1+33.66, y1+58.739999999999995, x1+34.815, y1+57.419999999999995, x1+35.805, y1+55.935, x1+36.465, y1+54.945, x1+36.96, y1+53.955000000000005, x1+37.455, y1+52.635, x1+37.95, y1+51.48, x1+38.445, y1+49.335, x1+38.94, y1+46.2, x1+38.775, y1+44.055, x1+38.775, y1+42.24, x1+38.775, y1+41.25, x1+38.61, y1+40.589999999999996, x1+36.96, y1+41.745, x1+35.64, y1+42.57, x1+34.155, y1+43.395, x1+32.835, y1+44.220000000000006, x1+31.185, y1+45.045, x1+29.535, y1+45.870000000000005, x1+28.709999999999997, y1+46.365, x1+27.555000000000003, y1+47.025, x1+26.235, y1+47.849999999999994, x1+24.75, y1+48.839999999999996, x1+23.759999999999998, y1+49.5, x1+22.770000000000003, y1+50.655, x1+22.110000000000003, y1+51.645, x1+21.45, y1+52.635, x1+20.955000000000002, y1+53.625, x1+20.13, y1+55.275000000000006, x1+19.47, y1+56.595000000000006, x1+18.315, y1+58.245, x1+16.994999999999997, y1+59.565, x1+16.335, y1+59.894999999999996, x1+14.85, y1+60.555, x1+13.695, y1+60.39, x1+12.87, y1+59.894999999999996, x1+12.375, y1+58.904999999999994, x1+12.375, y1+57.915, x1+12.375, y1+57.74999999999999, x1+10.395, y1+57.915, x1+9.57, y1+57.74999999999999, x1+7.755, y1+57.089999999999996, x1+5.61, y1+55.275000000000006, x1+4.62, y1+53.79, x1+3.96, y1+51.81, x1+3.96, y1+49.995, x1+4.455, y1+47.025, x1+5.28, y1+44.88, x1+6.27, y1+43.230000000000004, x1+8.25, y1+40.26, x1+9.9, y1+37.620000000000005, x1+11.714999999999998, y1+34.815, x1+12.375, y1+33.495000000000005, x1+12.87, y1+31.515, x1+13.365, y1+29.865, x1+13.365, y1+27.555000000000003, x1+13.200000000000001, y1+27.225, x1+13.200000000000001, y1+24.915, x1+13.860000000000001, y1+23.759999999999998, x1+14.85, y1+22.44, x1+16.005, y1+21.285, x1+18.15, y1+19.305, x1+19.14, y1+17.985, x1+19.965, y1+16.83, x1+18.975, y1+6.27, x1+29.369999999999997, y1+12.54, x1+35.475, y1+6.1049999999999995, x1+39.765, y1+15.014999999999999, x1+41.58, y1+14.85, x1+42.9, y1+14.52, x1+44.385000000000005, y1+14.52, x1+46.365, y1+14.684999999999999, x1+48.18, y1+15.014999999999999, x1+49.995, y1+15.51, x1+51.48, y1+15.84, x1+52.965, y1+16.5, x1+55.275000000000006, y1+17.655, x1+56.925, y1+18.810000000000002, x1+58.245, y1+19.8, x1+59.235, y1+20.79, x1+60.885, y1+22.275000000000002, x1+62.535000000000004, y1+24.419999999999998, x1+63.36, y1+25.74, x1+64.68, y1+27.885, x1+65.67, y1+29.535, x1+66.825, y1+32.175000000000004, x1+67.97999999999999, y1+34.98, x1+69.13499999999999, y1+38.28, x1+69.795, y1+40.92, x1+70.62, y1+43.56, x1+71.445, y1+46.85999999999999, x1+72.435, y1+51.975, x1+73.095, y1+55.440000000000005, x1+73.59, y1+59.07, x1+74.08500000000001, y1+62.865, x1+74.415, y1+66.66000000000001, x1+74.415, y1+66.66000000000001, x1+74.58, y1+68.64, x1+74.91, y1+71.94, x1+74.91, y1+76.23, x1+74.91, y1+76.23]

	ar22=[x1+6.6000000000000005, y1+52.800000000000004, x1+8.085, y1+51.975, x1+9.735, y1+50.82, x1+10.725, y1+49.83, x1+10.725, y1+49.004999999999995, x1+10.56, y1+48.18, x1+10.23, y1+47.519999999999996, x1+9.57, y1+47.19, x1+8.58, y1+47.19, x1+7.59, y1+47.849999999999994, x1+6.930000000000001, y1+49.169999999999995, x1+6.6000000000000005, y1+50.49, x1+6.435, y1+51.48, x1+6.6000000000000005, y1+52.800000000000004]

	ar33=[x1+16.665000000000003, y1+31.515, x1+18.315, y1+30.855, x1+19.965, y1+29.865, x1+21.615000000000002, y1+28.544999999999998, x1+22.44, y1+27.555000000000003, x1+23.264999999999997, y1+26.400000000000002, x1+23.759999999999998, y1+25.575, x1+23.924999999999997, y1+25.08, x1+23.924999999999997, y1+24.75, x1+22.935000000000002, y1+24.419999999999998, x1+21.615000000000002, y1+24.584999999999997, x1+20.625, y1+25.245, x1+19.8, y1+26.07, x1+18.645, y1+27.885, x1+17.82, y1+29.205, x1+17.49, y1+30.029999999999998, x1+16.665000000000003, y1+31.35, x1+16.665000000000003, y1+31.515]



	
	
	
	can.create_polygon(ar11,outline=col2,fill=col)
	can.create_polygon(ar22,outline=col2,fill=col)
	can.create_polygon(ar33,outline=col2,fill=col)






def main():
	global st,can,dict_,turn, selp,ava,red_

	can.delete("all")
	if turn=="w":
		tt="White"

	elif turn=="b":
		tt="Black"

	elif turn=="mate":
		tt="Game Over!"

	turnl=can.create_text(5,710,text="Turn: "+str(tt),fill="#111111",font=("FreeMono","12"),anchor="w")
	can.create_rectangle(0,0,700,700,fill="#111111",outline="#111111")
	can.create_rectangle(20,20,680,680,fill="#fccc74",outline="#fccc74")



	x_1=20
	x_2=20+82.5
	y_=20



	x__=61.25
	y__=61.25




	al=["a","b","c","d","e","f","g","h"]
	for x in range(8):
		can.create_text(x__,10,text=al[x],fill="#ffffff",font=("FreeMono","12"))
		can.create_text(x__,690,text=al[x],fill="#ffffff",font=("FreeMono","12"))
		x__+=82.5
	nm=8
	for y in range(8):
		if st==1:
			can.create_text(10,y__,text=str(nm),fill="#ffffff",font=("FreeMono","12") )
			can.create_text(690,y__,text=str(nm),fill="#ffffff",font=("FreeMono","12") )

			nm-=1
		elif st==0:
			can.create_text(10,y__,text=str(y+1),fill="#ffffff",font=("FreeMono","12") )
			can.create_text(690,y__,text=str(y+1),fill="#ffffff",font=("FreeMono","12") )

		y__+=82.5

	a1=[]
	a2=[]
	sz=st

	for z in range(8):
		sx=sz
		a1=[]

		for x in range(8):
			a1.append(sx)
			if sx==0:
				sx=1
			elif sx==1:
				sx=0
		a2.append(a1)

		if sz==0:
			sz=1
		elif sz==1:
			sz=0

	for y in range(8):
		if st==0:
			x_=x_1
		else:
			x_=x_2

		for x in range(4):
			can.create_rectangle(x_,y_,x_+82.5,y_+82.5,fill="#573a2e",outline="#573a2e")

			x_+=82.5*2

		if st==0:
			st=1
		elif st==1:
			st=0

		y_+=82.5



	def gp(pos):

		x=pos[0]
		y=pos[1]

		if x=="a":
			x=82.5
		elif x=="b":
			x=82.5*2
		elif x=="c":
			x=82.5*3
		elif x=="d":
			x=82.5*4
		elif x=="e":
			x=82.5*5
		elif x=="f":
			x=82.5*6	
		elif x=="g":
			x=82.5*7
		elif x=="h":
			x=82.5*8

		if st==1:

			if y=="8":
				y=82.5
			elif y=="7":
				y=82.5*2
			elif y=="6":
				y=82.5*3
			elif y=="5":
				y=82.5*4
			elif y=="4":
				y=82.5*5
			elif y=="3":
				y=82.5*6
			elif y=="2":
				y=82.5*7
			elif y=="1":
				y=82.5*8
		elif st==0:

			if y=="1":
				y=82.5
			elif y=="2":
				y=82.5*2
			elif y=="3":
				y=82.5*3
			elif y=="4":
				y=82.5*4
			elif y=="5":
				y=82.5*5
			elif y=="6":
				y=82.5*6
			elif y=="7":
				y=82.5*7
			elif y=="8":
				y=82.5*8


		x=x+20
		y=y+20
		sz=82.5

		return(x,y,x-sz,y-sz)



	def d_w(pos):
		al=["a","b","c","d","e","f","g","h"]

		x=pos[0]
		y=int(pos[1])
		
		x_=al.index(x)
		y_=y-1

		return(a2[y_][x_])
	
	


	if not len(ava)<=0:
		for a in ava:
			v=gp(a)
			v2=d_w(a)
			if v2==0:
				col="#30938c"
			elif v2==1:
				col="#8be3b3"
			can.create_oval(v[0]-30-3,v[1]-30-3,v[2]+30+3,v[3]+30+3,fill="lime",outline="green")

	if not len(red_)<=0:
		for a in red_:
			v=gp(a)
			v2=d_w(a)

			if v2==1:
				col="#30938c"
				col2="#573a2e"
			elif v2==0:
				col="#8be3b3"
				col2="#fccc74"

			can.create_rectangle(v[0],v[1],v[2],v[3],fill="#ee6b6e",outline="#ee6b6e")

	if not selp=="":
		v=gp(selp)
		v2=d_w(selp)
		if v2==0:
			col="#8be3b3"
		elif v2==1:
			col="#30938c"

		can.create_rectangle(v[0],v[1],v[2],v[3],fill=col,outline="cyan")

	for a in dict_:

		col=a.split("_")[0]
		piece=a.split("_")[1]

		if dict_[a][0]=="x":
			pass

		else:

			if col=="w":
				if piece=="pawn":
					draw_pawn(0,dict_[a][0])
				elif piece=="rook":
					draw_rook(0,dict_[a][0])
				elif piece=="bishop":
					draw_bishop(0,dict_[a][0])

				elif piece=="knight":
					draw_knight(0,dict_[a][0])

				elif piece=="queen":
					draw_queen(0,dict_[a][0])

				elif piece=="king":
					draw_king(0,dict_[a][0])

			elif col=="b":
				if piece=="pawn":
					draw_pawn(1,dict_[a][0])
				elif piece=="rook":
					draw_rook(1,dict_[a][0])
				elif piece=="bishop":
					draw_bishop(1,dict_[a][0])

				elif piece=="knight":
					draw_knight(1,dict_[a][0])

				elif piece=="queen":
					draw_queen(1,dict_[a][0])

				elif piece=="king":
					draw_king(1,dict_[a][0])

	can.create_line(20,20,20,680,680,680,680,20,20,20,fill="#fccc74",width=1)
	can.create_line(1,1,1,700-1,700-1-1,700-1,700-1-1,1,1,1,fill="#fccc74",width=1)







def val_knight(pos,col):
	global al

	arz=[]
	if col=="w":


		try:

			v_=al.index(pos[0])-1
			v1=al[al.index(pos[0])-1]
			v2=int(pos[1])+2
			vx=str(v1)+str(v2)
		except:
			v_="x"
		if not v_=="x":
			if not v2>8:
				if not v2<1:
					if not v_<0:
						if not v_>7:

							qt=0
							for i in dict_:
								if dict_[i][0]==vx:
									if i.split("_")[0]=="b":
										arz.append("_"+str(vx))
										qt=1
									elif i.split("_")[0]=="w":
										qt=1
							if qt==0:
								arz.append(vx)


		try:
			v_=al.index(pos[0])+1
			v1=al[al.index(pos[0])+1]
			v2=int(pos[1])+2
			vx=str(v1)+str(v2)
		except:
			v_="x"
		
		if not v_=="x":
			if not v2>8:
				if not v2<1:
					if not v_<0:
						if not v_>7:
							qt=0
							for i in dict_:
								if dict_[i][0]==vx:
									if i.split("_")[0]=="b":
										arz.append("_"+str(vx))
										qt=1
									elif i.split("_")[0]=="w":
										qt=1
							if qt==0:
								arz.append(vx)

		try:

			v_=al.index(pos[0])+2
			v1=al[al.index(pos[0])+2]
			v2=int(pos[1])+1
			vx=str(v1)+str(v2)
		except:
			v_="x"

		if not v_=="x":
			if not v2>8:
				if not v2<1:
					if not v_<0:
						if not v_>7:
							qt=0
							for i in dict_:
								if dict_[i][0]==vx:
									if i.split("_")[0]=="b":
										arz.append("_"+str(vx))
										qt=1
									elif i.split("_")[0]=="w":
										qt=1
							if qt==0:
								arz.append(vx)


		try:
			v_=al.index(pos[0])-2
			v1=al[al.index(pos[0])-2]
			v2=int(pos[1])+1
			vx=str(v1)+str(v2)
		except:
			v_="x"
		if not v_=="x":
			if not v2>8:
				if not v2<1:
					if not v_<0:
						if not v_>7:
							qt=0
							for i in dict_:
								if dict_[i][0]==vx:
									if i.split("_")[0]=="b":
										arz.append("_"+str(vx))
										qt=1
									elif i.split("_")[0]=="w":
										qt=1
							if qt==0:
								arz.append(vx)

		try:
			v_=al.index(pos[0])-2
			v1=al[al.index(pos[0])-2]
			v2=int(pos[1])-1
			vx=str(v1)+str(v2)
		except:
			v_="x"

		if not v_=="x":
			if not v2>8:
				if not v2<1:
					if not v_<0:
						if not v_>7:
							qt=0
							for i in dict_:
								if dict_[i][0]==vx:
									if i.split("_")[0]=="b":
										arz.append("_"+str(vx))
										qt=1
									elif i.split("_")[0]=="w":
										qt=1
							if qt==0:
								arz.append(vx)

		try:
			v_=al.index(pos[0])+2
			v1=al[al.index(pos[0])+2]
			v2=int(pos[1])-1
			vx=str(v1)+str(v2)
		except:
			v_="x"
		if not v_=="x":
			if not v2>8:
				if not v2<1:
					if not v_<0:
						if not v_>7:
							qt=0
							for i in dict_:
								if dict_[i][0]==vx:
									if i.split("_")[0]=="b":
										arz.append("_"+str(vx))
										qt=1
									elif i.split("_")[0]=="w":
										qt=1
							if qt==0:
								arz.append(vx)

		try:
			v_=al.index(pos[0])-1
			v1=al[al.index(pos[0])-1]
			v2=int(pos[1])-2
			vx=str(v1)+str(v2)
		except:
			v_="x"
		if not v_=="x":
			if not v2>8:
				if not v2<1:
					if not v_<0:
						if not v_>7:
							qt=0
							for i in dict_:
								if dict_[i][0]==vx:
									if i.split("_")[0]=="b":
										arz.append("_"+str(vx))
										qt=1
									elif i.split("_")[0]=="w":
										qt=1
							if qt==0:
								arz.append(vx)


		try:
			v_=al.index(pos[0])+1
			v1=al[al.index(pos[0])+1]
			v2=int(pos[1])-2
			vx=str(v1)+str(v2)
		except:
			v_="x"
		if not v_=="x":
			if not v2>8:
				if not v2<1:
					if not v_<0:
						if not v_>7:

							qt=0
							for i in dict_:
								if dict_[i][0]==vx:
									if i.split("_")[0]=="b":
										arz.append("_"+str(vx))
										qt=1
									elif i.split("_")[0]=="w":
										qt=1
							if qt==0:
								arz.append(vx)




		

	if col=="b":


		try:

			v_=al.index(pos[0])-1
			v1=al[al.index(pos[0])-1]
			v2=int(pos[1])-2
			vx=str(v1)+str(v2)
		except:
			v_="x"
		if not v_=="x":
			if not v2>8:
				if not v2<1:
					if not v_<0:
						if not v_>7:

							qt=0
							for i in dict_:
								if dict_[i][0]==vx:
									if i.split("_")[0]=="w":
										arz.append("_"+str(vx))
										qt=1
									elif i.split("_")[0]=="b":
										qt=1
							if qt==0:
								arz.append(vx)


		try:
			v_=al.index(pos[0])+1
			v1=al[al.index(pos[0])+1]
			v2=int(pos[1])-2
			vx=str(v1)+str(v2)
		except:
			v_="x"
		
		if not v_=="x":
			if not v2>8:
				if not v2<1:
					if not v_<0:
						if not v_>7:
							qt=0
							for i in dict_:
								if dict_[i][0]==vx:
									if i.split("_")[0]=="w":
										arz.append("_"+str(vx))
										qt=1
									elif i.split("_")[0]=="b":
										qt=1
							if qt==0:
								arz.append(vx)

		try:

			v_=al.index(pos[0])+2
			v1=al[al.index(pos[0])+2]
			v2=int(pos[1])-1
			vx=str(v1)+str(v2)
		except:
			v_="x"

		if not v_=="x":
			if not v2>8:
				if not v2<1:
					if not v_<0:
						if not v_>7:
							qt=0
							for i in dict_:
								if dict_[i][0]==vx:
									if i.split("_")[0]=="w":
										arz.append("_"+str(vx))
										qt=1
									elif i.split("_")[0]=="b":
										qt=1
							if qt==0:
								arz.append(vx)


		try:
			v_=al.index(pos[0])-2
			v1=al[al.index(pos[0])-2]
			v2=int(pos[1])-1
			vx=str(v1)+str(v2)
		except:
			v_="x"
		if not v_=="x":
			if not v2>8:
				if not v2<1:
					if not v_<0:
						if not v_>7:
							qt=0
							for i in dict_:
								if dict_[i][0]==vx:
									if i.split("_")[0]=="w":
										arz.append("_"+str(vx))
										qt=1
									elif i.split("_")[0]=="b":
										qt=1
							if qt==0:
								arz.append(vx)

		try:
			v_=al.index(pos[0])-2
			v1=al[al.index(pos[0])-2]
			v2=int(pos[1])+1
			vx=str(v1)+str(v2)
		except:
			v_="x"

		if not v_=="x":
			if not v2>8:
				if not v2<1:
					if not v_<0:
						if not v_>7:
							qt=0
							for i in dict_:
								if dict_[i][0]==vx:
									if i.split("_")[0]=="w":
										arz.append("_"+str(vx))
										qt=1
									elif i.split("_")[0]=="b":
										qt=1
							if qt==0:
								arz.append(vx)

		try:
			v_=al.index(pos[0])+2
			v1=al[al.index(pos[0])+2]
			v2=int(pos[1])+1
			vx=str(v1)+str(v2)
		except:
			v_="x"
		if not v_=="x":
			if not v2>8:
				if not v2<1:
					if not v_<0:
						if not v_>7:
							qt=0
							for i in dict_:
								if dict_[i][0]==vx:
									if i.split("_")[0]=="w":
										arz.append("_"+str(vx))
										qt=1
									elif i.split("_")[0]=="b":
										qt=1
							if qt==0:
								arz.append(vx)

		try:
			v_=al.index(pos[0])-1
			v1=al[al.index(pos[0])-1]
			v2=int(pos[1])+2
			vx=str(v1)+str(v2)
		except:
			v_="x"
		if not v_=="x":
			if not v2>8:
				if not v2<1:
					if not v_<0:
						if not v_>7:
							qt=0
							for i in dict_:
								if dict_[i][0]==vx:
									if i.split("_")[0]=="w":
										arz.append("_"+str(vx))
										qt=1
									elif i.split("_")[0]=="b":
										qt=1
							if qt==0:
								arz.append(vx)


		try:
			v_=al.index(pos[0])+1
			v1=al[al.index(pos[0])+1]
			v2=int(pos[1])+2
			vx=str(v1)+str(v2)
		except:
			v_="x"
		if not v_=="x":
			if not v2>8:
				if not v2<1:
					if not v_<0:
						if not v_>7:

							qt=0
							for i in dict_:
								if dict_[i][0]==vx:
									if i.split("_")[0]=="w":
										arz.append("_"+str(vx))
										qt=1
									elif i.split("_")[0]=="b":
										qt=1
							if qt==0:
								arz.append(vx)

	return arz


		
def val_king(pos,col):
	global al

	arz=[]

	if col=="w":


		try:
			ind=al.index(pos[0])-1
			p=int(pos[1])+1

			if ind<0 or ind>7:
				ind="x"

			if p>8:
				ind="x"
		except:
			ind="x"

		if not ind=="x":
			v=str(al[ind])+str(p)

			c=0
			for i in dict_:
				if dict_[i][0]==v:
					if i.split("_")[0]=="b":
						arz.append("_"+str(v))
					c=1

			if c==0:
				arz.append(v)







		try:
			ind=al.index(pos[0])
			p=int(pos[1])+1

			if ind<0 or ind>7:
				ind="x"

			if p>8:
				ind="x"
		except:
			ind="x"

		if not ind=="x":
			v=str(al[ind])+str(p)

			c=0
			for i in dict_:
				if dict_[i][0]==v:
					if i.split("_")[0]=="b":
						arz.append("_"+str(v))
					c=1

			if c==0:
				arz.append(v)

		try:
			ind=al.index(pos[0])+1
			p=int(pos[1])+1

			if ind<0 or ind>7:
				ind="x"

			if p>8:
				ind="x"
		except:
			ind="x"

		if not ind=="x":
			v=str(al[ind])+str(p)

			c=0
			for i in dict_:
				if dict_[i][0]==v:
					if i.split("_")[0]=="b":
						arz.append("_"+str(v))
					c=1

			if c==0:
				arz.append(v)





		try:
			ind=al.index(pos[0])-1
			p=int(pos[1])

			if ind<0 or ind>7:
				ind="x"

			if p>8:
				ind="x"
		except:
			ind="x"

		if not ind=="x":
			v=str(al[ind])+str(p)

			c=0
			for i in dict_:
				if dict_[i][0]==v:
					if i.split("_")[0]=="b":
						arz.append("_"+str(v))
					c=1

			if c==0:
				arz.append(v)




		try:
			ind=al.index(pos[0])+1
			p=int(pos[1])

			if ind<0 or ind>7:
				ind="x"

			if p>8:
				ind="x"
		except:
			ind="x"


		if not ind=="x":
			v=str(al[ind])+str(p)

			c=0
			for i in dict_:
				if dict_[i][0]==v:
					if i.split("_")[0]=="b":
						arz.append("_"+str(v))
					c=1



			if c==0:
				arz.append(v)



		try:
			ind=al.index(pos[0])-1
			p=int(pos[1])-1

			if ind<0 or ind>7:
				ind="x"

			if p<1:
				ind="x"
		except:
			ind="x"

		if not ind=="x":
			v=str(al[ind])+str(p)

			c=0
			for i in dict_:
				if dict_[i][0]==v:
					if i.split("_")[0]=="b":
						arz.append("_"+str(v))
					c=1

			if c==0:
				arz.append(v)


		try:
			ind=al.index(pos[0])
			p=int(pos[1])-1

			if ind<0 or ind>7:
				ind="x"

			if p<1:
				ind="x"
		except:
			ind="x"

		if not ind=="x":
			v=str(al[ind])+str(p)

			c=0
			for i in dict_:
				if dict_[i][0]==v:
					if i.split("_")[0]=="b":
						arz.append("_"+str(v))
					c=1

			if c==0:
				arz.append(v)



		try:
			ind=al.index(pos[0])+1
			p=int(pos[1])-1

			if ind<0 or ind>7:
				ind="x"

			if p<1:
				ind="x"
		except:
			ind="x"

		if not ind=="x":
			v=str(al[ind])+str(p)

			c=0
			for i in dict_:
				if dict_[i][0]==v:
					if i.split("_")[0]=="b":
						arz.append("_"+str(v))
					c=1

			if c==0:
				arz.append(v)

	elif col=="b":

		try:
			ind=al.index(pos[0])-1
			p=int(pos[1])+1

			if ind<0 or ind>7:
				ind="x"

			if p>8:
				ind="x"
		except:
			ind="x"

		if not ind=="x":
			v=str(al[ind])+str(p)

			c=0
			for i in dict_:
				if dict_[i][0]==v:
					if i.split("_")[0]=="w":
						arz.append("_"+str(v))
					c=1

			if c==0:
				arz.append(v)


		try:
			ind=al.index(pos[0])
			p=int(pos[1])+1

			if ind<0 or ind>7:
				ind="x"

			if p>8:
				ind="x"
		except:
			ind="x"

		if not ind=="x":
			v=str(al[ind])+str(p)

			c=0
			for i in dict_:
				if dict_[i][0]==v:
					if i.split("_")[0]=="w":
						arz.append("_"+str(v))
					c=1

			if c==0:
				arz.append(v)

		try:
			ind=al.index(pos[0])+1
			p=int(pos[1])+1

			if ind<0 or ind>7:
				ind="x"

			if p>8:
				ind="x"
		except:
			ind="x"

		if not ind=="x":
			v=str(al[ind])+str(p)

			c=0
			for i in dict_:
				if dict_[i][0]==v:
					if i.split("_")[0]=="w":
						arz.append("_"+str(v))
					c=1

			if c==0:
				arz.append(v)





		try:
			ind=al.index(pos[0])-1
			p=int(pos[1])

			if ind<0 or ind>7:
				ind="x"

			if p>8:
				ind="x"
		except:
			ind="x"

		if not ind=="x":
			v=str(al[ind])+str(p)

			c=0
			for i in dict_:
				if dict_[i][0]==v:
					if i.split("_")[0]=="w":
						arz.append("_"+str(v))
					c=1

			if c==0:
				arz.append(v)




		try:
			ind=al.index(pos[0])+1
			p=int(pos[1])

			if ind<0 or ind>7:
				ind="x"

			if p>8:
				ind="x"
		except:
			ind="x"

		if not ind=="x":
			v=str(al[ind])+str(p)

			c=0
			for i in dict_:
				if dict_[i][0]==v:
					if i.split("_")[0]=="w":
						arz.append("_"+str(v))
					c=1

			if c==0:
				arz.append(v)



		try:
			ind=al.index(pos[0])-1
			p=int(pos[1])-1

			if ind<0 or ind>7:
				ind="x"

			if p<1:
				ind="x"
		except:
			ind="x"

		if not ind=="x":
			v=str(al[ind])+str(p)

			c=0
			for i in dict_:
				if dict_[i][0]==v:
					if i.split("_")[0]=="w":
						arz.append("_"+str(v))
					c=1

			if c==0:
				arz.append(v)


		try:
			ind=al.index(pos[0])
			p=int(pos[1])-1

			if ind<0 or ind>7:
				ind="x"

			if p<1:
				ind="x"
		except:
			ind="x"

		if not ind=="x":
			v=str(al[ind])+str(p)

			c=0
			for i in dict_:
				if dict_[i][0]==v:
					if i.split("_")[0]=="w":
						arz.append("_"+str(v))
					c=1

			if c==0:
				arz.append(v)



		try:
			ind=al.index(pos[0])+1
			p=int(pos[1])-1

			if ind<0 or ind>7:
				ind="x"

			if p<1:
				ind="x"
		except:
			ind="x"

		if not ind=="x":
			v=str(al[ind])+str(p)

			c=0
			for i in dict_:
				if dict_[i][0]==v:
					if i.split("_")[0]=="w":
						arz.append("_"+str(v))
					c=1

			if c==0:
				arz.append(v)

	return arz

def val_rook(pos,col):
	global al
	arz=[]

	p1=pos[0]
	p2=pos[1]

	if col=="b":
		ar1=[]
		ar2=[]
		ar3=[]
		ar4=[]


		ind=al.index(p1)

		val1=ind
		val2=int(p2)+1


		while 1:
			if not val2>8:

				c=0
				for i in dict_:
					if dict_[i][0]==str(al[val1])+str(val2):

						col=i.split("_")[0]
						typ=i.split("_")[1]

						if col=="w":
							ar1.append("_"+str(al[val1])+str(val2))
						
						c=1
						break

				if c==1:
					break


				ar1.append(str(al[val1])+str(val2))
			else:
				break

			val2+=1




		val1=ind
		val2=int(p2)-1

		while 1:
			if not val2<1:



				c=0
				for i in dict_:
					if dict_[i][0]==str(al[val1])+str(val2):

						col=i.split("_")[0]
						typ=i.split("_")[1]

						if col=="w":
							ar2.append("_"+str(al[val1])+str(val2))
						
						c=1
						break

				if c==1:
					break


				ar2.append(str(al[val1])+str(val2))
			else:
				break

			val2-=1



		val1=ind-1
		val2=int(p2)

		while 1:
			if not val1<0:

				c=0
				for i in dict_:
					if dict_[i][0]==str(al[val1])+str(val2):

						col=i.split("_")[0]
						typ=i.split("_")[1]

						if col=="w":
							ar3.append("_"+str(al[val1])+str(val2))
						
						c=1
						break

				if c==1:
					break

				ar3.append(str(al[val1])+str(val2))

			else:
				break


			val1-=1





		val1=ind+1
		val2=int(p2)

		while 1:
			if not val1>7:

				c=0
				for i in dict_:
					if dict_[i][0]==str(al[val1])+str(val2):

						col=i.split("_")[0]
						typ=i.split("_")[1]

						if col=="w":
							ar4.append("_"+str(al[val1])+str(val2))
						
						c=1
						break

				if c==1:
					break

				ar4.append(str(al[val1])+str(val2))

			else:
				break


			val1+=1

		arz=ar1+ar2+ar3+ar4


	elif col=="w":
		ar1=[]
		ar2=[]
		ar3=[]
		ar4=[]


		ind=al.index(p1)

		val1=ind
		val2=int(p2)+1


		while 1:
			if not val2>8:

				c=0
				for i in dict_:
					if dict_[i][0]==str(al[val1])+str(val2):

						col=i.split("_")[0]
						typ=i.split("_")[1]

						if col=="b":
							ar1.append("_"+str(al[val1])+str(val2))
						
						c=1
						break

				if c==1:
					break


				ar1.append(str(al[val1])+str(val2))
			else:
				break

			val2+=1




		val1=ind
		val2=int(p2)-1

		while 1:
			if not val2<1:



				c=0
				for i in dict_:
					if dict_[i][0]==str(al[val1])+str(val2):

						col=i.split("_")[0]
						typ=i.split("_")[1]

						if col=="b":
							ar2.append("_"+str(al[val1])+str(val2))
						
						c=1
						break

				if c==1:
					break


				ar2.append(str(al[val1])+str(val2))
			else:
				break

			val2-=1



		val1=ind-1
		val2=int(p2)

		while 1:
			if not val1<0:

				c=0
				for i in dict_:
					if dict_[i][0]==str(al[val1])+str(val2):

						col=i.split("_")[0]
						typ=i.split("_")[1]

						if col=="b":
							ar3.append("_"+str(al[val1])+str(val2))
						
						c=1
						break

				if c==1:
					break

				ar3.append(str(al[val1])+str(val2))

			else:
				break


			val1-=1





		val1=ind+1
		val2=int(p2)

		while 1:
			if not val1>7:

				c=0
				for i in dict_:
					if dict_[i][0]==str(al[val1])+str(val2):

						col=i.split("_")[0]
						typ=i.split("_")[1]

						if col=="b":
							ar4.append("_"+str(al[val1])+str(val2))
						
						c=1
						break

				if c==1:
					break

				ar4.append(str(al[val1])+str(val2))

			else:
				break


			val1+=1

		arz=ar1+ar2+ar3+ar4
	return arz

def val_queen(pos,col):
	global al
	arz=[]

	p1=pos[0]
	p2=pos[1]

	if col=="w":
		ar1=[]
		ar2=[]
		ar3=[]
		ar4=[]

		ar5=[]
		ar6=[]
		ar7=[]
		ar8=[]
		ind=al.index(p1)

		val1=ind
		val2=int(p2)+1


		while 1:
			if not val2>8:

				c=0
				for i in dict_:
					if dict_[i][0]==str(al[val1])+str(val2):

						col=i.split("_")[0]
						typ=i.split("_")[1]

						if col=="b":
							ar5.append("_"+str(al[val1])+str(val2))
						
						c=1
						break

				if c==1:
					break


				ar5.append(str(al[val1])+str(val2))
			else:
				break

			val2+=1




		val1=ind
		val2=int(p2)-1

		while 1:
			if not val2<1:



				c=0
				for i in dict_:
					if dict_[i][0]==str(al[val1])+str(val2):

						col=i.split("_")[0]
						typ=i.split("_")[1]

						if col=="b":
							ar6.append("_"+str(al[val1])+str(val2))
						
						c=1
						break

				if c==1:
					break


				ar6.append(str(al[val1])+str(val2))
			else:
				break

			val2-=1



		val1=ind-1
		val2=int(p2)

		while 1:
			if not val1<0:

				c=0
				for i in dict_:
					if dict_[i][0]==str(al[val1])+str(val2):

						col=i.split("_")[0]
						typ=i.split("_")[1]

						if col=="b":
							ar7.append("_"+str(al[val1])+str(val2))
						
						c=1
						break

				if c==1:
					break

				ar7.append(str(al[val1])+str(val2))

			else:
				break


			val1-=1





		val1=ind+1
		val2=int(p2)

		while 1:
			if not val1>7:

				c=0
				for i in dict_:
					if dict_[i][0]==str(al[val1])+str(val2):

						col=i.split("_")[0]
						typ=i.split("_")[1]

						if col=="b":
							ar7.append("_"+str(al[val1])+str(val2))
						
						c=1
						break

				if c==1:
					break

				ar7.append(str(al[val1])+str(val2))

			else:
				break


			val1+=1








		val1=ind-1
		val2=int(p2)+1

		while 1:
			if val1<0:
				break

			

			c=0
			for i in dict_:
				if dict_[i][0]==str(al[val1])+str(val2):

					col=i.split("_")[0]
					typ=i.split("_")[1]

					if col=="b":
						ar1.append("_"+str(al[val1])+str(val2))
					
					c=1
					break

			if c==1:
				break
				

			if not val2>8:
				ar1.append(str(al[val1])+str(val2))


			val2+=1
			val1-=1



		val1=ind-1
		val3=int(p2)-1

		while 1:
			if val1<0:
				break
			c=0
			for i in dict_:
				if dict_[i][0]==str(al[val1])+str(val3):
					col=i.split("_")[0]
					typ=i.split("_")[1]

					if col=="b":
						ar2.append("_"+str(al[val1])+str(val3))
					c=1
					break

			if c==1:
				break


			if not val3<1:
				ar2.append(str(al[val1])+str(val3))

			

			val1-=1
			val3-=1




		val1=ind+1
		val2=int(p2)+1

		while 1:
			if val1>7:
				break

			c=0
			for i in dict_:
				if dict_[i][0]==str(al[val1])+str(val2):

					col=i.split("_")[0]
					typ=i.split("_")[1]

					if col=="b":
						ar3.append("_"+str(al[val1])+str(val2))
					c=1
					break

			if c==1:
				break



			if not val2>8:
				ar3.append(str(al[val1])+str(val2))

			val2+=1
			val1+=1



		val1=ind+1
		val3=int(p2)-1
		while 1:
			
			if val1>7:
				break
			c=0

			for i in dict_:
				if dict_[i][0]==str(al[val1])+str(val3):

					col=i.split("_")[0]
					typ=i.split("_")[1]

					if col=="b":
						ar4.append("_"+str(al[val1])+str(val3))
					c=1
					break

			if c==1:
				break

			if not val3<1:
				ar4.append(str(al[val1])+str(val3))

			val1+=1
			val3-=1

		arz=ar1+ar2+ar3+ar4+ar5+ar6+ar7+ar8

		

	elif col=="b":
		ar1=[]
		ar2=[]
		ar3=[]
		ar4=[]
		ar5=[]
		ar6=[]
		ar7=[]
		ar8=[]

		ind=al.index(p1)




		val1=ind
		val2=int(p2)+1


		while 1:
			if not val2>8:

				c=0
				for i in dict_:
					if dict_[i][0]==str(al[val1])+str(val2):

						col=i.split("_")[0]
						typ=i.split("_")[1]

						if col=="w":
							ar5.append("_"+str(al[val1])+str(val2))
						
						c=1
						break

				if c==1:
					break


				ar5.append(str(al[val1])+str(val2))
			else:
				break

			val2+=1




		val1=ind
		val2=int(p2)-1

		while 1:
			if not val2<1:



				c=0
				for i in dict_:
					if dict_[i][0]==str(al[val1])+str(val2):

						col=i.split("_")[0]
						typ=i.split("_")[1]

						if col=="w":
							ar6.append("_"+str(al[val1])+str(val2))
						
						c=1
						break

				if c==1:
					break


				ar6.append(str(al[val1])+str(val2))
			else:
				break

			val2-=1



		val1=ind-1
		val2=int(p2)

		while 1:
			if not val1<0:

				c=0
				for i in dict_:
					if dict_[i][0]==str(al[val1])+str(val2):

						col=i.split("_")[0]
						typ=i.split("_")[1]

						if col=="w":
							ar7.append("_"+str(al[val1])+str(val2))
						
						c=1
						break

				if c==1:
					break

				ar7.append(str(al[val1])+str(val2))

			else:
				break


			val1-=1





		val1=ind+1
		val2=int(p2)

		while 1:
			if not val1>7:

				c=0
				for i in dict_:
					if dict_[i][0]==str(al[val1])+str(val2):

						col=i.split("_")[0]
						typ=i.split("_")[1]

						if col=="w":
							ar7.append("_"+str(al[val1])+str(val2))
						
						c=1
						break

				if c==1:
					break

				ar7.append(str(al[val1])+str(val2))

			else:
				break


			val1+=1








		val1=ind-1
		val2=int(p2)+1

		while 1:
			if val1<0:
				break

			

			c=0
			for i in dict_:
				if dict_[i][0]==str(al[val1])+str(val2):

					col=i.split("_")[0]
					typ=i.split("_")[1]

					if col=="w":
						ar1.append("_"+str(al[val1])+str(val2))
					c=1
					break

			if c==1:
				break
				

			if not val2>8:
				ar1.append(str(al[val1])+str(val2))


			val2+=1
			val1-=1



		val1=ind-1
		val3=int(p2)-1

		while 1:
			if val1<0:
				break
			c=0
			for i in dict_:
				if dict_[i][0]==str(al[val1])+str(val3):
					col=i.split("_")[0]
					typ=i.split("_")[1]

					if col=="w":
						ar2.append("_"+str(al[val1])+str(val3))
					c=1
					break

			if c==1:
				break


			if not val3<1:
				ar2.append(str(al[val1])+str(val3))

			

			val1-=1
			val3-=1




		val1=ind+1
		val2=int(p2)+1

		while 1:
			if val1>7:
				break

			c=0
			for i in dict_:
				if dict_[i][0]==str(al[val1])+str(val2):

					col=i.split("_")[0]
					typ=i.split("_")[1]

					if col=="w":
						ar3.append("_"+str(al[val1])+str(val2))
					c=1
					break

			if c==1:
				break



			if not val2>8:
				ar3.append(str(al[val1])+str(val2))

			val2+=1
			val1+=1



		val1=ind+1
		val3=int(p2)-1
		while 1:
			
			if val1>7:
				break
			c=0

			for i in dict_:
				if dict_[i][0]==str(al[val1])+str(val3):

					col=i.split("_")[0]
					typ=i.split("_")[1]

					if col=="w":
						ar4.append("_"+str(al[val1])+str(val3))
					c=1
					break

			if c==1:
				break

			if not val3<1:
				ar4.append(str(al[val1])+str(val3))

			val1+=1
			val3-=1

		arz=ar1+ar2+ar3+ar4+ar5+ar6+ar7+ar8
	return arz

def val_bishop(pos,col):
	global al
	arz=[]
	p1=pos[0]
	p2=pos[1]

	if col=="w":
		ar1=[]
		ar2=[]
		ar3=[]
		ar4=[]
		ind=al.index(p1)

		val1=ind-1
		val2=int(p2)+1

		while 1:
			if val1<0:
				break

			

			c=0
			for i in dict_:
				if dict_[i][0]==str(al[val1])+str(val2):

					col=i.split("_")[0]
					typ=i.split("_")[1]

					if col=="b":
						ar1.append("_"+str(al[val1])+str(val2))
					
					c=1
					break

			if c==1:
				break
				

			if not val2>8:
				ar1.append(str(al[val1])+str(val2))


			val2+=1
			val1-=1



		val1=ind-1
		val3=int(p2)-1

		while 1:
			if val1<0:
				break
			c=0
			for i in dict_:
				if dict_[i][0]==str(al[val1])+str(val3):
					col=i.split("_")[0]
					typ=i.split("_")[1]

					if col=="b":
						ar2.append("_"+str(al[val1])+str(val3))
					c=1
					break

			if c==1:
				break


			if not val3<1:
				ar2.append(str(al[val1])+str(val3))

			

			val1-=1
			val3-=1




		val1=ind+1
		val2=int(p2)+1

		while 1:
			if val1>7:
				break

			c=0
			for i in dict_:
				if dict_[i][0]==str(al[val1])+str(val2):

					col=i.split("_")[0]
					typ=i.split("_")[1]

					if col=="b":
						ar3.append("_"+str(al[val1])+str(val2))
					c=1
					break

			if c==1:
				break



			if not val2>8:
				ar3.append(str(al[val1])+str(val2))

			val2+=1
			val1+=1



		val1=ind+1
		val3=int(p2)-1
		while 1:
			
			if val1>7:
				break
			c=0

			for i in dict_:
				if dict_[i][0]==str(al[val1])+str(val3):

					col=i.split("_")[0]
					typ=i.split("_")[1]

					if col=="b":
						ar4.append("_"+str(al[val1])+str(val3))
					c=1
					break

			if c==1:
				break

			if not val3<1:
				ar4.append(str(al[val1])+str(val3))

			val1+=1
			val3-=1

		arz=ar1+ar2+ar3+ar4


	elif col=="b":
		ar1=[]
		ar2=[]
		ar3=[]
		ar4=[]
		ind=al.index(p1)

		val1=ind-1
		val2=int(p2)+1

		while 1:
			if val1<0:
				break

			

			c=0
			for i in dict_:
				if dict_[i][0]==str(al[val1])+str(val2):

					col=i.split("_")[0]
					typ=i.split("_")[1]

					if col=="w":
						ar1.append("_"+str(al[val1])+str(val2))
					c=1
					break

			if c==1:
				break
				

			if not val2>8:
				ar1.append(str(al[val1])+str(val2))


			val2+=1
			val1-=1



		val1=ind-1
		val3=int(p2)-1

		while 1:
			if val1<0:
				break
			c=0
			for i in dict_:
				if dict_[i][0]==str(al[val1])+str(val3):
					col=i.split("_")[0]
					typ=i.split("_")[1]

					if col=="w":
						ar2.append("_"+str(al[val1])+str(val3))
					c=1
					break

			if c==1:
				break


			if not val3<1:
				ar2.append(str(al[val1])+str(val3))

			

			val1-=1
			val3-=1




		val1=ind+1
		val2=int(p2)+1

		while 1:
			if val1>7:
				break

			c=0
			for i in dict_:
				if dict_[i][0]==str(al[val1])+str(val2):

					col=i.split("_")[0]
					typ=i.split("_")[1]

					if col=="w":
						ar3.append("_"+str(al[val1])+str(val2))
					c=1
					break

			if c==1:
				break



			if not val2>8:
				ar3.append(str(al[val1])+str(val2))

			val2+=1
			val1+=1



		val1=ind+1
		val3=int(p2)-1
		while 1:
			
			if val1>7:
				break
			c=0

			for i in dict_:
				if dict_[i][0]==str(al[val1])+str(val3):

					col=i.split("_")[0]
					typ=i.split("_")[1]

					if col=="w":
						ar4.append("_"+str(al[val1])+str(val3))
					c=1
					break

			if c==1:
				break

			if not val3<1:
				ar4.append(str(al[val1])+str(val3))

			val1+=1
			val3-=1

		arz=ar1+ar2+ar3+ar4

	return arz

def val_pawn(pos,col):
	global al,dict_
	arz=[]

	p1=pos[0]
	p2=pos[1]

	moved=dict_[sel_piece][1]

	if col=="w":
		if moved==0:
			con=0
			for i in dict_:
				if dict_[i][0]==str(p1)+str(int(p2)+1):
					con=1
			if con==0:
				arz.append(str(p1)+str(int(p2)+1))
				cx=0
				for i in dict_:
					if dict_[i][0]==str(p1)+str(int(p2)+2):
						cx=1

				if cx==0:
					arz.append(str(p1)+str(int(p2)+2))


		else:
			con=0
			for i in dict_:
				if dict_[i][0]==str(p1)+str(int(p2)+1):
					con=1
			if con==0:
				arz.append(str(p1)+str(int(p2)+1))	

		index_=al.index(p1)


		if index_==0:
			v1=""
			v2=str(al[index_+1])+str(int(p2)+1)
		elif index_==7:
			v1=str(al[index_-1])+str(int(p2)+1)
			v2=""

		else:
			v1=str(al[index_-1])+str(int(p2)+1)
			v2=str(al[index_+1])+str(int(p2)+1)

		for i in dict_:
			if dict_[i][0]==v1:
				typ=i.split("_")[1]
				col_=i.split("_")[0]


				if not col_=="w":
					arz.append("_"+str(dict_[i][0]))  
			if dict_[i][0]==v2:
				typ=i.split("_")[1]
				col_=i.split("_")[0]


				if not col_=="w":
					arz.append("_"+str(dict_[i][0])) 
		



	elif col=="b":
		if moved==0:
			con=0
			for i in dict_:
				if dict_[i][0]==str(p1)+str(int(p2)-1):
					con=1
			if con==0:
				arz.append(str(p1)+str(int(p2)-1))
				cx=0
				for i in dict_:
					if dict_[i][0]==str(p1)+str(int(p2)-2):
						cx=1

				if cx==0:
					arz.append(str(p1)+str(int(p2)-2))



		else:
			con=0
			for i in dict_:
				if dict_[i][0]==str(p1)+str(int(p2)-1):
					con=1
			if con==0:
				arz.append(str(p1)+str(int(p2)-1))	

		index_=al.index(p1)


		if index_==0:
			v1=""
			v2=str(al[index_+1])+str(int(p2)-1)
		elif index_==7:
			v1=str(al[index_-1])+str(int(p2)-1)
			v2=""

		else:
			v1=str(al[index_-1])+str(int(p2)-1)
			v2=str(al[index_+1])+str(int(p2)-1)

		for i in dict_:
			if dict_[i][0]==v1:
				typ=i.split("_")[1]
				col_=i.split("_")[0]


				if not col_=="b":
					arz.append("_"+str(dict_[i][0]))
			if dict_[i][0]==v2:
				typ=i.split("_")[1]
				col_=i.split("_")[0]


				if not col_=="b":
					arz.append("_"+str(dict_[i][0])) 

	return arz





def get_pos(e):
	global st,st2,sel_piece,turn,ar,posz, selp,ava,red_,ars,ars_,can

	x=e.x
	y=e.y




	if x<20:
		pass
	elif x<=(20+82.5):
		x="a"
	elif x<=(20+82.5*2):
		x="b"
	elif x<=(20+82.5*3):
		x="c"
	elif x<=(20+82.5*4):
		x="d"
	elif x<=(20+82.5*5):
		x="e"
	elif x<=(20+82.5*6):
		x="f"
	elif x<=(20+82.5*7):
		x="g"
	elif x<=(20+82.5*8):
		x="h"


	if st==1:
		if y<20:
			pass
		elif 20<=y<=(20+82.5):
			y="8"
		elif y<=(20+82.5*2):
			y="7"		
		elif y<=(20+82.5*3):
			y="6"
		elif y<=(20+82.5*4):
			y="5"
		elif y<=(20+82.5*5):
			y="4"
		elif y<=(20+82.5*6):
			y="3"
		elif y<=(20+82.5*7):
			y="2"
		elif y<=(20+82.5*8):
			y="1"
	elif st==0:
		if y<20:
			pass
		elif y<=(20+82.5):
			y="1"
		elif y<=(20+82.5*2):
			y="2"		
		elif y<=(20+82.5*3):
			y="3"
		elif y<=(20+82.5*4):
			y="4"
		elif y<=(20+82.5*5):
			y="5"
		elif y<=(20+82.5*6):
			y="6"
		elif y<=(20+82.5*7):
			y="7"
		elif y<=(20+82.5*8):
			y="8"

	def show_pos(ar_):

		for i in ar_:
			
			if i[0]=="_":
				red_.append(i.split("_")[1])
			else:
				ava.append(i)


		main()	



	def check_():

		v1=dict_["w_king"][0]
		v2=dict_["b_king"][0]
		s=0
		att=""



		for i in dict_:
			col=i.split("_")[0]
			if col=="w":
				v=v2
			elif col=="b":
				v=v1 

			po=dict_[i][0]
			typ=i.split("_")[1]

			if not po=="x":

				if typ=="pawn":
					arv=val_pawn(po,col)
				elif typ=="bishop":
					arv=val_bishop(po,col)				
				elif typ=="knight":
					arv=val_knight(po,col)
				elif typ=="rook":
					arv=val_rook(po,col)
				elif typ=="queen":
					arv=val_queen(po,col)
				elif typ=="king":
					arv=val_king(po,col)


				for a in range(len(arv)):

					if arv[a]=="_"+v:
						#print("check!")
						att=i
						s=1
						red_.append(v)
						main()

						arb=[]

						posx=int(v[1])
						posy=int(po[1])

						b1=al.index(v[0])
						b2=al.index(po[0])


						typ=i.split("_")[1]



						cx=b1+1
						cy=posx-1

						if typ=="knight":
							ars.append(dict_[i][0])

						else:

							if b2>b1:
								if posy<posx:

									while 1:
										ars.append(al[cx]+str(cy))

										if cx==b2:
											break
										cx+=1
										cy-=1

								

								elif posx==posy:
									cx=b1+1

									while 1:
										ars.append(al[cx]+str(posx))

										if cx==b2:
											break
										cx+=1



								elif posx<posy:
									cx=b1+1
									cy=posx+1

									while 1:
										ars.append(al[cx]+str(cy))

										if cx==b2:
											break

										cx+=1
										cy+=1

							elif b1==b2:
								if posx<posy:
									cy=posx+1

									while 1:
										ars.append(al[b1]+str(cy))

										if cy==posy:
											break

										cy+=1
								elif posx>posy:
									cy=posx-1

									while 1:
										ars.append(al[b1]+str(cy))

										if cy==posy:
											break

										cy-=1
							elif b1>b2:
								if posx>posy:
									cx=b1-1
									cy=posx-1

									while 1:
										ars.append(al[cx]+str(cy))

										if cx==b2:
											break

										cx-=1
										cy-=1
								elif posx==posy:
									cx=b1-1

									while 1:
										ars.append(al[cx]+str(posx))

										if cx==b2:
											break

										cx-=1

								elif posy>posx:
									cx=b1-1
									cy=posx+1

									while 1:
										ars.append(al[cx]+str(cy))

										if cx==b2:
											break

										cx-=1
										cy+=1


		return [s,att]

		



	try:
		pos=x+y


		selp=pos
		ava=[]
		red_=[]
		main()

		if st2==1:

			s=check_()[0]
			if s==1:
				st2=2

				cona=0

				type_=sel_piece.split("_")[1]
				if type_=="king":

					for a in range(len(ar)):
						if ar[a]==pos:
							cona=1
							dict_[sel_piece][0]=pos


							g=check_()[0]

							if g==0:
								selp=""
								ava=[]
								red_=[]						

								if turn=="w":
									turn="b"
								elif turn=="b":
									turn="w" 
								st2=0		
							main()

					if not cona==1:

						ary=val_king(dict_[sel_piece][0],sel_piece.split("_")[0])
						att=check_()[1]

						for a in range(len(ary)):
							if ary[a]=="_"+ars_[0]:

								for t in range(len(ar)):

									if ar[t][0]=="_":
										valz=ar[t].split("_")[1]
									else:
										valz=ar[t]

									if pos==valz:

										for i in dict_:
											if dict_[i][0]==pos:
												dict_[i][0]="x"

										dict_[sel_piece][0]=pos




								g=check_()[0]

								if g==0:
									selp=""
									ava=[]
									red_=[]						

									if turn=="w":
										turn="b"
									elif turn=="b":
										turn="w" 
									st2=0		
								main()




				else:
					for a in range(len(ars)):
						if pos==ars[a]:


							for i in dict_:

								typ=sel_piece.split("_")[1]
								col=sel_piece.split("_")[0]
								pp=dict_[sel_piece][0]

								if not pp=="x":
									if typ=="pawn":
										arv=val_pawn(pp,col)
									elif typ=="bishop":
										arv=val_bishop(pp,col)				
									elif typ=="knight":
										arv=val_knight(pp,col)
									elif typ=="rook":
										arv=val_rook(pp,col)
									elif typ=="queen":
										arv=val_queen(pp,col)
									elif typ=="king":
										arv=[]
									

									for a in range(len(arv)):
										if arv[a]=="_"+pos:
											for i in dict_:
												if dict_[i][0]==pos:
													dict_[i][0]="x"

											dict_[sel_piece][0]=pos





		

							typ=sel_piece.split("_")[1]
							col=sel_piece.split("_")[0]
							if len(ars)>1:
								for a in range(len(ars)-1):
									if pos==ars[a]:
										if typ=="knight":
											art=val_knight(dict_[sel_piece][0],col)

											for a in range(len(art)):
												for b in range(len(ars)):
													if art[a]==ars[b]:
														dict_[sel_piece][0]=pos
										else:
											dict_[sel_piece][0]=pos


							g=check_()[0]

							if g==0:
								selp=""
								ava=[]
								red_=[]						

								if turn=="w":
									turn="b"
								elif turn=="b":
									turn="w" 
								st2=0		
							main()



			else:

				typ=sel_piece.split("_")[1]
				col=sel_piece.split("_")[0]

				if turn==col:


					con=0
					for a in ar:
						if a[0]=="_":
							a=a.split("_")[1]
						if a ==pos:
							con=1

							for i in dict_:
								if dict_[i][0]==pos:
									dict_[i][0]="x"


							dict_[sel_piece][0]=pos
							if typ=="pawn":
								dict_[sel_piece][1]=1
							elif typ=="king":
								dict_[sel_piece][1]=1
							elif typ=="rook":
								dict_[sel_piece][1]=1
							
							if turn=="w":
								turn="b"
								vv=dict_["b_king"][0]
							elif turn=="b":
								turn="w" 
								vv=dict_["w_king"][0]

							selp=""

							main()
							st2=0
							#pos=0


					if con==0:
						st2=0
				else:
					st2=0

				s=check_()[0]
				if s==1:
					st2=2

		
		if st2==2:

			arm=[]
			


			for i in dict_:
				col=i.split("_")[0]
				po_=dict_[i][0]
				typ=i.split("_")[1]

				if turn==col:

					if not po_=="x":

						if typ=="pawn":
							arv=val_pawn(po_,col)
						elif typ=="bishop":
							arv=val_bishop(po_,col)				
						elif typ=="knight":
							arv=val_knight(po_,col)
						elif typ=="rook":
							arv=val_rook(po_,col)
						elif typ=="queen":
							arv=val_queen(po_,col)
						elif typ=="king":
							arv=val_king(po_,col)

						for a in range(len(arv)):
							for b in range(len(ars)):
								if arv[a][0]=="_":
									val=arv[a].split("_")[1]
								else:
									val=arv[a]

								if val==ars[b]:
									if not typ=="king":
										arm.append(1)


			if turn=="w":
				k="w_king"
			elif turn=="b":
				k="b_king"

			ppos=dict_[k][0]
			arq=val_king(ppos,turn)


			for a in range(len(arq)):

				if arq[a][0]=="_":
					val=arq[a].split("_")[1]
				else:
					val=arq[a]

				dict_[k][0]=val

				d=check_()[0]

				if not d==1:
					arm.append(1)
					

			
			dict_[k][0]=ppos
			red_=[]
			main()
			mate=len(arm)
			check_()

			av_=[]	
			ars_=ars



			

			for i in dict_:
				col=i.split("_")[0]



				if turn==col:

					pl=dict_[i][0]
					typ=i.split("_")[1]

					if dict_[i][0]==pos:
						sel_piece=i


					if not pl=="x":

						if typ=="pawn":
							arv=val_pawn(pl,col)
						elif typ=="bishop":
							arv=val_bishop(pl,col)				
						elif typ=="knight":
							arv=val_knight(pl,col)
						elif typ=="rook":
							arv=val_rook(pl,col)
						elif typ=="queen":
							arv=val_queen(pl,col)
						elif typ=="king":
							arv=[]


						for a in range(len(arv)):
							for o in range(len(ars)):

								if arv[a][0]=="_":
									val=arv[a].split("_")[1]
									if val==ars[-1]:
										av_.append(i)
								else:
									if arv[a]==ars[o]:
										av_.append(i)




			for i in dict_:
				if dict_[i][0]==pos:



					for a in range(len(av_)):
						if i==av_[a]:
							typ=i.split("_")[1]
							col=i.split("_")[0]

							if not pos=="x":

								if typ=="pawn":
									arv=val_pawn(pos,col)
								elif typ=="bishop":
									arv=val_bishop(pos,col)				
								elif typ=="knight":
									arv=val_knight(pos,col)
								elif typ=="rook":
									arv=val_rook(pos,col)
								elif typ=="queen":
									arv=val_queen(pos,col)
								elif typ=="king":
									arv=[]

								ar=[]





								for a in range(len(arv)):
									for b in range(len(ars)):

										if arv[a][0]=="_":
											val=arv[a].split("_")[1]
											if val==ars[b]:
												ar.append("_"+ars[b])
												red_.append(ars[b])
												show_pos(ar)
												mate=1												
										else:
											val=arv[a]
											if val==ars[b]:
												ar.append(ars[b])
												show_pos(ar)
												mate=1





			col=sel_piece.split("_")[0]
			type_=sel_piece.split("_")[1]
			if type_=="king":
				if dict_[sel_piece][0]==pos:
					arq=val_king(pos,col)
					ar=[]
					arw=[]


					ppos=dict_[sel_piece][0]
					

					for a in range(len(arq)):

						if arq[a][0]=="_":
							val=arq[a].split("_")[1]
						else:
							val=arq[a]

						dict_[sel_piece][0]=val

						d=check_()[0]

						if not d==1:
							ar.append(arq[a])
							


					red_=[]

					dict_[sel_piece][0]=ppos


					show_pos(ar)



			st2=1
			ars=[]
			if mate==0:
				st2=3


		if st2==3:
			print("check mate!")

			#turn="mate"

		
			selp=""
			ava=[]
			red_=[dict_[turn+"_king"][0]]
			main()

		if st2==0:
			sel_piece=""
			for a in dict_:
				if dict_[a][0]==pos:
					con=1
					sel_piece=a
					ppos=dict_[sel_piece][0]


					moved=dict_[sel_piece][1]
					type_=sel_piece.split("_")[1]
					col=sel_piece.split("_")[0]
					ar=[]


					main()

					


					p1=ppos[0]
					p2=ppos[1]
					x=pos[0]
					y=pos[1]




					if turn==col:

						dict_[sel_piece][0]="x"
						w=check_()[0]
						at=check_()[1]
						if w==1:
							#print("cant move!")
							dict_[sel_piece][0]=pos
							red_=[]


							type_=sel_piece.split("_")[1]

							if type_=="king":
								arc=val_king(pos,col)
							elif type_=="knight":
								arc=val_knight(pos,col)
							elif type_=="rook":
								arc=val_rook(pos,col)
							elif type_=="queen":
								arc=val_queen(pos,col)
							elif type_=="bishop":
								arc=val_bishop(pos,col)
							elif type_=="pawn":
								arc=val_pawn(pos,col)

							for a in range(len(arc)):
								if arc[a]=="_"+dict_[at][0]:
									ar=["_"+dict_[at][0]]
									show_pos(ar)
									st2=1


							main()
						else:
							dict_[sel_piece][0]=pos


							if type_=="king":

								arq=val_king(pos,col)
								ar=[]
								arw=[]


								ppos=dict_[sel_piece][0]
								

								for a in range(len(arq)):

									l=0

									if arq[a][0]=="_":
										val=arq[a].split("_")[1]
										l=1
									else:
										val=arq[a]


									dict_[sel_piece][0]=val

									d=check_()[0]

									if not d==1:
										ar.append(arq[a])




								red_=[]

								dict_[sel_piece][0]=ppos


								show_pos(ar)
								st2=1				


							elif type_=="knight":
								ar=val_knight(pos,col)
								show_pos(ar)
								st2=1	

							elif type_=="rook":
								ar=val_rook(pos,col)
								show_pos(ar)
								st2=1	


							elif type_=="queen":
								ar=val_queen(pos,col)
								show_pos(ar)
								st2=1	



							elif type_=="bishop":
								ar=val_bishop(pos,col)
								show_pos(ar)
								st2=1		




							elif type_=="pawn":
								ar=val_pawn(pos,col)
								show_pos(ar)
								st2=1




	except:
		pass

def get_pos2(e):
	global can2,side_,st, white_,black_,ran1,ran2,cpu

	xq,yq=700-350-200,720-360-100+20-100
	xq+100,440-100


	if e.x>=xq+100 and e.x<=xq+300:
		if e.y>=340 and e.y<=370:

			if not side_=="":

				if side_=="random":
					aa=random.randint(0,1)
					if aa==0:
						st=0
						cpu="w"
						best_move()

					elif aa==1:
						st=1
						cpu="b"


				if side_=="white":
					st=1
					cpu="b"
				elif side_=="black":
					st=0
					cpu="w"
					best_move()

				main()
				can2.place_forget()
				white_.place_forget()
				black_.place_forget()
				ran1.place_forget()
				ran2.place_forget()


def best_move():
	global cpu,can,st2,turn
	print(cpu)


root=t.Tk()
root.geometry("700x720+50+50")
root.resizable(0,0)
root.title("hchess")

can=t.Canvas(width=700,height=720,bg="#ffffff",relief="flat",highlightthickness=0,border=0)
can.place(in_=root,x=0,y=0)
can.bind("<Button-1>",get_pos)

turnl=()
cpu=""

st=1
st2=0
sel_piece=""
turn="w"
ar=[]
posz=()
selp=""
ava=[]
red_=[]
ars=[]
ars_=[]
al=["a","b","c","d","e","f","g","h"]


dict_={
		"w_pawn_1":["a2",0],
		"w_pawn_2":["b2",0],
		"w_pawn_3":["c2",0],
		"w_pawn_4":["d2",0],
		"w_pawn_5":["e2",0],
		"w_pawn_6":["f2",0],
		"w_pawn_7":["g2",0],
		"w_pawn_8":["h2",0],

		"w_rook_1":["a1",0],
		"w_bishop_1":["c1",0],
		"w_knight_1":["b1",0],
		"w_queen":["d1",0],
		"w_king":["e1",0],
		"w_knight_2":["g1",0],
		"w_bishop_2":["f1",0],
		"w_rook_2":["h1",0],


		"b_pawn_1":["a7",0],
		"b_pawn_2":["b7",0],
		"b_pawn_3":["c7",0],
		"b_pawn_4":["d7",0],
		"b_pawn_5":["e7",0],
		"b_pawn_6":["f7",0],
		"b_pawn_7":["g7",0],
		"b_pawn_8":["h7",0],

		"b_rook_1":["a8",0],
		"b_bishop_1":["c8",0],
		"b_knight_1":["b8",0],
		"b_queen":["d8",0],
		"b_king":["e8",0],
		"b_knight_2":["g8",0],
		"b_bishop_2":["f8",0],
		"b_rook_2":["h8",0],


		}

def draw_pawn2(col,x,y,cc):
	global can2,st

	sz=82.5

	x1=x
	y1=y
	x2=x+82.5
	y2=y+82.5


	if col==0:
		col="#ffffff"
		col2="#111111"
	elif col==1:
		col="#111111"
		col2="#ffffff"


	cc.create_oval(x1+(sz/2)-10,y1+5, x2-(sz/2)+10,y1+25 ,fill=col,outline=col2,width=1 )
	cc.create_oval(x1+(sz/2)-15,y1+25-3, x2-(sz/2)+15,y1+55-3 ,fill=col,outline=col2,width=1 )
	cc.create_arc(x1+(sz/2)-25,y1+55-6, x2-(sz/2)+25,y1+105-6,start=0,extent=180,fill=col,outline=col2,width=1 )


	cc.create_oval(x1+(sz/2)-10+6,y1+5+13, x2-(sz/2)+10-6,y1+25-12+13 ,fill=col,outline=col,width=1 )

	cc.create_oval(x1+(sz/2)-10+5,y1+5+39, x2-(sz/2)+10-5,y1+25-8+39 ,fill=col,outline=col,width=1 )




def rann(e):
	global black_,white_,ran1,ran2,side_

	black_["bg"]="#573a2e"
	white_["bg"]="#573a2e"
	ran1["bg"]="#30938c"
	ran2["bg"]="#30938c"
	side_="random"



#573a2e
can2=t.Canvas(width=700,height=720,bg="#111111",relief="flat",highlightthickness=0,border=0)
can2.place(in_=root,x=0,y=0)
can2.bind("<Button-1>",get_pos2,)

xq,yq=700-350-200,720-360-100+20-100



can2.create_oval(xq,yq,xq+20,yq+20,fill="#fccc74",outline="#fccc74")
can2.create_oval(xq+400,yq+20,xq-20+400,yq,fill="#fccc74",outline="#fccc74")

can2.create_oval(xq,yq+200, xq+20,yq+200-20,fill="#fccc74",outline="#fccc74")

can2.create_oval(xq+400,yq+200,  xq+400-20,yq+200-20,fill="#fccc74")
can2.create_polygon(xq+10,yq, xq+400-10,yq, xq+400,yq+10, xq+400,yq+200-10,
	xq+400-10,yq+200, xq+10,yq+200, xq,yq+200-10, xq,yq+10,fill="#fccc74",outline="#fccc74")

can2.create_text(xq+200,yq+16,text="play as",font=("FreeMono","15","bold"),fill="#573a2e")


can2.create_text(xq+79.375,409+5-100,text="White",fill="#573a2e",font=("FreeMono","13",))
can2.create_text(xq+200,409+5-100,text="Random",fill="#573a2e",font=("FreeMono","13",))
can2.create_text(xq+320.625,409+5-100,text="Black",fill="#573a2e",font=("FreeMono","13",))

ll=200
can2.create_oval(xq+200-(ll/2),440-100, xq+200-(ll/2)+30,440+30-100,fill="green",outline="green")
can2.create_oval(xq+200+(ll/2),440-100, xq+200+(ll/2)-30,440+30-100,fill="green",outline="green")
can2.create_rectangle(xq+200-(ll/2)+15,440-100,  xq+200+(ll/2)-30+15,440+30-100,fill="green",outline="green")

can2.create_text(xq+200,440+15-100,text="PLAY NOW",font=("FreeMono","13",),fill="#f3f3f3")

def swhite(e):
	global black_,white_,ran1,ran2,side_

	black_["bg"]="#573a2e"
	white_["bg"]="#30938c"
	ran1["bg"]="#573a2e"
	ran2["bg"]="#573a2e"
	side_="white"

def sblack(e):
	global black_,white_,ran1,ran2,side_

	black_["bg"]="#30938c"
	white_["bg"]="#573a2e"
	ran1["bg"]="#573a2e"
	ran2["bg"]="#573a2e"
	side_="black"



white_=t.Canvas(width=82.5,height=82.5,bg="#573a2e",relief="flat",highlightthickness=0,border=0)
white_.place(in_=root,x=xq+38.125,y=215)
white_.bind("<Button-1>",swhite)

black_=t.Canvas(width=82.5,height=82.5,bg="#573a2e",relief="flat",highlightthickness=0,border=0)
black_.place(in_=root,x=xq+279.375,y=215)
black_.bind("<Button-1>",sblack)

draw_pawn2(0,0,0,white_)
draw_pawn2(1,0,0,black_)


ran1=t.Canvas(width=(82.5/2),height=82.5,bg="#573a2e",relief="flat",highlightthickness=0,border=0)
ran1.place(in_=root,x=xq+158.75,y=215)
ran1.bind("<Button-1>",rann)

ran2=t.Canvas(width=(82.5/2),height=82.5,bg="#573a2e",relief="flat",highlightthickness=0,border=0)
ran2.place(in_=root,x=xq+158.75+(82.5/2),y=215)
ran2.bind("<Button-1>",rann)

draw_pawn2(0,0,0,ran1)
draw_pawn2(1,-(82.5/2),0,ran2)

sell_=()
side_=""
#draw_pawn2(0,"d5")

#can2.create_rectangle(x)



main()
root.mainloop()