
#stockfish.is_move_correct('a2a3')
#stockfish.get_board_visual()


import tkinter as tk
import math
import random
import os
from PIL import Image, ImageDraw, ImageTk, ImageGrab
from PIL import ImageColor
import time
import chess
from stockfish import Stockfish


board_ar=[]
flag=0

tp_st=0
def main():
	global can,st,state,cpu,user,board_ar,pmoves,click,user_move,sel_,col,turn,flag,moves

	

	can.delete("all")

	al="abcdefgh"




	board=str(stockfish.get_board_visual()).replace("+","")
	board=board.replace("-","")
	board=board.replace(" ","")



	board_ar=[]

	ar=board.split("\n")
	ar.pop(-1)
	ar.pop(-1)
	for a in ar:
		a_=a.split("|")

		try:
			a_.pop(0)
			a_.pop(-1)
		except:
			pass

		if not len(a_)==0:
			board_ar.append(a_)


	con=0

	y_=8
	for y in range(8):

		for x in range(8):

			if board_ar[y][x]=="k":
				bking=al[x]+str(y_)

			elif board_ar[y][x]=="K":

				wking=al[x]+str(y_)

		y_-=1









	fen=stockfish.get_fen_position()

	board = chess.Board(fen)


	s=fen.split(" ")[1]

	if board.is_check()==True:

		if s=="w":

			p=wking

			cx,cy=getxy_from_pos(p[0],p[1])[:2]
		elif s=="b":

			p=bking

			cx,cy=getxy_from_pos(p[0],p[1])[:2]

		con=1
		flag=1
	else:
		flag=0






	draw_board()












	




	board_col=[]

	if cpu=="b":
		bst=1
	else:
		bst=0


	for y in range(8):

		ar=[]

		for x in range(8):

			ar.append(bst)

			if not x==7:

				if bst==0:
					bst=1
				elif bst==1:
					bst=0

		board_col.append(ar)


	def draw_bg(p,c,colv):
		global col



		bc=board_col[al.index(p[0])][int(p[1])-1]



		if bc==0:
			col_=col[0]
		elif bc==1:
			col_=col[1]

		rgb=ImageColor.getcolor(col_, "RGB")



		nrgb=(int((rgb[0]+colv[0])/2),int((rgb[1]+colv[1])/2),int((rgb[2]+colv[2])/2))

		ncol='#%02x%02x%02x' % nrgb

		x,y=getxy_from_pos(p[0],p[1])[:2]
		if y<0:
			y=-y



		check=check_piece_with_pos(p)

		if check[0]==1 and c==1:
				ncol="#ff5757"


		can.create_rectangle(x,y,x-82.5,y-82.5,fill=ncol,outline=ncol)
	
	if sel_!="":
		draw_bg(sel_,0,[120, 254, 39])



	if len(moves)>0 and click==0:

		ppos=moves[-1][:2]
		cpos=moves[-1][2:][:2]




		draw_bg(ppos,0,[255,255,0])
		draw_bg(cpos,0,[255,255,0])


	for m in pmoves:


		p=m[2:][:2]

		draw_bg(p,1,[120, 254, 39])












	if con==1:

		can.create_rectangle(cx,cy, cx-82.5,cy-82.5, fill="#ff5757",outline="#ff5757")

























	py=8


	for y in range(8):


		for x in range(8):




			pos=al[x]+str(py)

			if board_ar[y][x]=="r":
				col_=1
				typ="rook"

			elif board_ar[y][x]=="R":
				col_=0
				typ="rook"


			elif board_ar[y][x]=="n":
				col_=1
				typ="knight"

			elif board_ar[y][x]=="N":
				col_=0
				typ="knight"


			elif board_ar[y][x]=="b":
				col_=1
				typ="bishop"

			elif board_ar[y][x]=="B":
				col_=0
				typ="bishop"


			elif board_ar[y][x]=="q":
				col_=1
				typ="queen"

			elif board_ar[y][x]=="Q":
				col_=0
				typ="queen"


			elif board_ar[y][x]=="k":
				col_=1
				typ="king"

			elif board_ar[y][x]=="K":
				col_=0
				typ="king"


			elif board_ar[y][x]=="p":
				col_=1
				typ="pawn"

			elif board_ar[y][x]=="P":
				col_=0
				typ="pawn"

			elif board_ar[y][x]=="":
				continue

			xx,yy=getxy_from_pos(pos[0],pos[1])




			if typ=="pawn":
				draw_pawn(xx,yy,col_)
			elif typ=="rook":
				draw_rook(xx,yy,col_)
			elif typ=="king":
				draw_king(xx,yy,col_)
			elif typ=="bishop":
				draw_bishop(xx,yy,col_)
			elif typ=="queen":
				draw_queen(xx,yy,col_)
			elif typ=="knight":
				draw_knight(xx,yy,col_)

		py-=1



	_board_ = chess.Board()

	try:
		for move in moves:
			_board_.push_uci(move)
	except ValueError as e:
		pass
	    #return f"Invalid move sequence: {e}"

	con=0

	if _board_.is_checkmate():
		fen=stockfish.get_fen_position()
		s=fen.split(" ")[1]

		if s=="w":
			winner="b"
		elif s=="b":
			winner="w"

		if winner==user:
			statement="Checkmate. You win!"
		else:
			statement="Checkmate. You lose!"


		state="gameover"

		con=1
	elif _board_.is_stalemate():
		state="gameover"
		statement="Draw by stalemate!"

		con=1


	elif _board_.is_insufficient_material():
		
		statement="Draw by insufficient material!"
		state="gameover"

		con=1

	elif _board_.is_seventyfive_moves():
		statement="Draw by seventy-five moves rule!"
		state="gameover"

		con=1

	elif _board_.is_fivefold_repetition():
		statement="Draw by fivefold repetition!"
		state="gameover"

		con=1

	elif _board_.is_game_over():
		statement="Game over for another reason!"
		state="gameover"

		con=1







	if con==1:

		xx,yy=496,150

		x_=(700-xx)/2
		y_=(700-yy)/2



		draw_transparent_bg(700,700,0,0,15,"#000000",0.5,0)
		draw_transparent_bg(xx,yy,x_,y_,15,"#000000",0.9,1)

		can.create_text(x_+xx/2,y_+(yy-40)/2,text=statement,font=("FreeMono",18),fill="#ffffff")


		
		can.create_line(x_,y_+yy-40, x_+xx,y_+yy-40,fill="#555555")
		can.create_line(350,y_+yy-40, 350,y_+yy, fill="#555555")

		can.create_text(x_+xx/4,y_+yy-20, text="New Game",font=("FreeMono",13),fill="#ffffff")
		can.create_text(350+xx/4,y_+yy-20, text="Quit",font=("FreeMono",13),fill="#999999")



	
	if state=="transform_pawn":




		xx,yy=496,300

		x_=(700-xx)/2
		y_=(700-yy)/2


		draw_transparent_bg(700,700,0,0,15,"#000000",0.5,0)
		draw_transparent_bg(xx,yy,x_,y_,15,"#000000",0.9,1)


		can.create_text(350,y_+30,text="Transform Pawn",font=("FreeMono",14),fill="#ffffff")

		global tp_st




		xv=(xx-82.5*4)/5






		if tp_st==1:
			sel(x_+xv,y_+100)
		elif tp_st==2:
			sel(x_+xv*2+82.5,y_+100)
		elif tp_st==3:
			sel(x_+xv*3+82.5*2,y_+100)
		elif tp_st==4:
			sel(x_+xv*4+82.5*3,y_+100)






		if user=="w":
			clr=0
		elif user=="b":
			clr=1


		draw_queen(x_+xv+82.5,y_+100+82.5,clr)
		draw_rook(x_+xv*2+82.5+82.5,y_+100+82.5,clr)
		draw_knight(x_+xv*3+82.5*2+82.5,y_+100+82.5,clr)
		draw_bishop(x_+xv*4+82.5*3+82.5,y_+100+82.5,clr)



		can.create_line(x_,y_+yy-40, x_+xx,y_+yy-40,fill="#555555")
		




		can.create_text(350,y_+yy-20,text="OK",font=("FreeMono",13),fill="#ffffff")


	elif state=="quit":


		xx,yy=496,150

		x_=(700-xx)/2
		y_=(700-yy)/2


		draw_transparent_bg(700,700,0,0,15,"#000000",0.5,0)
		draw_transparent_bg(xx,yy,x_,y_,15,"#000000",0.9,1)

		can.create_text(350,y_+(yy-40)/2,text="Are you sure you want to quit?",font=("FreeMono",14),fill="#ffffff")

		can.create_line(x_,y_+yy-40, x_+xx,y_+yy-40,fill="#555555")
		can.create_line(350,y_+yy-40, 350,y_+yy, fill="#555555")




		
		can.create_text(x_+xx/4,y_+yy-20, text="YES",font=("FreeMono",13),fill="#ffffff")
		can.create_text(350+xx/4,y_+yy-20, text="NO",font=("FreeMono",13),fill="#999999")





	global quit,undo,wd



	x=(wd-740)/2
	root.geometry("740x700+"+str(int(x))+"+0" )

	quit=ImageTk.PhotoImage(file="data/quit.png")
	undo=ImageTk.PhotoImage(file="data/undo.png")

	can.create_rectangle(700,0,740,700,fill="blue",outline="blue")

	can.create_rectangle(700,0, 740,75,fill=col[1],outline=col[1])

	ar=[700,75]

	a_=180
	for a in range(90):

		x=10*math.sin(math.radians(a_))+700+10
		y=10*math.cos(math.radians(a_))+75+10

		ar.append(x)
		ar.append(y)

		a_+=1


	can.create_polygon(ar,fill=col[1],outline=col[1])



	ar=[740,75]

	a_=90
	for a in range(90):

		x=10*math.sin(math.radians(a_))+740-10
		y=10*math.cos(math.radians(a_))+75-10

		ar.append(x)
		ar.append(y)

		a_-=1



	can.create_polygon(ar,fill="blue",outline="blue")


	can.create_image(700+5,5,image=quit,anchor="nw")
	can.create_image(700+5,5+30+5,image=undo,anchor="nw")






cpu_st=0
def cpu_move():
	global state,moves,cpu_st,turn,user,start_time

	if state=="game" and cpu_st==1:# and time.time()>=start_time+1:

		main()



		if len(moves)>0:
			stockfish.set_position(moves)



		res=stockfish.get_best_move()

		moves.append(res)

		stockfish.set_position(moves)

		

		
		cpu_st=0
		
		turn=user
		main()
		

		

		







	root.after(1000,cpu_move)


def check_piece_with_pos(p):
	global board_ar

	al="abcdefgh"

	xx=al.find(p[0])

	yy=int(p[1])-8

	if yy<0:
		yy=-yy


	if board_ar[yy][xx]=="":
		return [0,""]
	else:
		return [1,board_ar[yy][xx]]






click=0
user_move=""
pmoves=[]

sel_=""
pstate=""


qst=0
def can_b1(e):
	global difficulty,state,moves,cpu_st,click,board_ar,user_move,pmoves,sel_,pstate
	global user,turn,st
	global start_time
	global tp_st, sel_side
	global flag,difficulty
	global qst
	global col,bg_sel


	if state=="intro":
		

		if 164.125<=e.x<=246.625:
			if 180+3<=e.y<=262.5+3:

				sel_side=1
				intro()

				return


		if 308.75<=e.x<=391.25:
			if 180+3<=e.y<=262.5+3:

				sel_side=2
				intro()

				return


		if 453.375<=e.x<=535.875:
			if 180+3<=e.y<=262.5+3:

				sel_side=3
				intro()

				return



		if 159.125-5<=e.x<=540.875+5:
			if 350-10-3+3+20<=e.y<=350+10-3+3+20:


				x=e.x-159.125-5+408.925/21

				difficulty=x*21/408.925


				if difficulty<1:
					difficulty=1
				if difficulty>20:
					difficulty=20


				intro()




		#310 552.0 390 582.0


		if 310<=e.x<=390:
			if 552<=e.y<=582:
				start_game()


		cx,cy=310,552+15

		r=math.sqrt((cx-e.x)**2+(cy-e.y)**2)

		if r<=15:
			start_game()




		cx,cy=390,552+15

		r=math.sqrt((cx-e.x)**2+(cy-e.y)**2)

		if r<=15:
			start_game()






		if 161.125<=e.x<=267.125:
			if 457.0+3<=e.y<=513.0+3:
				bg_sel=1
				col=["#B1E4B9","#70A2A3"]

				intro()

		if 297.0<=e.x<=403.0:
			if 457.0+3<=e.y<=513.0+3:
				bg_sel=2
				col=["#eedc97","#8c6c34"]

				intro()

		if 432.875<=e.x<=535.875:
			if 457.0+3<=e.y<=513.0+3:
				bg_sel=3
				col=["#cccccc","#7c7c7c"]

				intro()


	elif state=="transform_pawn":
		
		if 135.2<=e.x<=217.7:
			if 300.0<=e.y<=382.5:

				tp_st=1

				main()


		if 250.9<=e.x<=333.4:
			if 300.0<=e.y<=382.5:

				tp_st=2

				main()


		if 366.6<=e.x<=449.1:
			if 300.0<=e.y<=382.5:

				tp_st=3

				main()


		if 482.3<=e.x<=564.8:
			if 300.0<=e.y<=382.5:

				tp_st=4

				main()








		p=""
		if 102<=e.x<=598:
			if 460<=e.y<=500:

				


				if tp_st==1:
					p="q"

				elif tp_st==2:
					p="r"

				elif tp_st==3:
					p="n"

				elif tp_st==4:
					p="b"




		if not p=="":

			user_move+=p

			moves.append(user_move)

			stockfish.set_position(moves)

			state="game"

			

			user_move=""
			pmoves=[]
			click=0
			cpu_st=1

			start_time=time.time()

			turn=cpu

			sel_=""

			tp_st=0

			main()

	elif state=="game" and turn==user:


		if 20<=e.x<=700:

			x=e.x
			y=e.y





			if st==1:

				if x<20:
					pass
				elif x<=(20+82.5):
					x="a"
				elif x<=(20+82.5*2):
					x="b"
				elif x<=(20+82.5*3):
					x="c"
				elif x<=(20+82.5*4):
					x="d"
				elif x<=(20+82.5*5):
					x="e"
				elif x<=(20+82.5*6):
					x="f"
				elif x<=(20+82.5*7):
					x="g"
				elif x<=(20+82.5*8):
					x="h"


				if y<20:
					pass
				elif 20<=y<=(20+82.5):
					y="8"
				elif y<=(20+82.5*2):
					y="7"		
				elif y<=(20+82.5*3):
					y="6"
				elif y<=(20+82.5*4):
					y="5"
				elif y<=(20+82.5*5):
					y="4"
				elif y<=(20+82.5*6):
					y="3"
				elif y<=(20+82.5*7):
					y="2"
				elif y<=(20+82.5*8):
					y="1"
			elif st==0:


				if x<20:
					pass
				elif x<=(20+82.5):
					x="h"
				elif x<=(20+82.5*2):
					x="g"
				elif x<=(20+82.5*3):
					x="f"
				elif x<=(20+82.5*4):
					x="e"
				elif x<=(20+82.5*5):
					x="d"
				elif x<=(20+82.5*6):
					x="c"
				elif x<=(20+82.5*7):
					x="b"
				elif x<=(20+82.5*8):
					x="a"


				if y<20:
					pass
				elif y<=(20+82.5):
					y="1"
				elif y<=(20+82.5*2):
					y="2"		
				elif y<=(20+82.5*3):
					y="3"
				elif y<=(20+82.5*4):
					y="4"
				elif y<=(20+82.5*5):
					y="5"
				elif y<=(20+82.5*6):
					y="6"
				elif y<=(20+82.5*7):
					y="7"
				elif y<=(20+82.5*8):
					y="8"



			pos=x+y


			sel_=pos






			check=check_piece_with_pos(pos)


			if click==1:


					try:
						v=pmoves.index(user_move+pos)

						cp=check_piece_with_pos(user_move)



						if cp[1].lower()=="p":
							if pos[-1]=="8" or pos[-1]=="1" :
								state="transform_pawn"

								user_move+=pos

								main()

								

								return





						#############

						user_move+=pos

						moves.append(user_move)

						stockfish.set_position(moves)

						user_move=""
						pmoves=[]
						click=0
						cpu_st=1

						start_time=time.time()

						turn=cpu

						sel_=""
					except:
						user_move=""
						pmoves=[]
						click=0



			if click==0:

				if check[0]==0:

					user_move=""
					click=0
				else:

					if click==0:


						user_move=str(pos)


						pmoves=[]

						def possible_moves(user_move):
							global pmoves

							al="abcdefgh"

							y_=8

							for y in range(8):

								for x in range(8):

									xx=al[x]


									p=user_move+xx+str(y_)


									if stockfish.is_move_correct(p)==True:
										pmoves.append(p)

									elif stockfish.is_move_correct(p+"q")==True:
										pmoves.append(p)


								y_-=1





						possible_moves(user_move)


						if len(pmoves)>0:
							click=1







			main()













	if state=="game" or state=="transform_pawn" or state=="gameover" or state=="quit":


		cx,cy=720,20

		r=math.sqrt( (cx-e.x)**2 + (cy-e.y)**2 )

		if r<=16:
			if qst==0:
				pstate=state
			state="quit"

			


			if qst==0:
				qst=1
			elif qst==1:
				qst=0





			main()

			



		cx,cy=720,55

		r=math.sqrt( (cx-e.x)**2 + (cy-e.y)**2 )

		if r<=16:
			try:


				if turn==user:

					if cpu=="w" and len(moves)==1:
						pass

						

					elif cpu=="b" and len(moves)==1: 
						moves.pop(-1)
					else:

						moves.pop(-1)
						moves.pop(-1)


					turn=user

					if state=="transform_pawn" or state=="gameover":
						state="game"


					stockfish.set_position(moves)

					pmoves=[]

					main()
			except:
				pass


	





	if state=="quit" and qst==1:



		if 102<=e.x<=350:
			if 385<=e.y<=425:

				board_ar=[]
				flag=0


				click=0
				user_move=""
				pmoves=[]

				sel_=""
				pstate=""
				sel_side=2

				turn="x"

				difficulty=1
				qst=0


				intro()







		if 350<=e.x<=598:
			if 385<=e.y<=425:

				state="game"
				qst=0

				main()

		cx,cy=382.33333333333363+15,375+15


	if state=="quit" and qst==0:
		state=pstate


		main()

















	if state=="gameover":



		if 102<=e.x<=350:
			if 385<=e.y<=425:

				board_ar=[]
				flag=0


				click=0
				user_move=""
				pmoves=[]

				sel_=""
				pstate=""
				sel_side=2

				turn="x"

				difficulty=1
				qst=0


				intro()








		if 350<=e.x<=598:
			if 385<=e.y<=425:

				root.quit()








def draw_pawn2(x,y,col_):
	global st,can,col

	sz=75



	x1=x-sz-3.75
	x2=x-3.75
	y1=y-sz-3.75
	y2=y-3.75


	if col_==0:
		col1="#ffffff"
		col2=col[1]
	elif col_==1:
		col1="#000000"
		col2=col[0]


	can.create_arc(x1+(sz/2)-10*0.9090909091,y1+5*0.9090909091, x2-(sz/2)+10*0.9090909091,y1+25*0.9090909091, start=270,extent=180,fill=col1,outline=col2,width=1 )
	can.create_arc(x1+(sz/2)-15*0.9090909091,y1+(25-3)*0.9090909091, x2-(sz/2)+15*0.9090909091,y1+(55-3)*0.9090909091, start=270,extent=180 ,fill=col1,outline=col2,width=1 )
	can.create_arc(x1+(sz/2)-25*0.9090909091,y1+(55-6)*0.9090909091-2, x2-(sz/2)+25*0.9090909091,y1+(105-6)*0.9090909091-2,start=0,extent=90,fill=col1,outline=col2,width=1 )
	
	can.create_arc(x1+(sz/2)+(-10+6)*0.9090909091-1+2,y1+(5+13)*0.9090909091, x2-(sz/2)+(10-6)*0.9090909091+1,y1+(25-12+13)*0.9090909091, start=270,extent=180 ,fill=col1,outline=col1,width=1 )
	can.create_arc(x1+(sz/2)+(-10+5)*0.9090909091-1+2,y1+(5+39)*0.9090909091-2, x2-(sz/2)+(10-5)*0.9090909091+1+1,y1+(25-8+39)*0.9090909091-2, start=270,extent=180 ,fill=col1,outline=col1,width=1 )





def draw_pawn1(x,y,col_):
	global st,can,col

	sz=75




	x1=x-sz-3.75
	x2=x-3.75
	y1=y-sz-3.75
	y2=y-3.75


	if col_==0:
		col1="#ffffff"
		col2=col[1]
	elif col_==1:
		col1="#000000"
		col2=col[0]


	can.create_arc(x1+(sz/2)-10*0.9090909091,y1+5*0.9090909091, x2-(sz/2)+10*0.9090909091,y1+25*0.9090909091, start=90,extent=180,fill=col1,outline=col2,width=1 )
	can.create_arc(x1+(sz/2)-15*0.9090909091,y1+(25-3)*0.9090909091, x2-(sz/2)+15*0.9090909091,y1+(55-3)*0.9090909091, start=90,extent=180 ,fill=col1,outline=col2,width=1 )
	can.create_arc(x1+(sz/2)-25*0.9090909091,y1+(55-6)*0.9090909091-2, x2-(sz/2)+25*0.9090909091,y1+(105-6)*0.9090909091-2,start=90,extent=90,fill=col1,outline=col2,width=1 )
	
	can.create_arc(x1+(sz/2)+(-10+6)*0.9090909091-1,y1+(5+13)*0.9090909091, x2-(sz/2)+(10-6)*0.9090909091+1-2,y1+(25-12+13)*0.9090909091, start=90,extent=180 ,fill=col1,outline=col1,width=1 )
	can.create_arc(x1+(sz/2)+(-10+5)*0.9090909091-1-1,y1+(5+39)*0.9090909091-2, x2-(sz/2)+(10-5)*0.9090909091+1-2,y1+(25-8+39)*0.9090909091-2, start=90,extent=180 ,fill=col1,outline=col1,width=1 )









def draw_pawn(x,y,col_):
	global st,can,col

	sz=75



	x1=x-sz-3.75
	x2=x-3.75
	y1=y-sz-3.75
	y2=y-3.75


	if col_==0:
		col1="#ffffff"
		col2=col[1]
	elif col_==1:
		col1="#000000"
		col2=col[0]


	can.create_oval(x1+(sz/2)-10*0.9090909091,y1+5*0.9090909091, x2-(sz/2)+10*0.9090909091,y1+25*0.9090909091 ,fill=col1,outline=col2,width=1 )
	can.create_oval(x1+(sz/2)-15*0.9090909091,y1+(25-3)*0.9090909091, x2-(sz/2)+15*0.9090909091,y1+(55-3)*0.9090909091 ,fill=col1,outline=col2,width=1 )
	can.create_arc(x1+(sz/2)-25*0.9090909091,y1+(55-6)*0.9090909091-2, x2-(sz/2)+25*0.9090909091,y1+(105-6)*0.9090909091,start=0,extent=180,fill=col1,outline=col2,width=1 )
	
	can.create_oval(x1+(sz/2)+(-10+6)*0.9090909091-1,y1+(5+13)*0.9090909091, x2-(sz/2)+(10-6)*0.9090909091+1,y1+(25-12+13)*0.9090909091 ,fill=col1,outline=col1,width=1 )
	can.create_oval(x1+(sz/2)+(-10+5)*0.9090909091-1-1,y1+(5+39)*0.9090909091-2, x2-(sz/2)+(10-5)*0.9090909091+1+1,y1+(25-8+39)*0.9090909091-2 ,fill=col1,outline=col1,width=1 )


def draw_rook(x,y,col_):
	global st,can,col



	sz=75



	x1=x-sz-3.75
	x2=x-3.75

	y1=y-sz-3.75
	y2=y-3.75


	if col_==0:
		col1="#ffffff"
		col2=col[1]
	elif col_==1:
		col1="#000000"
		col2=col[0]


	can.create_polygon(x1+(sz/2),y1+5*0.9090909091,x1+(sz/2)-7*0.9090909091,y1+5*0.9090909091, x1+(sz/2)-7*0.9090909091,y1+(5+5)*0.9090909091, x1+(sz/2)+(-7-14+5)*0.9090909091,y1+(5+5)*0.9090909091,
	 x1+(sz/2)+(-7-14+5)*0.9090909091,y1+5*0.9090909091,  x1+(sz/2)+(-7-14-14+5)*0.9090909091,y1+5*0.9090909091, x1+(sz/2)+(-7-14-14+5)*0.9090909091,y1+(5+10)*0.9090909091, x2-(sz/2)+(7+14+14-5)*0.9090909091,y1+(5+10)*0.9090909091,
	 x2-(sz/2)+(7+14+14-5)*0.9090909091,y1+5*0.9090909091,x2-(sz/2)+(7+14-5)*0.9090909091,y1+5*0.9090909091,x2-(sz/2)+(7+14-5)*0.9090909091,y1+(5+5)*0.9090909091,x2-(sz/2)+7*0.9090909091,y1+(5+5)*0.9090909091,x2-(sz/2)+7*0.9090909091,y1+5*0.9090909091,
	 x1+(sz/2),y1+5*0.9090909091,fill=col1,outline=col2,width=1)

	can.create_polygon(x1+(sz/2)+(-7-14-14+5)*0.9090909091,y1+(5+10)*0.9090909091, x1+(sz/2)+(-7-14-14+5+5+2)*0.9090909091,y1+(5+10+5+3-3)*0.9090909091,
		x2-(sz/2)+(7+14+14-5-5-2)*0.9090909091,y1+(5+10+5+3-3)*0.9090909091,x2-(sz/2)+(7+14+14-5)*0.9090909091,y1+(5+10)*0.9090909091, fill=col1,outline=col2,width=1)

	can.create_rectangle(x1+(sz/2)+(-7-14-10+5+2)*0.9090909091,y1+(5+10+5+3-3)*0.9090909091, x2-(sz/2)+(7+14+10-5-2)*0.9090909091,y2+(-5-5-5-5-3+3)*0.9090909091,fill=col1,outline=col2,width=1)

	can.create_polygon(x1+(sz/2)+(-7-14-14+5)*0.9090909091,y2+(-5-5-5)*0.9090909091, x1+(sz/2)+(-7-14-14+5+5+2)*0.9090909091,y2+(-5-5-5-5-3+3)*0.9090909091,
		x2-(sz/2)+(7+14+10-5-2)*0.9090909091,y2+(-5-5-5-5-3+3)*0.9090909091, x2-(sz/2)+(7+14+14-5)*0.9090909091,y2+(-5-5-5)*0.9090909091 ,fill=col1,outline=col2,width=1)

	can.create_polygon(x2-(sz/2)+(7+14+10)*0.9090909091,y2+(-5-5-5)*0.9090909091, x2-(sz/2)+(7+14+10)*0.9090909091,y2+(-5-5)*0.9090909091,
		x1+(sz/2)+(-7-14-10)*0.9090909091,y2+(-5-5)*0.9090909091,x1+(sz/2)+(-7-14-10)*0.9090909091,y2+(-5-5-5)*0.9090909091,x2-(sz/2)+(7+14+10)*0.9090909091,y2+(-5-5-5)*0.9090909091,fill=col1,outline=col2,width=1)

	can.create_polygon(x1+(sz/2)+(-7-14-14)*0.9090909091,y2-5*0.9090909091, x1+(sz/2)+(-7-14-14-3+3)*0.9090909091,y2+(-5-5)*0.9090909091,
		x2-(sz/2)+(7+14+14)*0.9090909091,y2+(-5-5)*0.9090909091, x2-(sz/2)+(7+14+14)*0.9090909091,y2-5*0.9090909091,x1+(sz/2)+(-7-14-14)*0.9090909091,y2-5*0.9090909091,fill=col1,outline=col2,width=1)


def draw_king(x,y,col_):
	global st,can,col


	sz=75

	x1=x-sz-3.75
	x2=x-3.75
	y1=y-sz-3.75
	y2=y-3.75


	if col_==0:
		col1="#ffffff"
		col2=col[1]
	elif col_==1:
		col1="#000000"
		col2=col[0]


	ar1=[x1+13.360323886639675, y1+65.89068825910931, x1+13.360323886639675, y1+64.37246963562752, x1+13.663967611336034, y1+62.24696356275304, x1+13.663967611336034, y1+60.425101214574894, x1+13.663967611336034, y1+58.906882591093115, x1+13.663967611336034, y1+56.78137651821863, x1+13.663967611336034, y1+54.655870445344135, x1+13.360323886639675, y1+53.4412955465587, x1+13.360323886639675, y1+51.61943319838057, x1+13.056680161943321, y1+50.10121457489879, x1+11.234817813765181, y1+47.064777327935225, x1+10.020242914979757, y1+45.24291497975709, x1+7.894736842105263, y1+42.51012145748988, x1+5.465587044534412, y1+39.170040485829965, x1+4.554655870445345, y1+37.34817813765182, x1+3.3400809716599187, y1+35.526315789473685, x1+3.0364372469635628, y1+33.70445344129555, x1+3.0364372469635628, y1+30.36437246963563, x1+3.6437246963562755, y1+28.238866396761136, x1+4.554655870445345, y1+26.113360323886642, x1+5.465587044534412, y1+24.898785425101217, x1+6.0728744939271255, y1+23.987854251012145, x1+6.983805668016195, y1+23.07692307692308, x1+8.502024291497975, y1+22.16599190283401, x1+10.020242914979757, y1+21.558704453441294, x1+12.753036437246964, y1+20.951417004048583, x1+15.182186234817815, y1+20.951417004048583, x1+17.611336032388664, y1+21.25506072874494, x1+20.040485829959515, y1+21.862348178137648, x1+21.862348178137648, y1+22.469635627530362, x1+25.20242914979757, y1+24.291497975708502, x1+28.238866396761136, y1+26.72064777327935, x1+30.97165991902834, y1+29.149797570850204, x1+33.097165991902834, y1+31.57894736842105, x1+34.91902834008098, y1+34.61538461538462, x1+36.43724696356276, y1+37.65182186234818, x1+37.65182186234818, y1+41.902834008097166, x1+37.65182186234818, y1+41.902834008097166, x1+37.65182186234818, y1+43.724696356275295, x1+37.65182186234818, y1+46.15384615384616, x1+37.65182186234818, y1+46.15384615384616, x1+37.65182186234818, y1+41.29554655870445, x1+37.65182186234818, y1+41.29554655870445, x1+38.8663967611336, y1+37.65182186234818, x1+40.08097165991903, y1+34.91902834008098, x1+41.59919028340081, y1+32.18623481781376, x1+43.724696356275295, y1+29.757085020242915, x1+45.850202429149796, y1+27.327935222672068, x1+48.582995951417004, y1+25.20242914979757, x1+51.012145748987855, y1+23.684210526315788, x1+54.35222672064777, y1+22.16599190283401, x1+57.99595141700404, y1+20.951417004048583, x1+61.639676113360316, y1+20.951417004048583, x1+64.97975708502024, y1+21.862348178137648, x1+66.80161943319838, y1+22.469635627530362, x1+68.92712550607288, y1+24.595141700404856, x1+70.14170040485831, y1+26.113360323886642, x1+71.35627530364373, y1+29.453441295546558, x1+71.65991902834008, y1+32.48987854251012, x1+71.05263157894737, y1+35.526315789473685, x1+71.05263157894737, y1+35.526315789473685, x1+68.92712550607288, y1+39.473684210526315, x1+66.19433198380567, y1+43.42105263157895, x1+66.19433198380567, y1+43.42105263157895, x1+63.46153846153846, y1+47.064777327935225, x1+61.94331983805668, y1+49.79757085020243, x1+61.639676113360316, y1+50.708502024291505, x1+61.33603238866397, y1+53.13765182186235, x1+61.032388663967616, y1+56.47773279352227, x1+61.032388663967616, y1+59.817813765182194, x1+61.33603238866397, y1+62.24696356275304, x1+61.639676113360316, y1+65.2834008097166, x1+60.425101214574894, y1+66.19433198380567, x1+57.388663967611336, y1+67.4089068825911, x1+53.4412955465587, y1+68.62348178137651, x1+49.19028340080971, y1+69.53441295546558, x1+44.939271255060724, y1+69.83805668016196, x1+44.939271255060724, y1+69.83805668016196, x1+39.77732793522267, y1+70.14170040485831, x1+32.79352226720648, y1+70.14170040485831, x1+27.024291497975707, y1+69.83805668016196, x1+22.16599190283401, y1+68.92712550607288, x1+18.82591093117409, y1+68.0161943319838, x1+15.789473684210526, y1+66.80161943319838, x1+13.360323886639675, y1+66.19433198380567, x1+13.360323886639675, y1+66.19433198380567]
	ar2=[x1+13.360323886639675, y1+65.89068825910931, x1+14.878542510121457, y1+64.37246963562752, x1+16.700404858299596, y1+63.1578947368421, x1+18.522267206477736, y1+61.94331983805668, x1+21.558704453441294, y1+60.72874493927126, x1+24.291497975708502, y1+60.12145748987855, x1+28.238866396761136, y1+59.21052631578947, x1+32.48987854251012, y1+58.906882591093115, x1+39.473684210526315, y1+58.60323886639677, x1+44.939271255060724, y1+59.21052631578947, x1+49.493927125506076, y1+59.817813765182194, x1+53.744939271255056, y1+61.032388663967616, x1+56.78137651821863, y1+61.94331983805668, x1+58.906882591093115, y1+63.1578947368421, x1+60.425101214574894, y1+64.06882591093118, x1+61.94331983805668, y1+65.2834008097166]
	ar3=[x1+13.96761133603239, y1+58.29959514170041, x1+17.00404858299595, y1+56.78137651821863, x1+21.25506072874494, y1+55.5668016194332, x1+25.20242914979757, y1+54.655870445344135, x1+30.668016194331987, y1+54.04858299595141, x1+35.22267206477733, y1+53.744939271255056, x1+38.56275303643724, y1+53.4412955465587, x1+44.02834008097166, y1+53.744939271255056, x1+49.19028340080971, y1+54.655870445344135, x1+53.13765182186235, y1+55.5668016194332, x1+57.99595141700404, y1+56.78137651821863, x1+57.99595141700404, y1+56.78137651821863, x1+61.032388663967616, y1+58.29959514170041]
	ar4=[x1+12.753036437246964, y1+49.19028340080971, x1+17.30769230769231, y1+47.97570850202429, x1+23.07692307692308, y1+47.064777327935225, x1+27.024291497975707, y1+46.76113360323886, x1+33.097165991902834, y1+46.15384615384616, x1+33.097165991902834, y1+46.15384615384616, x1+36.43724696356276, y1+46.15384615384616, x1+38.25910931174089, y1+46.15384615384616, x1+41.902834008097166, y1+46.15384615384616, x1+47.97570850202429, y1+46.4574898785425, x1+50.708502024291505, y1+46.76113360323886, x1+53.13765182186235, y1+47.064777327935225, x1+57.08502024291498, y1+47.97570850202429, x1+59.817813765182194, y1+48.88663967611336, x1+61.94331983805668, y1+50.10121457489879]
	ar5=[x1+37.65182186234818, y1+41.902834008097166, x1+35.82995951417004, y1+36.74089068825911, x1+34.0080971659919, y1+33.097165991902834, x1+31.275303643724698, y1+29.149797570850204, x1+30.668016194331987, y1+27.631578947368418, x1+30.060728744939276, y1+23.684210526315788, x1+30.36437246963563, y1+20.040485829959515, x1+31.57894736842105, y1+17.611336032388664, x1+32.79352226720648, y1+16.09311740890688, x1+34.61538461538462, y1+14.574898785425102, x1+37.04453441295547, y1+13.96761133603239, x1+38.56275303643724, y1+13.96761133603239, x1+40.38461538461538, y1+14.878542510121457, x1+42.81376518218623, y1+16.700404858299596, x1+43.724696356275295, y1+18.82591093117409, x1+44.635627530364374, y1+22.16599190283401, x1+44.635627530364374, y1+24.898785425101217, x1+44.02834008097166, y1+27.024291497975707, x1+43.42105263157895, y1+29.757085020242915, x1+42.20647773279352, y1+31.57894736842105, x1+41.29554655870445, y1+32.79352226720648, x1+40.08097165991903, y1+35.22267206477733, x1+38.8663967611336, y1+37.34817813765182, x1+37.95546558704453, y1+40.38461538461538, x1+37.65182186234818, y1+41.59919028340081]
	ar6=[x1+36.43724696356276, y1+13.96761133603239, x1+36.43724696356276, y1+8.502024291497975, x1+32.184394552815604, y1+8.502024291497975, x1+32.184394552815604, y1+6.0728744939271255, x1+36.43724696356276, y1+6.0728744939271255, x1+36.43724696356276, y1+2.732793522267206, x1+38.8663967611336, y1+2.732793522267206, x1+38.8663967611336, y1+6.0728744939271255, x1+43.42105263157895, y1+6.0728744939271255, x1+43.42105263157895, y1+8.502024291497975, x1+38.8663967611336, y1+8.502024291497975, x1+38.8663967611336, y1+13.96761133603239]


	can.create_polygon(ar1,fill=col1,outline=col2,width=1)
	can.create_line(ar2,fill=col2,width=1)
	can.create_line(ar3,fill=col2,width=1)
	can.create_line(ar4,fill=col2,width=1)
	can.create_polygon(ar5,fill=col1,outline=col2,width=1)
	can.create_polygon(ar6,fill=col1,outline=col2,width=1)


def draw_bishop(x,y,col_):
	global st,can,col


	sz=75

	x1=x-sz-3.75
	x2=x-3.75
	y1=y-sz-3.75
	y2=y-3.75


	if col_==0:
		col1="#ffffff"
		col2=col[1]
	elif col_==1:
		col1="#000000"
		col2=col[0]


	ar1=[x1+8.932584269662922, y1+73.14606741573034, x1+8.595505617977528, y1+72.97752808988764, x1+8.42696629213483, y1+72.80898876404494, x1+8.258426966292134, y1+72.64044943820225, x1+7.9213483146067425, y1+72.47191011235955, x1+7.752808988764045, y1+72.30337078651685, x1+7.584269662921348, y1+72.13483146067415, x1+7.415730337078652, y1+71.96629213483145, x1+7.247191011235955, y1+71.79775280898876, x1+7.078651685393259, y1+71.62921348314606, x1+6.910112359550562, y1+71.46067415730337, x1+6.741573033707865, y1+71.29213483146067, x1+6.573033707865169, y1+71.12359550561797, x1+6.404494382022472, y1+70.95505617977528, x1+6.235955056179776, y1+70.78651685393258, x1+6.067415730337078, y1+70.6179775280899, x1+5.8988764044943816, y1+70.4494382022472, x1+5.730337078651685, y1+70.28089887640449, x1+5.561797752808989, y1+70.1123595505618, x1+5.393258426966292, y1+69.94382022471909, x1+5.224719101123595, y1+69.7752808988764, x1+5.056179775280898, y1+69.6067415730337, x1+4.887640449438202, y1+69.43820224719101, x1+4.7191011235955065, y1+69.26966292134831, x1+4.550561797752809, y1+69.10112359550563, x1+4.382022471910113, y1+68.93258426966293, x1+4.213483146067415, y1+68.76404494382022, x1+4.044943820224719, y1+68.59550561797754, x1+3.8764044943820224, y1+68.42696629213484, x1+3.707865168539326, y1+68.25842696629213, x1+3.5393258426966296, y1+68.08988764044945, x1+3.3707865168539324, y1+67.92134831460675, x1+3.3707865168539324, y1+67.75280898876404, x1+3.202247191011236, y1+67.58426966292134, x1+3.033707865168539, y1+67.41573033707864, x1+2.8651685393258424, y1+67.24719101123596, x1+2.8651685393258424, y1+67.07865168539325, x1+2.8651685393258424, y1+66.91011235955057, x1+2.8651685393258424, y1+66.74157303370787, x1+3.033707865168539, y1+66.57303370786516, x1+3.033707865168539, y1+66.40449438202246, x1+3.202247191011236, y1+66.23595505617976, x1+3.202247191011236, y1+66.06741573033707, x1+3.3707865168539324, y1+65.89887640449437, x1+3.5393258426966296, y1+65.73033707865169, x1+3.707865168539326, y1+65.561797752809, x1+3.8764044943820224, y1+65.39325842696628, x1+4.213483146067415, y1+65.2247191011236, x1+4.382022471910113, y1+65.0561797752809, x1+4.550561797752809, y1+64.88764044943821, x1+4.7191011235955065, y1+64.71910112359551, x1+4.887640449438202, y1+64.5505617977528, x1+5.224719101123595, y1+64.38202247191012, x1+5.393258426966292, y1+64.21348314606742, x1+5.730337078651685, y1+64.04494382022472, x1+5.8988764044943816, y1+63.87640449438202, x1+6.067415730337078, y1+63.70786516853933, x1+6.404494382022472, y1+63.539325842696634, x1+6.573033707865169, y1+63.37078651685394, x1+6.910112359550562, y1+63.20224719101124, x1+7.247191011235955, y1+63.03370786516854, x1+7.415730337078652, y1+62.86516853932585, x1+7.752808988764045, y1+62.69662921348315, x1+8.089887640449438, y1+62.52808988764044, x1+8.42696629213483, y1+62.35955056179777, x1+8.764044943820226, y1+62.19101123595507, x1+9.101123595505618, y1+62.02247191011236, x1+9.438202247191013, y1+61.85393258426966, x1+9.943820224719103, y1+61.685393258426956, x1+10.280898876404494, y1+61.51685393258427, x1+10.786516853932584, y1+61.34831460674157, x1+11.123595505617978, y1+61.17977528089887, x1+11.629213483146069, y1+61.011235955056186, x1+12.134831460674157, y1+60.84269662921347, x1+12.808988764044944, y1+60.674157303370784, x1+13.48314606741573, y1+60.50561797752809, x1+14.157303370786519, y1+60.337078651685395, x1+14.831460674157304, y1+60.1685393258427, x1+16.01123595505618, y1+60.0, x1+18.202247191011235, y1+59.8314606741573, x1+28.48314606741573, y1+59.662921348314605, x1+29.325842696629216, y1+59.49438202247191, x1+30.0, y1+59.325842696629216, x1+30.505617977528093, y1+59.157303370786515, x1+31.01123595505618, y1+58.98876404494383, x1+31.348314606741575, y1+58.82022471910113, x1+31.68539325842697, y1+58.65168539325843, x1+32.02247191011236, y1+58.48314606741573, x1+32.19101123595506, y1+58.314606741573044, x1+32.359550561797754, y1+58.14606741573034, x1+31.68539325842697, y1+57.97752808988764, x1+31.01123595505618, y1+57.80898876404495, x1+30.337078651685392, y1+57.640449438202246, x1+29.662921348314608, y1+57.471910112359545, x1+29.157303370786522, y1+57.30337078651685, x1+28.651685393258425, y1+57.13483146067416, x1+28.146067415730336, y1+56.96629213483146, x1+27.640449438202246, y1+56.79775280898876, x1+27.134831460674153, y1+56.629213483146074, x1+26.629213483146067, y1+56.460674157303366, x1+26.292134831460675, y1+56.29213483146067, x1+25.786516853932582, y1+56.12359550561798, x1+25.44943820224719, y1+55.955056179775276, x1+25.1123595505618, y1+55.78651685393259, x1+24.775280898876407, y1+55.61797752808989, x1+24.269662921348313, y1+55.4494382022472, x1+23.93258426966292, y1+55.28089887640449, x1+23.595505617977526, y1+55.112359550561806, x1+23.258426966292138, y1+54.94382022471909, x1+22.92134831460674, y1+54.7752808988764, x1+22.584269662921347, y1+54.60674157303371, x1+22.41573033707865, y1+54.438202247191015, x1+22.078651685393258, y1+54.269662921348306, x1+21.91011235955056, y1+54.10112359550562, x1+21.741573033707866, y1+53.93258426966292, x1+21.741573033707866, y1+53.764044943820224, x1+21.573033707865168, y1+53.59550561797753, x1+21.573033707865168, y1+53.426966292134836, x1+21.573033707865168, y1+53.258426966292134, x1+21.573033707865168, y1+53.08988764044943, x1+21.573033707865168, y1+52.92134831460674, x1+21.573033707865168, y1+52.75280898876405, x1+21.573033707865168, y1+52.58426966292135, x1+21.741573033707866, y1+52.41573033707865, x1+21.741573033707866, y1+52.24719101123595, x1+21.741573033707866, y1+52.07865168539326, x1+21.741573033707866, y1+51.91011235955055, x1+21.741573033707866, y1+51.741573033707866, x1+21.91011235955056, y1+51.573033707865164, x1+21.91011235955056, y1+51.40449438202247, x1+21.91011235955056, y1+51.235955056179776, x1+21.91011235955056, y1+51.06741573033708, x1+22.078651685393258, y1+50.89887640449438, x1+22.078651685393258, y1+50.73033707865168, x1+22.078651685393258, y1+50.56179775280899, x1+22.078651685393258, y1+50.39325842696629, x1+22.247191011235955, y1+50.2247191011236, x1+22.247191011235955, y1+50.05617977528091, x1+22.247191011235955, y1+49.88764044943821, x1+22.247191011235955, y1+49.7191011235955, x1+22.41573033707865, y1+49.55056179775281, x1+22.41573033707865, y1+49.38202247191011, x1+22.41573033707865, y1+49.21348314606742, x1+22.41573033707865, y1+49.044943820224724, x1+22.584269662921347, y1+48.87640449438203, x1+22.584269662921347, y1+48.70786516853933, x1+22.584269662921347, y1+48.53932584269663, x1+22.584269662921347, y1+48.370786516853926, x1+22.752808988764045, y1+48.20224719101123, x1+22.752808988764045, y1+48.03370786516854, x1+22.752808988764045, y1+47.86516853932584, x1+22.752808988764045, y1+47.69662921348315, x1+22.752808988764045, y1+47.52808988764045, x1+22.92134831460674, y1+47.35955056179775, x1+22.92134831460674, y1+47.19101123595505, x1+22.92134831460674, y1+47.02247191011236, x1+23.089887640449437, y1+46.853932584269664, x1+23.089887640449437, y1+46.68539325842697, x1+23.089887640449437, y1+46.516853932584276, x1+23.089887640449437, y1+46.34831460674157, x1+23.089887640449437, y1+46.17977528089887, x1+23.258426966292138, y1+46.01123595505618, x1+23.258426966292138, y1+45.84269662921348, x1+23.258426966292138, y1+45.674157303370784, x1+23.258426966292138, y1+45.50561797752809, x1+23.426966292134832, y1+45.337078651685395, x1+23.426966292134832, y1+45.168539325842694, x1+23.426966292134832, y1+45.0, x1+23.426966292134832, y1+44.8314606741573, x1+23.595505617977526, y1+44.662921348314605, x1+23.595505617977526, y1+44.49438202247191, x1+23.595505617977526, y1+44.32584269662922, x1+23.595505617977526, y1+44.157303370786515, x1+23.426966292134832, y1+43.98876404494382, x1+23.258426966292138, y1+43.82022471910112, x1+23.089887640449437, y1+43.651685393258425, x1+22.92134831460674, y1+43.48314606741573, x1+22.584269662921347, y1+43.31460674157304, x1+22.41573033707865, y1+43.146067415730336, x1+22.247191011235955, y1+42.97752808988764, x1+22.078651685393258, y1+42.80898876404494, x1+21.741573033707866, y1+42.640449438202246, x1+21.573033707865168, y1+42.47191011235955, x1+21.40449438202247, y1+42.30337078651686, x1+21.235955056179776, y1+42.13483146067416, x1+21.06741573033708, y1+41.96629213483146, x1+20.89887640449438, y1+41.79775280898876, x1+20.730337078651687, y1+41.62921348314607, x1+20.730337078651687, y1+41.46067415730337, x1+20.56179775280899, y1+41.29213483146068, x1+20.393258426966288, y1+41.12359550561798, x1+20.224719101123593, y1+40.95505617977528, x1+20.0561797752809, y1+40.786516853932575, x1+20.0561797752809, y1+40.61797752808988, x1+19.887640449438205, y1+40.44943820224719, x1+19.719101123595507, y1+40.28089887640449, x1+19.55056179775281, y1+40.1123595505618, x1+19.55056179775281, y1+39.943820224719104, x1+19.382022471910116, y1+39.77528089887641, x1+19.382022471910116, y1+39.60674157303371, x1+19.213483146067414, y1+39.438202247191015, x1+19.044943820224717, y1+39.26966292134831, x1+19.044943820224717, y1+39.10112359550562, x1+18.876404494382026, y1+38.932584269662925, x1+18.876404494382026, y1+38.76404494382023, x1+18.707865168539325, y1+38.59550561797752, x1+18.707865168539325, y1+38.42696629213483, x1+18.53932584269663, y1+38.25842696629213, x1+18.53932584269663, y1+38.08988764044943, x1+18.370786516853936, y1+37.92134831460674, x1+18.370786516853936, y1+37.75280898876405, x1+18.202247191011235, y1+37.58426966292135, x1+18.202247191011235, y1+37.41573033707865, x1+18.202247191011235, y1+37.247191011235955, x1+18.033707865168537, y1+37.07865168539326, x1+18.033707865168537, y1+36.91011235955057, x1+18.033707865168537, y1+36.74157303370787, x1+17.865168539325843, y1+36.57303370786517, x1+17.865168539325843, y1+36.40449438202247, x1+17.865168539325843, y1+36.235955056179776, x1+17.696629213483146, y1+36.067415730337075, x1+17.696629213483146, y1+35.89887640449438, x1+17.696629213483146, y1+35.73033707865169, x1+17.52808988764045, y1+35.561797752808985, x1+17.52808988764045, y1+35.39325842696629, x1+17.52808988764045, y1+35.2247191011236, x1+17.52808988764045, y1+35.0561797752809, x1+17.359550561797754, y1+34.8876404494382, x1+17.359550561797754, y1+34.71910112359551, x1+17.359550561797754, y1+34.55056179775281, x1+17.359550561797754, y1+34.38202247191011, x1+17.359550561797754, y1+34.21348314606742, x1+17.359550561797754, y1+34.044943820224724, x1+17.359550561797754, y1+33.87640449438202, x1+17.359550561797754, y1+33.70786516853932, x1+17.359550561797754, y1+33.53932584269663, x1+17.359550561797754, y1+33.37078651685393, x1+17.359550561797754, y1+33.20224719101123, x1+17.359550561797754, y1+33.03370786516854, x1+17.191011235955056, y1+32.86516853932584, x1+17.191011235955056, y1+32.69662921348314, x1+17.191011235955056, y1+32.52808988764045, x1+17.191011235955056, y1+32.359550561797754, x1+17.191011235955056, y1+32.19101123595506, x1+17.191011235955056, y1+32.02247191011236, x1+17.191011235955056, y1+31.853932584269664, x1+17.359550561797754, y1+31.68539325842697, x1+17.359550561797754, y1+31.51685393258427, x1+17.359550561797754, y1+31.348314606741575, x1+17.359550561797754, y1+31.179775280898884, x1+17.359550561797754, y1+31.01123595505618, x1+17.359550561797754, y1+30.842696629213478, x1+17.359550561797754, y1+30.674157303370784, x1+17.359550561797754, y1+30.505617977528093, x1+17.359550561797754, y1+30.337078651685392, x1+17.359550561797754, y1+30.168539325842698, x1+17.359550561797754, y1+30.0, x1+17.52808988764045, y1+29.831460674157302, x1+17.52808988764045, y1+29.662921348314608, x1+17.52808988764045, y1+29.494382022471914, x1+17.52808988764045, y1+29.325842696629216, x1+17.52808988764045, y1+29.157303370786522, x1+17.696629213483146, y1+28.98876404494382, x1+17.696629213483146, y1+28.820224719101123, x1+17.696629213483146, y1+28.651685393258425, x1+17.696629213483146, y1+28.48314606741573, x1+17.865168539325843, y1+28.314606741573037, x1+17.865168539325843, y1+28.146067415730336, x1+17.865168539325843, y1+27.977528089887638, x1+18.033707865168537, y1+27.808988764044944, x1+18.033707865168537, y1+27.640449438202246, x1+18.202247191011235, y1+27.471910112359545, x1+18.202247191011235, y1+27.303370786516854, x1+18.202247191011235, y1+27.134831460674153, x1+18.370786516853936, y1+26.96629213483146, x1+18.370786516853936, y1+26.797752808988765, x1+18.53932584269663, y1+26.629213483146067, x1+18.53932584269663, y1+26.46067415730337, x1+18.707865168539325, y1+26.292134831460675, x1+18.707865168539325, y1+26.123595505617974, x1+18.876404494382026, y1+25.955056179775276, x1+18.876404494382026, y1+25.786516853932582, x1+19.044943820224717, y1+25.617977528089888, x1+19.044943820224717, y1+25.44943820224719, x1+19.213483146067414, y1+25.280898876404496, x1+19.213483146067414, y1+25.1123595505618, x1+19.382022471910116, y1+24.943820224719104, x1+19.382022471910116, y1+24.775280898876407, x1+19.55056179775281, y1+24.60674157303371, x1+19.719101123595507, y1+24.438202247191015, x1+19.719101123595507, y1+24.269662921348313, x1+19.887640449438205, y1+24.101123595505616, x1+20.0561797752809, y1+23.93258426966292, x1+20.0561797752809, y1+23.764044943820224, x1+20.224719101123593, y1+23.595505617977526, x1+20.393258426966288, y1+23.426966292134832, x1+20.56179775280899, y1+23.258426966292138, x1+20.56179775280899, y1+23.089887640449437, x1+20.730337078651687, y1+22.92134831460674, x1+20.89887640449438, y1+22.752808988764045, x1+21.06741573033708, y1+22.584269662921347, x1+21.235955056179776, y1+22.41573033707865, x1+21.235955056179776, y1+22.247191011235955, x1+21.40449438202247, y1+22.078651685393258, x1+21.573033707865168, y1+21.91011235955056, x1+21.741573033707866, y1+21.741573033707866, x1+21.91011235955056, y1+21.573033707865168, x1+22.078651685393258, y1+21.40449438202247, x1+22.247191011235955, y1+21.235955056179776, x1+22.41573033707865, y1+21.06741573033708, x1+22.584269662921347, y1+20.89887640449438, x1+22.752808988764045, y1+20.730337078651687, x1+22.92134831460674, y1+20.56179775280899, x1+23.258426966292138, y1+20.393258426966288, x1+23.426966292134832, y1+20.224719101123593, x1+23.595505617977526, y1+20.0561797752809, x1+23.764044943820224, y1+19.887640449438205, x1+23.93258426966292, y1+19.719101123595507, x1+24.101123595505616, y1+19.55056179775281, x1+24.438202247191015, y1+19.382022471910116, x1+24.60674157303371, y1+19.213483146067414, x1+24.775280898876407, y1+19.044943820224717, x1+24.943820224719104, y1+18.876404494382026, x1+25.280898876404496, y1+18.707865168539325, x1+25.44943820224719, y1+18.53932584269663, x1+25.617977528089888, y1+18.370786516853936, x1+25.955056179775276, y1+18.202247191011235, x1+26.123595505617974, y1+18.033707865168537, x1+26.292134831460675, y1+17.865168539325843, x1+26.629213483146067, y1+17.696629213483146, x1+26.797752808988765, y1+17.52808988764045, x1+26.96629213483146, y1+17.359550561797754, x1+27.134831460674153, y1+17.191011235955056, x1+27.471910112359545, y1+17.022471910112362, x1+27.640449438202246, y1+16.85393258426966, x1+27.977528089887638, y1+16.685393258426966, x1+28.146067415730336, y1+16.51685393258427, x1+28.314606741573037, y1+16.34831460674157, x1+28.651685393258425, y1+16.179775280898877, x1+28.820224719101123, y1+16.01123595505618, x1+29.157303370786522, y1+15.842696629213485, x1+29.325842696629216, y1+15.674157303370787, x1+29.494382022471914, y1+15.50561797752809, x1+29.831460674157302, y1+15.337078651685392, x1+30.0, y1+15.168539325842696, x1+30.337078651685392, y1+15.0, x1+30.505617977528093, y1+14.831460674157304, x1+30.674157303370784, y1+14.662921348314608, x1+31.01123595505618, y1+14.49438202247191, x1+31.179775280898884, y1+14.325842696629213, x1+31.51685393258427, y1+14.157303370786519, x1+31.68539325842697, y1+13.988764044943819, x1+31.853932584269664, y1+13.820224719101123, x1+32.19101123595506, y1+13.651685393258427, x1+32.359550561797754, y1+13.48314606741573, x1+32.52808988764045, y1+13.314606741573034, x1+32.86516853932584, y1+13.146067415730338, x1+33.03370786516854, y1+12.977528089887638, x1+33.20224719101123, y1+12.808988764044944, x1+33.53932584269663, y1+12.640449438202248, x1+33.70786516853932, y1+12.471910112359552, x1+33.87640449438202, y1+12.303370786516854, x1+34.21348314606742, y1+12.134831460674157, x1+34.38202247191011, y1+11.96629213483146, x1+34.38202247191011, y1+11.797752808988763, x1+34.38202247191011, y1+11.629213483146069, x1+34.21348314606742, y1+11.46067415730337, x1+34.044943820224724, y1+11.292134831460674, x1+33.87640449438202, y1+11.123595505617978, x1+33.70786516853932, y1+10.95505617977528, x1+33.53932584269663, y1+10.786516853932584, x1+33.37078651685393, y1+10.617977528089888, x1+33.20224719101123, y1+10.44943820224719, x1+33.03370786516854, y1+10.280898876404494, x1+33.03370786516854, y1+10.112359550561797, x1+32.86516853932584, y1+9.943820224719103, x1+32.69662921348314, y1+9.775280898876405, x1+32.69662921348314, y1+9.606741573033707, x1+32.52808988764045, y1+9.438202247191013, x1+32.52808988764045, y1+9.269662921348315, x1+32.359550561797754, y1+9.101123595505618, x1+32.359550561797754, y1+8.932584269662922, x1+32.359550561797754, y1+8.764044943820226, x1+32.19101123595506, y1+8.595505617977528, x1+32.19101123595506, y1+8.42696629213483, x1+32.19101123595506, y1+8.258426966292134, x1+32.19101123595506, y1+8.089887640449438, x1+32.02247191011236, y1+7.9213483146067425, x1+32.02247191011236, y1+7.752808988764045, x1+32.02247191011236, y1+7.584269662921348, x1+32.02247191011236, y1+7.415730337078652, x1+32.02247191011236, y1+7.247191011235955, x1+32.02247191011236, y1+7.078651685393259, x1+32.02247191011236, y1+6.910112359550562, x1+32.02247191011236, y1+6.741573033707865, x1+32.02247191011236, y1+6.573033707865169, x1+32.02247191011236, y1+6.404494382022472, x1+32.02247191011236, y1+6.235955056179776, x1+32.19101123595506, y1+6.067415730337078, x1+32.19101123595506, y1+5.8988764044943816, x1+32.19101123595506, y1+5.730337078651685, x1+32.19101123595506, y1+5.561797752808989, x1+32.19101123595506, y1+5.393258426966292, x1+32.359550561797754, y1+5.224719101123595, x1+32.359550561797754, y1+5.056179775280898, x1+32.52808988764045, y1+4.887640449438202, x1+32.52808988764045, y1+4.7191011235955065, x1+32.69662921348314, y1+4.550561797752809, x1+32.69662921348314, y1+4.382022471910113, x1+32.86516853932584, y1+4.213483146067415, x1+32.86516853932584, y1+4.044943820224719, x1+33.03370786516854, y1+3.8764044943820224, x1+33.20224719101123, y1+3.707865168539326, x1+33.37078651685393, y1+3.5393258426966296, x1+33.53932584269663, y1+3.3707865168539324, x1+33.70786516853932, y1+3.202247191011236, x1+33.87640449438202, y1+3.033707865168539, x1+34.044943820224724, y1+2.8651685393258424, x1+34.21348314606742, y1+2.696629213483146, x1+34.55056179775281, y1+2.528089887640449, x1+34.8876404494382, y1+2.3595505617977532, x1+35.0561797752809, y1+2.1910112359550564, x1+35.39325842696629, y1+2.0224719101123596, x1+35.89887640449438, y1+1.853932584269663, x1+36.74157303370787, y1+1.6853932584269662, x1+37.58426966292135, y1+1.6853932584269662, x1+38.08988764044943, y1+1.6853932584269662, x1+38.932584269662925, y1+1.853932584269663, x1+39.60674157303371, y1+2.1910112359550564, x1+39.943820224719104, y1+2.3595505617977532, x1+40.1123595505618, y1+2.528089887640449, x1+40.44943820224719, y1+2.696629213483146, x1+40.61797752808988, y1+2.8651685393258424, x1+40.786516853932575, y1+3.033707865168539, x1+40.95505617977528, y1+3.202247191011236, x1+41.12359550561798, y1+3.3707865168539324, x1+41.29213483146068, y1+3.5393258426966296, x1+41.46067415730337, y1+3.707865168539326, x1+41.62921348314607, y1+3.8764044943820224, x1+41.79775280898876, y1+4.044943820224719, x1+41.79775280898876, y1+4.213483146067415, x1+41.96629213483146, y1+4.382022471910113, x1+41.96629213483146, y1+4.550561797752809, x1+42.13483146067416, y1+4.7191011235955065, x1+42.13483146067416, y1+4.887640449438202, x1+42.30337078651686, y1+5.056179775280898, x1+42.30337078651686, y1+5.224719101123595, x1+42.47191011235955, y1+5.393258426966292, x1+42.47191011235955, y1+5.561797752808989, x1+42.47191011235955, y1+5.730337078651685, x1+42.47191011235955, y1+5.8988764044943816, x1+42.640449438202246, y1+6.067415730337078, x1+42.640449438202246, y1+6.235955056179776, x1+42.640449438202246, y1+6.404494382022472, x1+42.640449438202246, y1+6.573033707865169, x1+42.640449438202246, y1+6.741573033707865, x1+42.640449438202246, y1+6.910112359550562, x1+42.640449438202246, y1+7.078651685393259, x1+42.640449438202246, y1+7.247191011235955, x1+42.640449438202246, y1+7.415730337078652, x1+42.640449438202246, y1+7.584269662921348, x1+42.640449438202246, y1+7.752808988764045, x1+42.640449438202246, y1+7.9213483146067425, x1+42.640449438202246, y1+8.089887640449438, x1+42.640449438202246, y1+8.258426966292134, x1+42.47191011235955, y1+8.42696629213483, x1+42.47191011235955, y1+8.595505617977528, x1+42.47191011235955, y1+8.764044943820226, x1+42.30337078651686, y1+8.932584269662922, x1+42.30337078651686, y1+9.101123595505618, x1+42.13483146067416, y1+9.269662921348315, x1+42.13483146067416, y1+9.438202247191013, x1+41.96629213483146, y1+9.606741573033707, x1+41.96629213483146, y1+9.775280898876405, x1+41.79775280898876, y1+9.943820224719103, x1+41.62921348314607, y1+10.112359550561797, x1+41.62921348314607, y1+10.280898876404494, x1+41.46067415730337, y1+10.44943820224719, x1+41.29213483146068, y1+10.617977528089888, x1+41.12359550561798, y1+10.786516853932584, x1+40.95505617977528, y1+10.95505617977528, x1+40.786516853932575, y1+11.123595505617978, x1+40.61797752808988, y1+11.292134831460674, x1+40.44943820224719, y1+11.46067415730337, x1+40.44943820224719, y1+11.629213483146069, x1+40.28089887640449, y1+11.797752808988763, x1+40.28089887640449, y1+11.96629213483146, x1+40.61797752808988, y1+12.134831460674157, x1+40.786516853932575, y1+12.303370786516854, x1+40.95505617977528, y1+12.471910112359552, x1+41.29213483146068, y1+12.640449438202248, x1+41.46067415730337, y1+12.808988764044944, x1+41.62921348314607, y1+12.977528089887638, x1+41.79775280898876, y1+13.146067415730338, x1+42.13483146067416, y1+13.314606741573034, x1+42.30337078651686, y1+13.48314606741573, x1+42.47191011235955, y1+13.651685393258427, x1+42.80898876404494, y1+13.820224719101123, x1+42.97752808988764, y1+13.988764044943819, x1+43.31460674157304, y1+14.157303370786519, x1+43.48314606741573, y1+14.325842696629213, x1+43.651685393258425, y1+14.49438202247191, x1+43.98876404494382, y1+14.662921348314608, x1+44.157303370786515, y1+14.831460674157304, x1+44.49438202247191, y1+15.0, x1+44.662921348314605, y1+15.168539325842696, x1+44.8314606741573, y1+15.337078651685392, x1+45.168539325842694, y1+15.50561797752809, x1+45.337078651685395, y1+15.674157303370787, x1+45.674157303370784, y1+15.842696629213485, x1+45.84269662921348, y1+16.01123595505618, x1+46.01123595505618, y1+16.179775280898877, x1+46.34831460674157, y1+16.34831460674157, x1+46.516853932584276, y1+16.51685393258427, x1+46.68539325842697, y1+16.685393258426966, x1+47.02247191011236, y1+16.85393258426966, x1+47.19101123595505, y1+17.022471910112362, x1+47.52808988764045, y1+17.191011235955056, x1+47.69662921348315, y1+17.359550561797754, x1+47.86516853932584, y1+17.52808988764045, x1+48.20224719101123, y1+17.696629213483146, x1+48.370786516853926, y1+17.865168539325843, x1+48.53932584269663, y1+18.033707865168537, x1+48.87640449438203, y1+18.202247191011235, x1+49.044943820224724, y1+18.370786516853936, x1+49.21348314606742, y1+18.53932584269663, x1+49.38202247191011, y1+18.707865168539325, x1+49.7191011235955, y1+18.876404494382026, x1+49.88764044943821, y1+19.044943820224717, x1+50.05617977528091, y1+19.213483146067414, x1+50.2247191011236, y1+19.382022471910116, x1+50.56179775280899, y1+19.55056179775281, x1+50.73033707865168, y1+19.719101123595507, x1+50.89887640449438, y1+19.887640449438205, x1+51.06741573033708, y1+20.0561797752809, x1+51.235955056179776, y1+20.224719101123593, x1+51.40449438202247, y1+20.393258426966288, x1+51.741573033707866, y1+20.56179775280899, x1+51.91011235955055, y1+20.730337078651687, x1+52.07865168539326, y1+20.89887640449438, x1+52.24719101123595, y1+21.06741573033708, x1+52.41573033707865, y1+21.235955056179776, x1+52.58426966292135, y1+21.40449438202247, x1+52.75280898876405, y1+21.573033707865168, x1+52.92134831460674, y1+21.741573033707866, x1+53.08988764044943, y1+21.91011235955056, x1+53.258426966292134, y1+22.078651685393258, x1+53.426966292134836, y1+22.247191011235955, x1+53.59550561797753, y1+22.41573033707865, x1+53.764044943820224, y1+22.584269662921347, x1+53.764044943820224, y1+22.752808988764045, x1+53.93258426966292, y1+22.92134831460674, x1+54.10112359550562, y1+23.089887640449437, x1+54.269662921348306, y1+23.258426966292138, x1+54.269662921348306, y1+23.426966292134832, x1+54.438202247191015, y1+23.595505617977526, x1+54.60674157303371, y1+23.764044943820224, x1+54.7752808988764, y1+23.93258426966292, x1+54.7752808988764, y1+24.101123595505616, x1+54.94382022471909, y1+24.269662921348313, x1+55.112359550561806, y1+24.438202247191015, x1+55.112359550561806, y1+24.60674157303371, x1+55.28089887640449, y1+24.775280898876407, x1+55.28089887640449, y1+24.943820224719104, x1+55.4494382022472, y1+25.1123595505618, x1+55.4494382022472, y1+25.280898876404496, x1+55.61797752808989, y1+25.44943820224719, x1+55.78651685393259, y1+25.617977528089888, x1+55.78651685393259, y1+25.786516853932582, x1+55.955056179775276, y1+25.955056179775276, x1+55.955056179775276, y1+26.123595505617974, x1+56.12359550561798, y1+26.292134831460675, x1+56.12359550561798, y1+26.46067415730337, x1+56.12359550561798, y1+26.629213483146067, x1+56.29213483146067, y1+26.797752808988765, x1+56.29213483146067, y1+26.96629213483146, x1+56.460674157303366, y1+27.134831460674153, x1+56.460674157303366, y1+27.303370786516854, x1+56.629213483146074, y1+27.471910112359545, x1+56.629213483146074, y1+27.640449438202246, x1+56.629213483146074, y1+27.808988764044944, x1+56.79775280898876, y1+27.977528089887638, x1+56.79775280898876, y1+28.146067415730336, x1+56.79775280898876, y1+28.314606741573037, x1+56.96629213483146, y1+28.48314606741573, x1+56.96629213483146, y1+28.651685393258425, x1+56.96629213483146, y1+28.820224719101123, x1+57.13483146067416, y1+28.98876404494382, x1+57.13483146067416, y1+29.157303370786522, x1+57.13483146067416, y1+29.325842696629216, x1+57.13483146067416, y1+29.494382022471914, x1+57.13483146067416, y1+29.662921348314608, x1+57.30337078651685, y1+29.831460674157302, x1+57.30337078651685, y1+30.0, x1+57.30337078651685, y1+30.168539325842698, x1+57.30337078651685, y1+30.337078651685392, x1+57.30337078651685, y1+30.505617977528093, x1+57.30337078651685, y1+30.674157303370784, x1+57.30337078651685, y1+30.842696629213478, x1+57.30337078651685, y1+31.01123595505618, x1+57.30337078651685, y1+31.179775280898884, x1+57.471910112359545, y1+31.348314606741575, x1+57.471910112359545, y1+31.51685393258427, x1+57.471910112359545, y1+31.68539325842697, x1+57.471910112359545, y1+31.853932584269664, x1+57.471910112359545, y1+32.02247191011236, x1+57.471910112359545, y1+32.19101123595506, x1+57.471910112359545, y1+32.359550561797754, x1+57.471910112359545, y1+32.52808988764045, x1+57.471910112359545, y1+32.69662921348314, x1+57.471910112359545, y1+32.86516853932584, x1+57.471910112359545, y1+33.03370786516854, x1+57.471910112359545, y1+33.20224719101123, x1+57.471910112359545, y1+33.37078651685393, x1+57.471910112359545, y1+33.53932584269663, x1+57.471910112359545, y1+33.70786516853932, x1+57.30337078651685, y1+33.87640449438202, x1+57.30337078651685, y1+34.044943820224724, x1+57.30337078651685, y1+34.21348314606742, x1+57.30337078651685, y1+34.38202247191011, x1+57.30337078651685, y1+34.55056179775281, x1+57.30337078651685, y1+34.71910112359551, x1+57.30337078651685, y1+34.8876404494382, x1+57.30337078651685, y1+35.0561797752809, x1+57.13483146067416, y1+35.2247191011236, x1+57.13483146067416, y1+35.39325842696629, x1+57.13483146067416, y1+35.561797752808985, x1+57.13483146067416, y1+35.73033707865169, x1+56.96629213483146, y1+35.89887640449438, x1+56.96629213483146, y1+36.067415730337075, x1+56.96629213483146, y1+36.235955056179776, x1+56.79775280898876, y1+36.40449438202247, x1+56.79775280898876, y1+36.57303370786517, x1+56.79775280898876, y1+36.74157303370787, x1+56.629213483146074, y1+36.91011235955057, x1+56.629213483146074, y1+37.07865168539326, x1+56.460674157303366, y1+37.247191011235955, x1+56.460674157303366, y1+37.41573033707865, x1+56.460674157303366, y1+37.58426966292135, x1+56.29213483146067, y1+37.75280898876405, x1+56.29213483146067, y1+37.92134831460674, x1+56.12359550561798, y1+38.08988764044943, x1+56.12359550561798, y1+38.25842696629213, x1+55.955056179775276, y1+38.42696629213483, x1+55.955056179775276, y1+38.59550561797752, x1+55.78651685393259, y1+38.76404494382023, x1+55.78651685393259, y1+38.932584269662925, x1+55.61797752808989, y1+39.10112359550562, x1+55.61797752808989, y1+39.26966292134831, x1+55.4494382022472, y1+39.438202247191015, x1+55.4494382022472, y1+39.60674157303371, x1+55.28089887640449, y1+39.77528089887641, x1+55.112359550561806, y1+39.943820224719104, x1+55.112359550561806, y1+40.1123595505618, x1+54.94382022471909, y1+40.28089887640449, x1+54.7752808988764, y1+40.44943820224719, x1+54.7752808988764, y1+40.61797752808988, x1+54.60674157303371, y1+40.786516853932575, x1+54.438202247191015, y1+40.95505617977528, x1+54.269662921348306, y1+41.12359550561798, x1+54.269662921348306, y1+41.29213483146068, x1+54.10112359550562, y1+41.46067415730337, x1+53.93258426966292, y1+41.62921348314607, x1+53.764044943820224, y1+41.79775280898876, x1+53.59550561797753, y1+41.96629213483146, x1+53.426966292134836, y1+42.13483146067416, x1+53.258426966292134, y1+42.30337078651686, x1+53.08988764044943, y1+42.47191011235955, x1+52.92134831460674, y1+42.640449438202246, x1+52.75280898876405, y1+42.80898876404494, x1+52.41573033707865, y1+42.97752808988764, x1+52.24719101123595, y1+43.146067415730336, x1+52.07865168539326, y1+43.31460674157304, x1+51.91011235955055, y1+43.48314606741573, x1+51.573033707865164, y1+43.651685393258425, x1+51.40449438202247, y1+43.82022471910112, x1+51.235955056179776, y1+43.98876404494382, x1+51.06741573033708, y1+44.157303370786515, x1+51.06741573033708, y1+44.32584269662922, x1+51.06741573033708, y1+44.49438202247191, x1+51.235955056179776, y1+44.662921348314605, x1+51.235955056179776, y1+44.8314606741573, x1+51.235955056179776, y1+45.0, x1+51.235955056179776, y1+45.168539325842694, x1+51.40449438202247, y1+45.337078651685395, x1+51.40449438202247, y1+45.50561797752809, x1+51.40449438202247, y1+45.674157303370784, x1+51.40449438202247, y1+45.84269662921348, x1+51.40449438202247, y1+46.01123595505618, x1+51.573033707865164, y1+46.17977528089887, x1+51.573033707865164, y1+46.34831460674157, x1+51.573033707865164, y1+46.516853932584276, x1+51.573033707865164, y1+46.68539325842697, x1+51.741573033707866, y1+46.853932584269664, x1+51.741573033707866, y1+47.02247191011236, x1+51.741573033707866, y1+47.19101123595505, x1+51.741573033707866, y1+47.35955056179775, x1+51.91011235955055, y1+47.52808988764045, x1+51.91011235955055, y1+47.69662921348315, x1+51.91011235955055, y1+47.86516853932584, x1+51.91011235955055, y1+48.03370786516854, x1+52.07865168539326, y1+48.20224719101123, x1+52.07865168539326, y1+48.370786516853926, x1+52.07865168539326, y1+48.53932584269663, x1+52.07865168539326, y1+48.70786516853933, x1+52.24719101123595, y1+48.87640449438203, x1+52.24719101123595, y1+49.044943820224724, x1+52.24719101123595, y1+49.21348314606742, x1+52.24719101123595, y1+49.38202247191011, x1+52.41573033707865, y1+49.55056179775281, x1+52.41573033707865, y1+49.7191011235955, x1+52.41573033707865, y1+49.88764044943821, x1+52.41573033707865, y1+50.05617977528091, x1+52.58426966292135, y1+50.2247191011236, x1+52.58426966292135, y1+50.39325842696629, x1+52.58426966292135, y1+50.56179775280899, x1+52.58426966292135, y1+50.73033707865168, x1+52.75280898876405, y1+50.89887640449438, x1+52.75280898876405, y1+51.06741573033708, x1+52.75280898876405, y1+51.235955056179776, x1+52.75280898876405, y1+51.40449438202247, x1+52.92134831460674, y1+51.573033707865164, x1+52.92134831460674, y1+51.741573033707866, x1+52.92134831460674, y1+51.91011235955055, x1+52.92134831460674, y1+52.07865168539326, x1+52.92134831460674, y1+52.24719101123595, x1+53.08988764044943, y1+52.41573033707865, x1+53.08988764044943, y1+52.58426966292135, x1+53.08988764044943, y1+52.75280898876405, x1+53.08988764044943, y1+52.92134831460674, x1+53.08988764044943, y1+53.08988764044943, x1+53.08988764044943, y1+53.258426966292134, x1+53.08988764044943, y1+53.426966292134836, x1+53.08988764044943, y1+53.59550561797753, x1+52.92134831460674, y1+53.764044943820224, x1+52.92134831460674, y1+53.93258426966292, x1+52.75280898876405, y1+54.10112359550562, x1+52.58426966292135, y1+54.269662921348306, x1+52.24719101123595, y1+54.438202247191015, x1+52.07865168539326, y1+54.60674157303371, x1+51.741573033707866, y1+54.7752808988764, x1+51.40449438202247, y1+54.94382022471909, x1+51.06741573033708, y1+55.112359550561806, x1+50.73033707865168, y1+55.28089887640449, x1+50.39325842696629, y1+55.4494382022472, x1+50.05617977528091, y1+55.61797752808989, x1+49.55056179775281, y1+55.78651685393259, x1+49.21348314606742, y1+55.955056179775276, x1+48.87640449438203, y1+56.12359550561798, x1+48.370786516853926, y1+56.29213483146067, x1+48.03370786516854, y1+56.460674157303366, x1+47.52808988764045, y1+56.629213483146074, x1+47.19101123595505, y1+56.79775280898876, x1+46.68539325842697, y1+56.96629213483146, x1+46.01123595505618, y1+57.13483146067416, x1+45.50561797752809, y1+57.30337078651685, x1+45.0, y1+57.471910112359545, x1+44.32584269662922, y1+57.640449438202246, x1+43.651685393258425, y1+57.80898876404495, x1+42.97752808988764, y1+57.97752808988764, x1+42.30337078651686, y1+58.14606741573034, x1+42.47191011235955, y1+58.314606741573044, x1+42.80898876404494, y1+58.48314606741573, x1+42.97752808988764, y1+58.65168539325843, x1+43.31460674157304, y1+58.82022471910113, x1+43.651685393258425, y1+58.98876404494383, x1+44.157303370786515, y1+59.157303370786515, x1+44.662921348314605, y1+59.325842696629216, x1+45.337078651685395, y1+59.49438202247191, x1+46.34831460674157, y1+59.662921348314605, x1+56.629213483146074, y1+59.8314606741573, x1+58.65168539325843, y1+60.0, x1+59.8314606741573, y1+60.1685393258427, x1+60.50561797752809, y1+60.337078651685395, x1+61.34831460674157, y1+60.50561797752809, x1+61.85393258426966, y1+60.674157303370784, x1+62.52808988764044, y1+60.84269662921347, x1+63.03370786516854, y1+61.011235955056186, x1+63.539325842696634, y1+61.17977528089887, x1+64.04494382022472, y1+61.34831460674157, x1+64.38202247191012, y1+61.51685393258427, x1+64.71910112359551, y1+61.685393258426956, x1+65.2247191011236, y1+61.85393258426966, x1+65.561797752809, y1+62.02247191011236, x1+65.89887640449437, y1+62.19101123595507, x1+66.23595505617976, y1+62.35955056179777, x1+66.57303370786516, y1+62.52808988764044, x1+66.91011235955057, y1+62.69662921348315, x1+67.24719101123596, y1+62.86516853932585, x1+67.41573033707864, y1+63.03370786516854, x1+67.75280898876404, y1+63.20224719101124, x1+68.08988764044945, y1+63.37078651685394, x1+68.25842696629213, y1+63.539325842696634, x1+68.59550561797754, y1+63.70786516853933, x1+68.76404494382022, y1+63.87640449438202, x1+69.10112359550563, y1+64.04494382022472, x1+69.26966292134831, y1+64.21348314606742, x1+69.43820224719101, y1+64.38202247191012, x1+69.7752808988764, y1+64.5505617977528, x1+69.94382022471909, y1+64.71910112359551, x1+70.1123595505618, y1+64.88764044943821, x1+70.4494382022472, y1+65.0561797752809, x1+70.6179775280899, y1+65.2247191011236, x1+70.78651685393258, y1+65.39325842696628, x1+70.95505617977528, y1+65.561797752809, x1+71.12359550561797, y1+65.73033707865169, x1+71.29213483146067, y1+65.89887640449437, x1+71.46067415730337, y1+66.06741573033707, x1+71.62921348314606, y1+66.23595505617976, x1+71.62921348314606, y1+66.40449438202246, x1+71.79775280898876, y1+66.57303370786516, x1+71.79775280898876, y1+66.74157303370787, x1+71.79775280898876, y1+66.91011235955057, x1+71.79775280898876, y1+67.07865168539325, x1+71.79775280898876, y1+67.24719101123596, x1+71.62921348314606, y1+67.41573033707864, x1+71.62921348314606, y1+67.58426966292134, x1+71.46067415730337, y1+67.75280898876404, x1+71.29213483146067, y1+67.92134831460675, x1+71.12359550561797, y1+68.08988764044945, x1+70.95505617977528, y1+68.25842696629213, x1+70.78651685393258, y1+68.42696629213484, x1+70.6179775280899, y1+68.59550561797754, x1+70.4494382022472, y1+68.76404494382022, x1+70.28089887640449, y1+68.93258426966293, x1+70.1123595505618, y1+69.10112359550563, x1+69.94382022471909, y1+69.26966292134831, x1+69.7752808988764, y1+69.43820224719101, x1+69.6067415730337, y1+69.6067415730337, x1+69.43820224719101, y1+69.7752808988764, x1+69.26966292134831, y1+69.94382022471909, x1+69.10112359550563, y1+70.1123595505618, x1+68.93258426966293, y1+70.28089887640449, x1+68.76404494382022, y1+70.4494382022472, x1+68.59550561797754, y1+70.6179775280899, x1+68.42696629213484, y1+70.78651685393258, x1+68.25842696629213, y1+70.95505617977528, x1+68.08988764044945, y1+71.12359550561797, x1+67.92134831460675, y1+71.29213483146067, x1+67.75280898876404, y1+71.46067415730337, x1+67.58426966292134, y1+71.62921348314606, x1+67.41573033707864, y1+71.79775280898876, x1+67.24719101123596, y1+71.96629213483145, x1+67.07865168539325, y1+72.13483146067415, x1+66.91011235955057, y1+72.30337078651685, x1+66.74157303370787, y1+72.47191011235955, x1+66.57303370786516, y1+72.64044943820225, x1+66.40449438202246, y1+72.80898876404494, x1+66.06741573033707, y1+72.97752808988764, x1+65.89887640449437, y1+73.14606741573034, x1+65.89887640449437, y1+73.14606741573034, x1+65.73033707865169, y1+73.14606741573034, x1+65.561797752809, y1+73.14606741573034, x1+65.39325842696628, y1+73.14606741573034, x1+65.2247191011236, y1+72.97752808988764, x1+65.0561797752809, y1+72.97752808988764, x1+64.88764044943821, y1+72.80898876404494, x1+64.71910112359551, y1+72.64044943820225, x1+64.5505617977528, y1+72.64044943820225, x1+64.38202247191012, y1+72.47191011235955, x1+64.21348314606742, y1+72.30337078651685, x1+64.04494382022472, y1+72.30337078651685, x1+63.87640449438202, y1+72.13483146067415, x1+63.70786516853933, y1+71.96629213483145, x1+63.539325842696634, y1+71.79775280898876, x1+63.37078651685394, y1+71.79775280898876, x1+63.20224719101124, y1+71.62921348314606, x1+63.03370786516854, y1+71.46067415730337, x1+62.86516853932585, y1+71.46067415730337, x1+62.69662921348315, y1+71.29213483146067, x1+62.52808988764044, y1+71.12359550561797, x1+62.35955056179777, y1+71.12359550561797, x1+62.19101123595507, y1+70.95505617977528, x1+62.02247191011236, y1+70.95505617977528, x1+61.85393258426966, y1+70.78651685393258, x1+61.685393258426956, y1+70.78651685393258, x1+61.51685393258427, y1+70.6179775280899, x1+61.34831460674157, y1+70.4494382022472, x1+61.17977528089887, y1+70.4494382022472, x1+61.011235955056186, y1+70.4494382022472, x1+60.84269662921347, y1+70.28089887640449, x1+60.674157303370784, y1+70.28089887640449, x1+60.50561797752809, y1+70.1123595505618, x1+60.337078651685395, y1+70.1123595505618, x1+60.1685393258427, y1+69.94382022471909, x1+60.0, y1+69.94382022471909, x1+59.8314606741573, y1+69.7752808988764, x1+59.662921348314605, y1+69.7752808988764, x1+59.49438202247191, y1+69.7752808988764, x1+59.325842696629216, y1+69.6067415730337, x1+59.157303370786515, y1+69.6067415730337, x1+58.98876404494383, y1+69.43820224719101, x1+58.82022471910113, y1+69.43820224719101, x1+58.65168539325843, y1+69.43820224719101, x1+58.48314606741573, y1+69.43820224719101, x1+58.314606741573044, y1+69.26966292134831, x1+58.14606741573034, y1+69.26966292134831, x1+57.97752808988764, y1+69.26966292134831, x1+57.80898876404495, y1+69.10112359550563, x1+57.640449438202246, y1+69.10112359550563, x1+57.471910112359545, y1+69.10112359550563, x1+57.30337078651685, y1+69.10112359550563, x1+57.13483146067416, y1+69.10112359550563, x1+56.96629213483146, y1+69.10112359550563, x1+56.79775280898876, y1+68.93258426966293, x1+56.629213483146074, y1+68.93258426966293, x1+56.460674157303366, y1+68.93258426966293, x1+56.29213483146067, y1+68.93258426966293, x1+56.12359550561798, y1+68.93258426966293, x1+55.955056179775276, y1+68.93258426966293, x1+55.78651685393259, y1+68.76404494382022, x1+55.61797752808989, y1+68.76404494382022, x1+55.4494382022472, y1+68.76404494382022, x1+55.28089887640449, y1+68.76404494382022, x1+55.112359550561806, y1+68.76404494382022, x1+54.94382022471909, y1+68.76404494382022, x1+54.7752808988764, y1+68.76404494382022, x1+54.60674157303371, y1+68.76404494382022, x1+54.438202247191015, y1+68.76404494382022, x1+54.269662921348306, y1+68.59550561797754, x1+54.10112359550562, y1+68.59550561797754, x1+53.93258426966292, y1+68.59550561797754, x1+53.764044943820224, y1+68.59550561797754, x1+53.59550561797753, y1+68.59550561797754, x1+53.426966292134836, y1+68.59550561797754, x1+53.258426966292134, y1+68.59550561797754, x1+53.08988764044943, y1+68.59550561797754, x1+52.92134831460674, y1+68.59550561797754, x1+52.75280898876405, y1+68.59550561797754, x1+52.58426966292135, y1+68.59550561797754, x1+52.41573033707865, y1+68.59550561797754, x1+52.24719101123595, y1+68.59550561797754, x1+52.07865168539326, y1+68.59550561797754, x1+51.91011235955055, y1+68.59550561797754, x1+51.741573033707866, y1+68.42696629213484, x1+51.573033707865164, y1+68.42696629213484, x1+51.40449438202247, y1+68.42696629213484, x1+51.235955056179776, y1+68.42696629213484, x1+51.06741573033708, y1+68.42696629213484, x1+50.89887640449438, y1+68.42696629213484, x1+50.73033707865168, y1+68.42696629213484, x1+50.56179775280899, y1+68.42696629213484, x1+50.39325842696629, y1+68.42696629213484, x1+50.2247191011236, y1+68.42696629213484, x1+50.05617977528091, y1+68.42696629213484, x1+49.88764044943821, y1+68.42696629213484, x1+49.7191011235955, y1+68.42696629213484, x1+49.55056179775281, y1+68.42696629213484, x1+49.38202247191011, y1+68.42696629213484, x1+49.21348314606742, y1+68.42696629213484, x1+49.044943820224724, y1+68.42696629213484, x1+48.87640449438203, y1+68.25842696629213, x1+48.70786516853933, y1+68.25842696629213, x1+48.53932584269663, y1+68.25842696629213, x1+48.370786516853926, y1+68.25842696629213, x1+48.20224719101123, y1+68.25842696629213, x1+48.03370786516854, y1+68.25842696629213, x1+47.86516853932584, y1+68.25842696629213, x1+47.69662921348315, y1+68.25842696629213, x1+47.52808988764045, y1+68.25842696629213, x1+47.35955056179775, y1+68.25842696629213, x1+47.19101123595505, y1+68.25842696629213, x1+47.02247191011236, y1+68.25842696629213, x1+46.853932584269664, y1+68.25842696629213, x1+46.68539325842697, y1+68.25842696629213, x1+46.516853932584276, y1+68.25842696629213, x1+46.34831460674157, y1+68.25842696629213, x1+46.17977528089887, y1+68.08988764044945, x1+46.01123595505618, y1+68.08988764044945, x1+45.84269662921348, y1+68.08988764044945, x1+45.674157303370784, y1+68.08988764044945, x1+45.50561797752809, y1+68.08988764044945, x1+45.337078651685395, y1+68.08988764044945, x1+45.168539325842694, y1+68.08988764044945, x1+45.0, y1+68.08988764044945, x1+44.8314606741573, y1+67.92134831460675, x1+44.662921348314605, y1+67.92134831460675, x1+44.49438202247191, y1+67.92134831460675, x1+44.32584269662922, y1+67.92134831460675, x1+44.157303370786515, y1+67.92134831460675, x1+43.98876404494382, y1+67.92134831460675, x1+43.82022471910112, y1+67.92134831460675, x1+43.651685393258425, y1+67.75280898876404, x1+43.48314606741573, y1+67.75280898876404, x1+43.31460674157304, y1+67.75280898876404, x1+43.146067415730336, y1+67.75280898876404, x1+42.97752808988764, y1+67.58426966292134, x1+42.80898876404494, y1+67.58426966292134, x1+42.640449438202246, y1+67.58426966292134, x1+42.47191011235955, y1+67.58426966292134, x1+42.30337078651686, y1+67.58426966292134, x1+42.13483146067416, y1+67.41573033707864, x1+41.96629213483146, y1+67.41573033707864, x1+41.79775280898876, y1+67.41573033707864, x1+41.62921348314607, y1+67.24719101123596, x1+41.46067415730337, y1+67.24719101123596, x1+41.29213483146068, y1+67.24719101123596, x1+41.12359550561798, y1+67.07865168539325, x1+40.95505617977528, y1+67.07865168539325, x1+40.786516853932575, y1+67.07865168539325, x1+40.61797752808988, y1+66.91011235955057, x1+40.44943820224719, y1+66.91011235955057, x1+40.28089887640449, y1+66.74157303370787, x1+40.1123595505618, y1+66.74157303370787, x1+39.943820224719104, y1+66.74157303370787, x1+39.77528089887641, y1+66.57303370786516, x1+39.60674157303371, y1+66.57303370786516, x1+39.438202247191015, y1+66.40449438202246, x1+39.26966292134831, y1+66.40449438202246, x1+39.10112359550562, y1+66.23595505617976, x1+38.932584269662925, y1+66.23595505617976, x1+38.76404494382023, y1+66.06741573033707, x1+38.59550561797752, y1+66.06741573033707, x1+38.42696629213483, y1+65.89887640449437, x1+38.25842696629213, y1+65.89887640449437, x1+38.08988764044943, y1+65.73033707865169, x1+37.92134831460674, y1+65.73033707865169, x1+37.75280898876405, y1+65.561797752809, x1+37.58426966292135, y1+65.561797752809, x1+37.41573033707865, y1+65.39325842696628, x1+37.247191011235955, y1+65.39325842696628, x1+37.07865168539326, y1+65.561797752809, x1+36.91011235955057, y1+65.561797752809, x1+36.74157303370787, y1+65.73033707865169, x1+36.57303370786517, y1+65.73033707865169, x1+36.40449438202247, y1+65.89887640449437, x1+36.235955056179776, y1+65.89887640449437, x1+36.067415730337075, y1+66.06741573033707, x1+35.89887640449438, y1+66.06741573033707, x1+35.73033707865169, y1+66.23595505617976, x1+35.561797752808985, y1+66.23595505617976, x1+35.39325842696629, y1+66.40449438202246, x1+35.2247191011236, y1+66.40449438202246, x1+35.0561797752809, y1+66.57303370786516, x1+34.8876404494382, y1+66.57303370786516, x1+34.71910112359551, y1+66.74157303370787, x1+34.55056179775281, y1+66.74157303370787, x1+34.38202247191011, y1+66.74157303370787, x1+34.21348314606742, y1+66.91011235955057, x1+34.044943820224724, y1+66.91011235955057, x1+33.87640449438202, y1+67.07865168539325, x1+33.70786516853932, y1+67.07865168539325, x1+33.53932584269663, y1+67.07865168539325, x1+33.37078651685393, y1+67.24719101123596, x1+33.20224719101123, y1+67.24719101123596, x1+33.03370786516854, y1+67.24719101123596, x1+32.86516853932584, y1+67.41573033707864, x1+32.69662921348314, y1+67.41573033707864, x1+32.52808988764045, y1+67.41573033707864, x1+32.359550561797754, y1+67.58426966292134, x1+32.19101123595506, y1+67.58426966292134, x1+32.02247191011236, y1+67.58426966292134, x1+31.853932584269664, y1+67.58426966292134, x1+31.68539325842697, y1+67.75280898876404, x1+31.51685393258427, y1+67.75280898876404, x1+31.348314606741575, y1+67.75280898876404, x1+31.179775280898884, y1+67.75280898876404, x1+31.01123595505618, y1+67.75280898876404, x1+30.842696629213478, y1+67.92134831460675, x1+30.674157303370784, y1+67.92134831460675, x1+30.505617977528093, y1+67.92134831460675, x1+30.337078651685392, y1+67.92134831460675, x1+30.168539325842698, y1+67.92134831460675, x1+30.0, y1+67.92134831460675, x1+29.831460674157302, y1+68.08988764044945, x1+29.662921348314608, y1+68.08988764044945, x1+29.494382022471914, y1+68.08988764044945, x1+29.325842696629216, y1+68.08988764044945, x1+29.157303370786522, y1+68.08988764044945, x1+28.98876404494382, y1+68.08988764044945, x1+28.820224719101123, y1+68.08988764044945, x1+28.651685393258425, y1+68.08988764044945, x1+28.48314606741573, y1+68.08988764044945, x1+28.314606741573037, y1+68.25842696629213, x1+28.146067415730336, y1+68.25842696629213, x1+27.977528089887638, y1+68.25842696629213, x1+27.808988764044944, y1+68.25842696629213, x1+27.640449438202246, y1+68.25842696629213, x1+27.471910112359545, y1+68.25842696629213, x1+27.303370786516854, y1+68.25842696629213, x1+27.134831460674153, y1+68.25842696629213, x1+26.96629213483146, y1+68.25842696629213, x1+26.797752808988765, y1+68.25842696629213, x1+26.629213483146067, y1+68.25842696629213, x1+26.46067415730337, y1+68.25842696629213, x1+26.292134831460675, y1+68.25842696629213, x1+26.123595505617974, y1+68.25842696629213, x1+25.955056179775276, y1+68.25842696629213, x1+25.786516853932582, y1+68.25842696629213, x1+25.617977528089888, y1+68.42696629213484, x1+25.44943820224719, y1+68.42696629213484, x1+25.280898876404496, y1+68.42696629213484, x1+25.1123595505618, y1+68.42696629213484, x1+24.943820224719104, y1+68.42696629213484, x1+24.775280898876407, y1+68.42696629213484, x1+24.60674157303371, y1+68.42696629213484, x1+24.438202247191015, y1+68.42696629213484, x1+24.269662921348313, y1+68.42696629213484, x1+24.101123595505616, y1+68.42696629213484, x1+23.93258426966292, y1+68.42696629213484, x1+23.764044943820224, y1+68.42696629213484, x1+23.595505617977526, y1+68.42696629213484, x1+23.426966292134832, y1+68.42696629213484, x1+23.258426966292138, y1+68.42696629213484, x1+23.089887640449437, y1+68.42696629213484, x1+22.92134831460674, y1+68.42696629213484, x1+22.752808988764045, y1+68.59550561797754, x1+22.584269662921347, y1+68.59550561797754, x1+22.41573033707865, y1+68.59550561797754, x1+22.247191011235955, y1+68.59550561797754, x1+22.078651685393258, y1+68.59550561797754, x1+21.91011235955056, y1+68.59550561797754, x1+21.741573033707866, y1+68.59550561797754, x1+21.573033707865168, y1+68.59550561797754, x1+21.40449438202247, y1+68.59550561797754, x1+21.235955056179776, y1+68.59550561797754, x1+21.06741573033708, y1+68.59550561797754, x1+20.89887640449438, y1+68.59550561797754, x1+20.730337078651687, y1+68.59550561797754, x1+20.56179775280899, y1+68.59550561797754, x1+20.393258426966288, y1+68.59550561797754, x1+20.224719101123593, y1+68.76404494382022, x1+20.0561797752809, y1+68.76404494382022, x1+19.887640449438205, y1+68.76404494382022, x1+19.719101123595507, y1+68.76404494382022, x1+19.55056179775281, y1+68.76404494382022, x1+19.382022471910116, y1+68.76404494382022, x1+19.213483146067414, y1+68.76404494382022, x1+19.044943820224717, y1+68.76404494382022, x1+18.876404494382026, y1+68.76404494382022, x1+18.707865168539325, y1+68.93258426966293, x1+18.53932584269663, y1+68.93258426966293, x1+18.370786516853936, y1+68.93258426966293, x1+18.202247191011235, y1+68.93258426966293, x1+18.033707865168537, y1+68.93258426966293, x1+17.865168539325843, y1+68.93258426966293, x1+17.696629213483146, y1+69.10112359550563, x1+17.52808988764045, y1+69.10112359550563, x1+17.359550561797754, y1+69.10112359550563, x1+17.191011235955056, y1+69.10112359550563, x1+17.022471910112362, y1+69.10112359550563, x1+16.85393258426966, y1+69.26966292134831, x1+16.685393258426966, y1+69.26966292134831, x1+16.51685393258427, y1+69.26966292134831, x1+16.34831460674157, y1+69.26966292134831, x1+16.179775280898877, y1+69.43820224719101, x1+16.01123595505618, y1+69.43820224719101, x1+15.842696629213485, y1+69.43820224719101, x1+15.674157303370787, y1+69.43820224719101, x1+15.50561797752809, y1+69.6067415730337, x1+15.337078651685392, y1+69.6067415730337, x1+15.168539325842696, y1+69.7752808988764, x1+15.0, y1+69.7752808988764, x1+14.831460674157304, y1+69.7752808988764, x1+14.662921348314608, y1+69.94382022471909, x1+14.49438202247191, y1+69.94382022471909, x1+14.325842696629213, y1+70.1123595505618, x1+14.157303370786519, y1+70.1123595505618, x1+13.988764044943819, y1+70.28089887640449, x1+13.820224719101123, y1+70.28089887640449, x1+13.651685393258427, y1+70.4494382022472, x1+13.48314606741573, y1+70.4494382022472, x1+13.314606741573034, y1+70.6179775280899, x1+13.146067415730338, y1+70.6179775280899, x1+12.977528089887638, y1+70.78651685393258, x1+12.808988764044944, y1+70.78651685393258, x1+12.640449438202248, y1+70.95505617977528, x1+12.471910112359552, y1+70.95505617977528, x1+12.303370786516854, y1+71.12359550561797, x1+12.134831460674157, y1+71.12359550561797, x1+11.96629213483146, y1+71.29213483146067, x1+11.797752808988763, y1+71.46067415730337, x1+11.629213483146069, y1+71.46067415730337, x1+11.46067415730337, y1+71.62921348314606, x1+11.292134831460674, y1+71.79775280898876, x1+11.123595505617978, y1+71.79775280898876, x1+10.95505617977528, y1+71.96629213483145, x1+10.786516853932584, y1+72.13483146067415, x1+10.617977528089888, y1+72.30337078651685, x1+10.44943820224719, y1+72.30337078651685, x1+10.280898876404494, y1+72.47191011235955, x1+10.112359550561797, y1+72.64044943820225, x1+9.943820224719103, y1+72.64044943820225, x1+9.775280898876405, y1+72.80898876404494, x1+9.606741573033707, y1+72.97752808988764, x1+9.438202247191013, y1+72.97752808988764, x1+9.269662921348315, y1+73.14606741573034, x1+9.101123595505618, y1+73.14606741573034, x1+8.932584269662922, y1+73.14606741573034]
	ar2=[x1+32.19101123595506, y1+58.14606741573034, x1+34.044943820224724, y1+58.48314606741573, x1+35.73033707865169, y1+58.65168539325843, x1+37.92134831460674, y1+58.65168539325843, x1+40.1123595505618, y1+58.48314606741573, x1+41.62921348314607, y1+58.314606741573044, x1+43.48314606741573, y1+57.80898876404495]
	ar3=[x1+21.573033707865168, y1+53.764044943820224, x1+23.93258426966292, y1+52.24719101123595, x1+26.292134831460675, y1+50.89887640449438, x1+28.651685393258425, y1+49.7191011235955, x1+31.68539325842697, y1+48.53932584269663, x1+35.2247191011236, y1+47.86516853932584, x1+39.10112359550562, y1+47.86516853932584, x1+42.13483146067416, y1+48.20224719101123, x1+44.8314606741573, y1+49.044943820224724, x1+47.69662921348315, y1+50.2247191011236, x1+50.39325842696629, y1+51.573033707865164, x1+52.24719101123595, y1+52.75280898876405, x1+53.258426966292134, y1+53.59550561797753]
	ar4=[x1+23.595505617977526, y1+44.157303370786515, x1+25.786516853932582, y1+42.80898876404494, x1+27.977528089887638, y1+41.62921348314607, x1+30.842696629213478, y1+40.44943820224719, x1+34.21348314606742, y1+39.77528089887641, x1+39.26966292134831, y1+39.77528089887641, x1+43.31460674157304, y1+40.61797752808988, x1+46.516853932584276, y1+41.62921348314607, x1+49.21348314606742, y1+42.80898876404494, x1+51.235955056179776, y1+44.157303370786515]
	ar5=[x1+30.674157303370784, y1+27.977528089887638, x1+44.157303370786515, y1+27.977528089887638]
	ar6=[x1+37.41573033707865, y1+21.235955056179776, x1+37.41573033707865, y1+34.71910112359551]
	



	can.create_polygon(ar1,fill=col1,outline=col2,width=1)
	can.create_line(ar2,fill=col2,width=1)
	can.create_line(ar3,fill=col2,width=1)
	can.create_line(ar4,fill=col2,width=1)
	can.create_line(ar5,fill=col2,width=1)
	can.create_line(ar6,fill=col2,width=1)


def draw_queen(x,y,col_):
	global st,can,col



	sz=75



	x1=x-sz-3.75
	x2=x-3.75
	y1=y-sz-3.75
	y2=y-3.75


	if col_==0:
		col1="#ffffff"
		col2=col[1]
	elif col_==1:
		col1="#000000"
		col2=col[0]




	can.create_polygon(x1+(sz/2)+(-5-15-15+5)*0.9090909091,y1+20*0.9090909091, x1+15*0.9090909091,y2-25*0.9090909091, x1+(15+10.5*5)*0.9090909091,y2-25*0.9090909091,
		x2-(sz/2)+(5+15+15-5)*0.9090909091,y1+20*0.9090909091, x1+(15+10.5*4)*0.9090909091,y2+(-25-5)*0.9090909091, x2-(sz/2)+(5+15-5)*0.9090909091,y1+15*0.9090909091, x1+(15+10.5*3)*0.9090909091,y2+(-25-10)*0.9090909091,
		x1+(sz/2)+(-5+5)*0.9090909091,y1+(5+5)*0.9090909091, x1+(15+10.5*2)*0.9090909091,y2+(-25-10)*0.9090909091, x1+(sz/2)+(-5-15+5)*0.9090909091,y1+15*0.9090909091, x1+(15+10.5)*0.9090909091,y2+(-25-5)*0.9090909091,
		x1+(sz/2)+(-5-15-15+5)*0.9090909091,y1+20*0.9090909091, fill=col1,outline=col2,width=1)
	

	can.create_polygon(x1+15*0.9090909091,y2-25*0.9090909091, x1+(15+5)*0.9090909091,y2+(-25+5)*0.9090909091, x1+(15-5+10.5*5)*0.9090909091,y2+(-25+5)*0.9090909091, x1+(15+10.5*5)*0.9090909091,y2-25*0.9090909091,fill=col1,outline=col2,width=1)
	can.create_rectangle(x1+(15+5)*0.9090909091,y2+(-25+5)*0.9090909091, x1+(15-5+10.5*5)*0.9090909091,y2+(-25+5+5)*0.9090909091,fill=col1,outline=col2,width=1)
	can.create_polygon(x1+(15+5)*0.9090909091,y2+(-25+10)*0.9090909091,  x1+15*0.9090909091,y2+(-25+10+5)*0.9090909091,  x1+(15+5)*0.9090909091,y2+(-25+10+5+5)*0.9090909091, 
		x1+(15-5+10.5*5)*0.9090909091,y2+(-25+10+5+5)*0.9090909091, x1+(15+10.5*5)*0.9090909091,y2+(-25+10+5)*0.9090909091, x1+(15-5+10.5*5)*0.9090909091,y2+(-25+10)*0.9090909091,fill=col1,outline=col2,width=1)

	can.create_oval(x1+(sz/2)-5*0.9090909091,y1+5*0.9090909091,x2-(sz/2)+5*0.9090909091,y1+15*0.9090909091,fill=col1,outline=col2,width=1)
	can.create_oval(x1+(sz/2)+(-5-15)*0.9090909091,y1+10*0.9090909091,x1+(sz/2)+(-5-5)*0.9090909091,y1+20*0.9090909091,fill=col1,outline=col2,width=1)
	can.create_oval(x1+(sz/2)+(-5-15-15)*0.9090909091,y1+15*0.9090909091,x1+(sz/2)+(-5-5-15)*0.9090909091,y1+25*0.9090909091,fill=col1,outline=col2,width=1)

	can.create_oval(x2-(sz/2)+(5+15)*0.9090909091,y1+10*0.9090909091,x2-(sz/2)+(5+5)*0.9090909091,y1+20*0.9090909091,fill=col1,outline=col2,width=1)
	can.create_oval(x2-(sz/2)+(5+15+15)*0.9090909091,y1+15*0.9090909091,x2-(sz/2)+(5+5+15)*0.9090909091,y1+25*0.9090909091,fill=col1,outline=col2,width=1)


def draw_knight(x,y,col_):
	global st,can,col

	sz=75

	x1=x-sz-3.75
	x2=x-3.75
	y1=y-sz-3.75
	y2=y-3.75

	if col_==0:
		col1="#ffffff"
		col2=col[1]
	elif col_==1:
		col1="#000000"
		col2=col[0]

	ar11=[x1+21.599999999999998, y1+69.3, x1+21.599999999999998, y1+67.2, x1+21.599999999999998, y1+65.55, x1+21.9, y1+64.2, x1+22.199999999999996, y1+63.3, x1+22.95, y1+61.95, x1+23.4, y1+61.19999999999999, x1+24.45, y1+59.85000000000001, x1+25.35, y1+58.65, x1+26.249999999999993, y1+57.6, x1+27.9, y1+56.25, x1+30.599999999999994, y1+53.4, x1+31.65, y1+52.2, x1+32.55, y1+50.85, x1+33.150000000000006, y1+49.95, x1+33.6, y1+49.050000000000004, x1+34.05, y1+47.85, x1+34.5, y1+46.8, x1+34.95, y1+44.85, x1+35.4, y1+42.0, x1+35.25, y1+40.05, x1+35.25, y1+38.4, x1+35.25, y1+37.5, x1+35.1, y1+36.89999999999999, x1+33.6, y1+37.95, x1+32.4, y1+38.7, x1+31.05, y1+39.45, x1+29.85, y1+40.2, x1+28.35, y1+40.95, x1+26.85, y1+41.7, x1+26.1, y1+42.15, x1+25.050000000000004, y1+42.75, x1+23.85, y1+43.49999999999999, x1+22.5, y1+44.39999999999999, x1+21.599999999999998, y1+45.0, x1+20.700000000000003, y1+46.05, x1+20.1, y1+46.95, x1+19.5, y1+47.85, x1+19.050000000000004, y1+48.75, x1+18.3, y1+50.25, x1+17.7, y1+51.45, x1+16.65, y1+52.95, x1+15.449999999999998, y1+54.15, x1+14.85, y1+54.45, x1+13.5, y1+55.05, x1+12.45, y1+54.9, x1+11.7, y1+54.45, x1+11.25, y1+53.55, x1+11.25, y1+52.65, x1+11.25, y1+52.499999999999986, x1+9.45, y1+52.65, x1+8.7, y1+52.499999999999986, x1+7.05, y1+51.9, x1+5.1, y1+50.25, x1+4.2, y1+48.9, x1+3.6, y1+47.1, x1+3.6, y1+45.45, x1+4.05, y1+42.75, x1+4.8, y1+40.8, x1+5.699999999999999, y1+39.000000000000304, x1+7.5, y1+36.6, x1+9.0, y1+34.2, x1+10.649999999999999, y1+31.65, x1+11.25, y1+30.450000000000006, x1+11.7, y1+28.65, x1+12.15, y1+27.15, x1+12.15, y1+25.050000000000004, x1+12.000000000000002, y1+24.75, x1+12.000000000000002, y1+22.65, x1+12.6, y1+21.599999999999998, x1+13.5, y1+20.4, x1+14.55, y1+19.35, x1+16.5, y1+17.55, x1+17.4, y1+16.35, x1+18.15, y1+15.299999999999997, x1+17.25, y1+5.699999999999999, x1+26.7, y1+11.399999999999999, x1+32.25, y1+5.549999999999999, x1+36.15, y1+13.65, x1+37.8, y1+13.5, x1+39.0, y1+13.2, x1+40.35000000000001, y1+13.2, x1+42.15, y1+13.35, x1+43.8, y1+13.65, x1+45.45, y1+14.1, x1+46.8, y1+14.4, x1+48.150000000000006, y1+15.0, x1+50.25, y1+16.05, x1+51.75, y1+17.1, x1+52.95, y1+18.0, x1+53.85, y1+18.9, x1+55.35, y1+20.250000000000004, x1+56.85, y1+22.199999999999996, x1+57.6, y1+23.4, x1+58.80000000000001, y1+25.35, x1+59.7, y1+26.85, x1+60.75, y1+29.250000000000007, x1+61.79999999999999, y1+31.799999999999994, x1+62.84999999999999, y1+34.8, x1+63.45, y1+37.2, x1+64.2, y1+39.6, x1+64.94999999999999, y1+42.599999999999994, x1+65.85, y1+47.25, x1+66.45, y1+50.4, x1+66.9, y1+53.7, x1+67.35000000000001, y1+57.15, x1+67.65, y1+60.60000000000001, x1+67.65, y1+60.60000000000001, x1+67.8, y1+62.4, x1+68.1, y1+65.4, x1+68.1, y1+69.3, x1+68.1, y1+69.3]
	ar22=[x1+6.000000000000001, y1+48.00000000000001, x1+7.350000000000001, y1+47.25, x1+8.85, y1+46.2, x1+9.75, y1+45.3, x1+9.75, y1+44.55, x1+9.6, y1+43.8, x1+9.3, y1+43.199999999999996, x1+8.7, y1+42.9, x1+7.8, y1+42.9, x1+6.9, y1+43.49999999999999, x1+6.3, y1+44.699999999999996, x1+6.000000000000001, y1+45.9, x1+5.85, y1+46.8, x1+6.000000000000001, y1+48.00000000000001]
	ar33=[x1+15.150000000000002, y1+28.65, x1+16.65, y1+28.05, x1+18.15, y1+27.15, x1+19.650000000000002, y1+25.95, x1+20.4, y1+25.050000000000004, x1+21.15, y1+24.000000000000004, x1+21.599999999999998, y1+23.25, x1+21.749999999999996, y1+22.799999999999997, x1+21.749999999999996, y1+22.5, x1+20.85, y1+22.199999999999996, x1+19.650000000000002, y1+22.349999999999998, x1+18.75, y1+22.95, x1+18.0, y1+23.7, x1+16.95, y1+25.35, x1+16.2, y1+26.55, x1+15.899999999999997, y1+27.3, x1+15.150000000000002, y1+28.5, x1+15.150000000000002, y1+28.65]



	
	
	can.create_polygon(ar11,outline=col2,fill=col1,width=1)
	can.create_polygon(ar22,outline=col2,fill=col1,width=1)
	can.create_polygon(ar33,outline=col2,fill=col1,width=1)


def getxy_from_pos(x,y):

	global st



	if st==1:

		if x=="a":
			x=82.5
		elif x=="b":
			x=82.5*2
		elif x=="c":
			x=82.5*3
		elif x=="d":
			x=82.5*4
		elif x=="e":
			x=82.5*5
		elif x=="f":
			x=82.5*6	
		elif x=="g":
			x=82.5*7
		elif x=="h":
			x=82.5*8


		if y=="8":
			y=82.5
		elif y=="7":
			y=82.5*2
		elif y=="6":
			y=82.5*3
		elif y=="5":
			y=82.5*4
		elif y=="4":
			y=82.5*5
		elif y=="3":
			y=82.5*6
		elif y=="2":
			y=82.5*7
		elif y=="1":
			y=82.5*8
	elif st==0:


		if x=="h":
			x=82.5
		elif x=="g":
			x=82.5*2
		elif x=="f":
			x=82.5*3
		elif x=="e":
			x=82.5*4
		elif x=="d":
			x=82.5*5
		elif x=="c":
			x=82.5*6	
		elif x=="b":
			x=82.5*7
		elif x=="a":
			x=82.5*8


		if y=="1":
			y=82.5
		elif y=="2":
			y=82.5*2
		elif y=="3":
			y=82.5*3
		elif y=="4":
			y=82.5*4
		elif y=="5":
			y=82.5*5
		elif y=="6":
			y=82.5*6
		elif y=="7":
			y=82.5*7
		elif y=="8":
			y=82.5*8


	x=x+20
	y=y+20
	sz=82.5
	return [x,y]


def create_polygon(*args, **kwargs):
	global can




	if "alpha" in kwargs:         
		if "fill" in kwargs:
			# Get and process the input data
			fill = root.winfo_rgb(kwargs.pop("fill"))\
			       + (int(kwargs.pop("alpha") * 255),)
			outline = kwargs.pop("outline") if "outline" in kwargs else None

			# We need to find a rectangle the polygon is inscribed in
			# (max(args[::2]), max(args[1::2])) are x and y of the bottom right point of this rectangle
			# and they also are the width and height of it respectively (the image will be inserted into
			# (0, 0) coords for simplicity)
			image = Image.new("RGBA", (max(args[::2]), max(args[1::2])))

			ImageDraw.Draw(image).polygon(args, fill=fill, outline=outline)



			images.append(ImageTk.PhotoImage(image))  # prevent the Image from being garbage-collected


			return can.create_image(0, 0, image=images[-1], anchor="nw")  # insert the Image to the 0, 0 coords
		raise ValueError("fill color must be specified!")
	return can.create_polygon(*args, **kwargs)

images = []


def draw_transparent_bg(xx,yy,x_,y_,r,col,opacity,con):



	if con==0:
		create_polygon(x_,y_, x_+xx,y_, x_+xx,y_+yy, x_,y_+yy, fill=col, alpha=opacity)

	elif con==1:



		ar=[]


		ang=270

		for a_ in range(90):


			x=r*math.sin(math.radians(ang))+x_+r
			y=r*math.cos(math.radians(ang))+y_+r


			ar.append(int(x))
			ar.append(int(y))



			ang-=1





		ang=180

		for a_ in range(90):


			x=r*math.sin(math.radians(ang))+x_+xx-r
			y=r*math.cos(math.radians(ang))+y_+r


			ar.append(int(x))
			ar.append(int(y))



			ang-=1




		ang=90

		for a_ in range(90):


			x=r*math.sin(math.radians(ang))+x_+xx-r
			y=r*math.cos(math.radians(ang))+y_+yy-r


			ar.append(int(x))
			ar.append(int(y))



			ang-=1






		ang=0

		for a_ in range(90):


			x=r*math.sin(math.radians(ang))+x_+r
			y=r*math.cos(math.radians(ang))+y_+yy-r


			ar.append(int(x))
			ar.append(int(y))



			ang-=1







		create_polygon(*ar, fill=col, alpha=opacity)


def draw_board():
	global can
	global turn,cpu,user,col,flag


	col3=col[0]

	if flag==1:
		can.create_rectangle(0,0,700,700,fill="#ff5757",outline="#ff5757")
		col3="#000000"


	al="abcdefgh"

	col1=col[0]
	col2=col[0]
	if turn==cpu:
		can.create_rectangle(0,0, 700,20-1, fill="#78fe27",outline="#78fe27")
		col1="#000000"

	elif turn==user:
		can.create_rectangle(0,680+1, 700,700, fill="#78fe27",outline="#78fe27")
		col2="#000000"





	if cpu==0 or cpu=="b":

		bst=0


		x=20+82.5/2
		for val in al:
			can.create_text(x,10,text=val,font=("FreeMono",13),anchor="c",fill=col1)

			can.create_text(x,690,text=val,font=("FreeMono",13),anchor="c",fill=col2)

			x+=82.5


		c=8
		y=20+82.5/2
		for n in range(8):

			can.create_text(10,y,text=str(c),font=("FreeMono",13),anchor="c",fill=col3)
			can.create_text(690,y,text=str(c),font=("FreeMono",13),anchor="c",fill=col3)

			y+=82.5
			c-=1



	else:

		bst=1

		v=len(al)

		x=20+82.5/2
		c=-1
		for val in range(v):
			can.create_text(x,10,text=al[c],font=("FreeMono",13),anchor="c",fill=col1)

			can.create_text(x,690,text=al[c],font=("FreeMono",13),anchor="c",fill=col2)

			x+=82.5
			c-=1


		c=1
		y=20+82.5/2
		for n in range(8):

			can.create_text(10,y,text=str(c),font=("FreeMono",13),anchor="c",fill=col3)
			can.create_text(690,y,text=str(c),font=("FreeMono",13),anchor="c",fill=col3)

			y+=82.5
			c+=1


	y=20

	for y_ in range(8):

		x=20

		for x_ in range(8):

			if bst==0:
				bcol=col[0]
			elif bst==1:
				bcol=col[1]




			can.create_rectangle(x,y, x+82.5,y+82.5, fill=bcol,outline=bcol)


			if x_!=7:

				if bst==0:
					bst=1
				elif bst==1:
					bst=0

			x+=82.5

		y+=82.5



def sel(x,y):

	global can,col



	can.create_line(0+x+10-1,82.5+y+5, 82.5-1+x-10,82.5+y+5,fill=col[0],width=3)





def start_game():


	global stockfish,difficulty,sel_side,user,cpu,turn,moves,st,cpu_st,state
	global start_time
	global tp_st
	global board_ar,flag,click,user_move,pmoves,pstate,sel_



	board_ar=[]
	flag=0


	click=0
	user_move=""
	pmoves=[]

	sel_=""
	pstate=""



	cwd = os.getcwd()

	cwd2=""
	c=cwd.split("\\")

	for i in c:
		cwd2+=i
		cwd2+="/"


	stockfish = Stockfish(path=cwd2+"stockfish-windows-x86-64-avx2/stockfish/stockfish-windows-x86-64-avx2.exe"
		,depth=difficulty, parameters={"Threads": 2, "Minimum Thinking Time": 30,"Skill Level": difficulty})


	if sel_side==1:
		user="w"
		cpu="b"

		cpu_st=0

		st=1

	elif sel_side==2:

		r=random.randint(0,1)


		if r==0:
			user="w"
			cpu="b"

			cpu_st=0

			st=1
		elif r==1:
			user="b"
			cpu="w"

			cpu_st=1
			start_time=time.time()

			st=0
	elif sel_side==3:
		user="b"
		cpu="w"

		cpu_st=1

		start_time=time.time()

		st=0

	turn="w"

	stockfish.set_fen_position("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR/ w KQkq - 0 1")

	moves=[]

	state="game"

	tp_st=0

	main()







def scale_difficulty():

	global difficulty



	xx,yy=496,494

	x_=(700-xx)/2
	y_=(700-yy)/2


	xv=(496-(82.5*3))/4

	x=x_+xv-408.925/21

	xx=difficulty*(408.925/21)

	can.create_oval(x+xx-3,y_+250-12+20, x+xx+3,y_+250-12+6+20,fill=col[0],outline=col[0])
	can.create_oval(x+xx-3,y_+250+12-6+20, x+xx+3,y_+250+12+20,fill=col[0],outline=col[0])
	can.create_rectangle(x+xx-3,y_+250-12+3+20, x+xx+3,y_+250+12-3+20,fill=col[0],outline=col[0])


def intro():

	global can
	global sel_side

	global state

	global col

	global bg_sel


	x=(wd-700)/2
	root.geometry("700x700+"+str(int(x))+"+0" )

	state="intro"

	can.delete("all")



	draw_board()


	xx,yy=496,494

	x_=(700-xx)/2
	y_=(700-yy)/2


	draw_transparent_bg(700,700,0,0,15,"#000000",0.5,0)
	draw_transparent_bg(xx,yy,x_,y_,15,"#000000",0.9,1)

	can.create_text(350,y_+40,text="Play aganist Stockfish",font=("FreeMono",13),anchor="c",fill=col[0])

	xv=(496-(82.5*3))/4









	if sel_side==1:


		sel(x_+xv,y_+80)

	elif sel_side==2:

		sel(x_+xv*2+82.5,y_+80)

	elif sel_side==3:

		sel(x_+xv*3+82.5*2,y_+80)










	draw_pawn(x_+xv+82.5,y_+80+82.5,0)
	draw_pawn1(x_+xv*2+82.5+82.5,y_+80+82.5,0)
	draw_pawn2(x_+xv*2+82.5+82.5,y_+80+82.5,1)
	draw_pawn(x_+xv*3+82.5*2+82.5,y_+80+82.5,1)

	can.create_text(x_+xv+82.5/2,y_+80+82.5+20,text="white",font=("FreeMono",13),fill=col[0])
	can.create_text(x_+xv*2+82.5+82.5/2,y_+80+82.5+20,text="random",font=("FreeMono",13),fill=col[0])
	can.create_text(x_+xv*3+82.5*2+82.5/2,y_+80+82.5+20,text="black",font=("FreeMono",13),fill=col[0])


	can.create_text(350,y_+220+20,text="Difficulty",font=("FreeMono",13),anchor="c",fill=col[0])


	can.create_line(x_+xv,y_+250+20, x_+xx-xv,y_+250+20,fill=col[0],width=2)

	can.create_text(350,y_+250+30+20,text=str(int(difficulty)),font=("FreeMono",13),fill=col[0])



	scale_difficulty()



	




	w=100
	xc=x_+xv
	xc2=(371.75-w*3)/4


	
	#can.create_rectangle(xc-50+30,y_+300+40, 555.875,y_+300+100+30,outline=col[0])





	#draw_transparent_bg(xx,yy,x_,y_,15,"#000000",0.85,1)


	#draw_transparent_bg(411.75,90,xc-50+30,y_+300+40,15,"#000000",1,1)
	

	can.create_arc(xc-50+30,y_+300+40, xc-50+30+20,y_+300+40+20,start=90,extent=90,style="arc",outline="#555555")
	can.create_arc(xc-50+30,y_+300+100+30-20, xc-50+30+20,y_+300+100+30,start=180,extent=90,style="arc",outline="#555555")
	can.create_arc(555.875-20,y_+300+100+30-20, 555.875,y_+300+100+30,start=270,extent=90,style="arc",outline="#555555")
	can.create_arc(555.875-20,y_+300+40, 555.875,y_+300+40+20,start=0,extent=90,style="arc",outline="#555555")	

	can.create_line(xc-50+30,y_+300+40+10-1, xc-50+30,y_+300+100+30-10,fill="#555555")
	can.create_line(xc-50+30+10-1,y_+300+100+30, 555.875-10,y_+300+100+30,fill="#555555")
	can.create_line(555.875,y_+300+100+30-10, 555.875,y_+300+40+10-1,fill="#555555")
	can.create_line(555.875-10,y_+300+40, 555.875-340-3,y_+300+40,fill="#555555")

	can.create_text(xc-50+30+15,y_+300+40,text="Theme",font=("FreeMono",13),anchor="w",fill=col[0])




	if bg_sel==1:
		can.create_rectangle(xc-3,y_+360-3, xc+w+3,y_+360+w/2+3,outline=col[0])

	elif bg_sel==2:
		can.create_rectangle(xc+xc2*2+w-3,y_+360-3, xc+xc2*2+w*2+3,y_+360+w/2+3,outline=col[0])

	elif bg_sel==3:
		can.create_rectangle(xc+371.75-w-6,y_+360-3, xc+371.75,y_+360+w/2+3,outline=col[0])




	can.create_rectangle(xc,y_+360, xc+w/2,y_+360+w/2,fill="#B1E4B9",outline="#B1E4B9")
	can.create_rectangle(xc+w/2,y_+360, xc+w,y_+360+w/2,fill="#70A2A3",outline="#70A2A3")



	

	can.create_rectangle(xc+xc2*2+w,y_+360, xc+xc2*2+w*2-w/2,y_+360+w/2,fill="#eedc97",outline="#eedc97")
	can.create_rectangle(xc+xc2*2+w+w/2,y_+360, xc+xc2*2+w*2,y_+360+w/2,fill="#8c6c34",outline="#8c6c34")

	

	can.create_rectangle(xc+371.75-3-w,y_+360, xc+371.75-3-w/2,y_+360+w/2,fill="#cccccc",outline="#cccccc")
	can.create_rectangle(xc+371.75-3-w/2,y_+360, xc+371.75-3,y_+360+w/2,fill="#7c7c7c",outline="#7c7c7c")




















	


	#can.create_rectangle(350-40,y_+yy-30-30, 350+40,y_+yy-30,fill="#000000",outline="#000000")
	#can.create_oval(350-40-15,y_+yy-30-30, 350-40+15,y_+yy-30-30+30,fill="#000000",outline="#000000")
	#can.create_oval(350+40-15,y_+yy-30-30, 350+40+15,y_+yy-30-30+30,fill="#000000",outline="#000000")


	can.create_arc(350-40-15,y_+yy-5-30-10, 350-40+15,y_+yy-5-30+30-10,start=90,extent=180,style="arc",outline=col[0])
	can.create_arc(350+40-15,y_+yy-5-30-10, 350+40+15,y_+yy-5-30+30-10,start=270,extent=180,style="arc",outline=col[0])

	can.create_line(350-40,y_+yy-5-30-10, 350+40,y_+yy-5-30-10,fill=col[0])
	can.create_line(350-40-1,y_+yy-5-10, 350+40,y_+yy-5-10,fill=col[0])




	#can.create_line(x_,y_+yy-40, x_+xx,y_+yy-40,fill=col[0])


	can.create_text(350,y_+yy-20-10, text="PLAY", font=("FreeMono",13),fill=col[0])







cpu=0
user=0
col=["#B1E4B9","#70A2A3",]

turn="x"

sel_side=2

st=1

state=0

difficulty=1

stockfish=0

moves=[]

start_time=0

quit=0
undo=0


bg_sel=1


root=tk.Tk()

wd,ht=root.winfo_screenwidth(),root.winfo_screenheight()


x=(wd-700)/2
root.geometry("700x700+"+str(int(x))+"+0" )

root.wm_attributes("-transparentcolor","blue")
root.resizable(0,0)
root.title("Hchess")
root.wm_attributes("-topmost",1)
root.iconbitmap("data/icon.ico")


can=tk.Canvas(width=740,height=700,bg="#000000",relief="flat",highlightthickness=0,border=0)
can.place(in_=root,x=0,y=0)
can.bind("<Button-1>",can_b1)











intro()


cpu_move()

root.mainloop()
